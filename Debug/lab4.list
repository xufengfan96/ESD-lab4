
lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004294  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08004444  08004444  00014444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044fc  080044fc  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080044fc  080044fc  000144fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004504  08004504  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004504  08004504  00014504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004508  08004508  00014508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800450c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004980  20000010  0800451c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004990  0800451c  00024990  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000104c6  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002195  00000000  00000000  00030506  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b78  00000000  00000000  000326a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a80  00000000  00000000  00033218  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000023b1  00000000  00000000  00033c98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b534  00000000  00000000  00036049  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d71cf  00000000  00000000  0004157d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011874c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e18  00000000  00000000  001187c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000010 	.word	0x20000010
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800442c 	.word	0x0800442c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000014 	.word	0x20000014
 80001ec:	0800442c 	.word	0x0800442c

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b972 	b.w	80004ec <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	4688      	mov	r8, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14b      	bne.n	80002c6 <__udivmoddi4+0xa6>
 800022e:	428a      	cmp	r2, r1
 8000230:	4615      	mov	r5, r2
 8000232:	d967      	bls.n	8000304 <__udivmoddi4+0xe4>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0720 	rsb	r7, r2, #32
 800023e:	fa01 f302 	lsl.w	r3, r1, r2
 8000242:	fa20 f707 	lsr.w	r7, r0, r7
 8000246:	4095      	lsls	r5, r2
 8000248:	ea47 0803 	orr.w	r8, r7, r3
 800024c:	4094      	lsls	r4, r2
 800024e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000252:	0c23      	lsrs	r3, r4, #16
 8000254:	fbb8 f7fe 	udiv	r7, r8, lr
 8000258:	fa1f fc85 	uxth.w	ip, r5
 800025c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000260:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000264:	fb07 f10c 	mul.w	r1, r7, ip
 8000268:	4299      	cmp	r1, r3
 800026a:	d909      	bls.n	8000280 <__udivmoddi4+0x60>
 800026c:	18eb      	adds	r3, r5, r3
 800026e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000272:	f080 811b 	bcs.w	80004ac <__udivmoddi4+0x28c>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 8118 	bls.w	80004ac <__udivmoddi4+0x28c>
 800027c:	3f02      	subs	r7, #2
 800027e:	442b      	add	r3, r5
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0fe 	udiv	r0, r3, lr
 8000288:	fb0e 3310 	mls	r3, lr, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 fc0c 	mul.w	ip, r0, ip
 8000294:	45a4      	cmp	ip, r4
 8000296:	d909      	bls.n	80002ac <__udivmoddi4+0x8c>
 8000298:	192c      	adds	r4, r5, r4
 800029a:	f100 33ff 	add.w	r3, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x290>
 80002a2:	45a4      	cmp	ip, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x290>
 80002a8:	3802      	subs	r0, #2
 80002aa:	442c      	add	r4, r5
 80002ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002b0:	eba4 040c 	sub.w	r4, r4, ip
 80002b4:	2700      	movs	r7, #0
 80002b6:	b11e      	cbz	r6, 80002c0 <__udivmoddi4+0xa0>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c6 4300 	strd	r4, r3, [r6]
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xbe>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80eb 	beq.w	80004a6 <__udivmoddi4+0x286>
 80002d0:	2700      	movs	r7, #0
 80002d2:	e9c6 0100 	strd	r0, r1, [r6]
 80002d6:	4638      	mov	r0, r7
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f783 	clz	r7, r3
 80002e2:	2f00      	cmp	r7, #0
 80002e4:	d147      	bne.n	8000376 <__udivmoddi4+0x156>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd0>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80fa 	bhi.w	80004e4 <__udivmoddi4+0x2c4>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	4698      	mov	r8, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa0>
 80002fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xe8>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 808f 	bne.w	8000430 <__udivmoddi4+0x210>
 8000312:	1b49      	subs	r1, r1, r5
 8000314:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000318:	fa1f f885 	uxth.w	r8, r5
 800031c:	2701      	movs	r7, #1
 800031e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fb0e 111c 	mls	r1, lr, ip, r1
 8000328:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800032c:	fb08 f10c 	mul.w	r1, r8, ip
 8000330:	4299      	cmp	r1, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x124>
 8000334:	18eb      	adds	r3, r5, r3
 8000336:	f10c 30ff 	add.w	r0, ip, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4299      	cmp	r1, r3
 800033e:	f200 80cd 	bhi.w	80004dc <__udivmoddi4+0x2bc>
 8000342:	4684      	mov	ip, r0
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	b2a3      	uxth	r3, r4
 8000348:	fbb1 f0fe 	udiv	r0, r1, lr
 800034c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000350:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000354:	fb08 f800 	mul.w	r8, r8, r0
 8000358:	45a0      	cmp	r8, r4
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x14c>
 800035c:	192c      	adds	r4, r5, r4
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x14a>
 8000364:	45a0      	cmp	r8, r4
 8000366:	f200 80b6 	bhi.w	80004d6 <__udivmoddi4+0x2b6>
 800036a:	4618      	mov	r0, r3
 800036c:	eba4 0408 	sub.w	r4, r4, r8
 8000370:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000374:	e79f      	b.n	80002b6 <__udivmoddi4+0x96>
 8000376:	f1c7 0c20 	rsb	ip, r7, #32
 800037a:	40bb      	lsls	r3, r7
 800037c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000380:	ea4e 0e03 	orr.w	lr, lr, r3
 8000384:	fa01 f407 	lsl.w	r4, r1, r7
 8000388:	fa20 f50c 	lsr.w	r5, r0, ip
 800038c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000390:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000394:	4325      	orrs	r5, r4
 8000396:	fbb3 f9f8 	udiv	r9, r3, r8
 800039a:	0c2c      	lsrs	r4, r5, #16
 800039c:	fb08 3319 	mls	r3, r8, r9, r3
 80003a0:	fa1f fa8e 	uxth.w	sl, lr
 80003a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a8:	fb09 f40a 	mul.w	r4, r9, sl
 80003ac:	429c      	cmp	r4, r3
 80003ae:	fa02 f207 	lsl.w	r2, r2, r7
 80003b2:	fa00 f107 	lsl.w	r1, r0, r7
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1e 0303 	adds.w	r3, lr, r3
 80003bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c0:	f080 8087 	bcs.w	80004d2 <__udivmoddi4+0x2b2>
 80003c4:	429c      	cmp	r4, r3
 80003c6:	f240 8084 	bls.w	80004d2 <__udivmoddi4+0x2b2>
 80003ca:	f1a9 0902 	sub.w	r9, r9, #2
 80003ce:	4473      	add	r3, lr
 80003d0:	1b1b      	subs	r3, r3, r4
 80003d2:	b2ad      	uxth	r5, r5
 80003d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d8:	fb08 3310 	mls	r3, r8, r0, r3
 80003dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1e 0404 	adds.w	r4, lr, r4
 80003ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f0:	d26b      	bcs.n	80004ca <__udivmoddi4+0x2aa>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d969      	bls.n	80004ca <__udivmoddi4+0x2aa>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4474      	add	r4, lr
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c2      	mov	sl, r8
 800040a:	464b      	mov	r3, r9
 800040c:	d354      	bcc.n	80004b8 <__udivmoddi4+0x298>
 800040e:	d051      	beq.n	80004b4 <__udivmoddi4+0x294>
 8000410:	2e00      	cmp	r6, #0
 8000412:	d069      	beq.n	80004e8 <__udivmoddi4+0x2c8>
 8000414:	ebb1 050a 	subs.w	r5, r1, sl
 8000418:	eb64 0403 	sbc.w	r4, r4, r3
 800041c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000420:	40fd      	lsrs	r5, r7
 8000422:	40fc      	lsrs	r4, r7
 8000424:	ea4c 0505 	orr.w	r5, ip, r5
 8000428:	e9c6 5400 	strd	r5, r4, [r6]
 800042c:	2700      	movs	r7, #0
 800042e:	e747      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f703 	lsr.w	r7, r0, r3
 8000438:	4095      	lsls	r5, r2
 800043a:	fa01 f002 	lsl.w	r0, r1, r2
 800043e:	fa21 f303 	lsr.w	r3, r1, r3
 8000442:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000446:	4338      	orrs	r0, r7
 8000448:	0c01      	lsrs	r1, r0, #16
 800044a:	fbb3 f7fe 	udiv	r7, r3, lr
 800044e:	fa1f f885 	uxth.w	r8, r5
 8000452:	fb0e 3317 	mls	r3, lr, r7, r3
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb07 f308 	mul.w	r3, r7, r8
 800045e:	428b      	cmp	r3, r1
 8000460:	fa04 f402 	lsl.w	r4, r4, r2
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x256>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f107 3cff 	add.w	ip, r7, #4294967295
 800046c:	d22f      	bcs.n	80004ce <__udivmoddi4+0x2ae>
 800046e:	428b      	cmp	r3, r1
 8000470:	d92d      	bls.n	80004ce <__udivmoddi4+0x2ae>
 8000472:	3f02      	subs	r7, #2
 8000474:	4429      	add	r1, r5
 8000476:	1acb      	subs	r3, r1, r3
 8000478:	b281      	uxth	r1, r0
 800047a:	fbb3 f0fe 	udiv	r0, r3, lr
 800047e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000482:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000486:	fb00 f308 	mul.w	r3, r0, r8
 800048a:	428b      	cmp	r3, r1
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x27e>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f100 3cff 	add.w	ip, r0, #4294967295
 8000494:	d217      	bcs.n	80004c6 <__udivmoddi4+0x2a6>
 8000496:	428b      	cmp	r3, r1
 8000498:	d915      	bls.n	80004c6 <__udivmoddi4+0x2a6>
 800049a:	3802      	subs	r0, #2
 800049c:	4429      	add	r1, r5
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a4:	e73b      	b.n	800031e <__udivmoddi4+0xfe>
 80004a6:	4637      	mov	r7, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e709      	b.n	80002c0 <__udivmoddi4+0xa0>
 80004ac:	4607      	mov	r7, r0
 80004ae:	e6e7      	b.n	8000280 <__udivmoddi4+0x60>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x8c>
 80004b4:	4541      	cmp	r1, r8
 80004b6:	d2ab      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004bc:	eb69 020e 	sbc.w	r2, r9, lr
 80004c0:	3801      	subs	r0, #1
 80004c2:	4613      	mov	r3, r2
 80004c4:	e7a4      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c6:	4660      	mov	r0, ip
 80004c8:	e7e9      	b.n	800049e <__udivmoddi4+0x27e>
 80004ca:	4618      	mov	r0, r3
 80004cc:	e795      	b.n	80003fa <__udivmoddi4+0x1da>
 80004ce:	4667      	mov	r7, ip
 80004d0:	e7d1      	b.n	8000476 <__udivmoddi4+0x256>
 80004d2:	4681      	mov	r9, r0
 80004d4:	e77c      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d6:	3802      	subs	r0, #2
 80004d8:	442c      	add	r4, r5
 80004da:	e747      	b.n	800036c <__udivmoddi4+0x14c>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	442b      	add	r3, r5
 80004e2:	e72f      	b.n	8000344 <__udivmoddi4+0x124>
 80004e4:	4638      	mov	r0, r7
 80004e6:	e708      	b.n	80002fa <__udivmoddi4+0xda>
 80004e8:	4637      	mov	r7, r6
 80004ea:	e6e9      	b.n	80002c0 <__udivmoddi4+0xa0>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f4:	f000 fa3c 	bl	8000970 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f8:	f000 f846 	bl	8000588 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fc:	f000 f8a4 	bl	8000648 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000500:	f001 f99e 	bl	8001840 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  q1=xQueueCreate(7,sizeof(unsigned int));
 8000504:	2200      	movs	r2, #0
 8000506:	2104      	movs	r1, #4
 8000508:	2007      	movs	r0, #7
 800050a:	f001 fc6c 	bl	8001de6 <xQueueGenericCreate>
 800050e:	4602      	mov	r2, r0
 8000510:	4b12      	ldr	r3, [pc, #72]	; (800055c <main+0x6c>)
 8000512:	601a      	str	r2, [r3, #0]
  q2=xQueueCreate(7,sizeof(unsigned int));
 8000514:	2200      	movs	r2, #0
 8000516:	2104      	movs	r1, #4
 8000518:	2007      	movs	r0, #7
 800051a:	f001 fc64 	bl	8001de6 <xQueueGenericCreate>
 800051e:	4602      	mov	r2, r0
 8000520:	4b0f      	ldr	r3, [pc, #60]	; (8000560 <main+0x70>)
 8000522:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000524:	4a0f      	ldr	r2, [pc, #60]	; (8000564 <main+0x74>)
 8000526:	2100      	movs	r1, #0
 8000528:	480f      	ldr	r0, [pc, #60]	; (8000568 <main+0x78>)
 800052a:	f001 f9f3 	bl	8001914 <osThreadNew>
 800052e:	4602      	mov	r2, r0
 8000530:	4b0e      	ldr	r3, [pc, #56]	; (800056c <main+0x7c>)
 8000532:	601a      	str	r2, [r3, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8000534:	4a0e      	ldr	r2, [pc, #56]	; (8000570 <main+0x80>)
 8000536:	2100      	movs	r1, #0
 8000538:	480e      	ldr	r0, [pc, #56]	; (8000574 <main+0x84>)
 800053a:	f001 f9eb 	bl	8001914 <osThreadNew>
 800053e:	4602      	mov	r2, r0
 8000540:	4b0d      	ldr	r3, [pc, #52]	; (8000578 <main+0x88>)
 8000542:	601a      	str	r2, [r3, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 8000544:	4a0d      	ldr	r2, [pc, #52]	; (800057c <main+0x8c>)
 8000546:	2100      	movs	r1, #0
 8000548:	480d      	ldr	r0, [pc, #52]	; (8000580 <main+0x90>)
 800054a:	f001 f9e3 	bl	8001914 <osThreadNew>
 800054e:	4602      	mov	r2, r0
 8000550:	4b0c      	ldr	r3, [pc, #48]	; (8000584 <main+0x94>)
 8000552:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000554:	f001 f9a8 	bl	80018a8 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000558:	e7fe      	b.n	8000558 <main+0x68>
 800055a:	bf00      	nop
 800055c:	20004944 	.word	0x20004944
 8000560:	2000493c 	.word	0x2000493c
 8000564:	08004480 	.word	0x08004480
 8000568:	080006ad 	.word	0x080006ad
 800056c:	20004938 	.word	0x20004938
 8000570:	080044a4 	.word	0x080044a4
 8000574:	08000751 	.word	0x08000751
 8000578:	20004940 	.word	0x20004940
 800057c:	080044c8 	.word	0x080044c8
 8000580:	080007c5 	.word	0x080007c5
 8000584:	20004948 	.word	0x20004948

08000588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b094      	sub	sp, #80	; 0x50
 800058c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058e:	f107 0320 	add.w	r3, r7, #32
 8000592:	2230      	movs	r2, #48	; 0x30
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f003 ff3f 	bl	800441a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800059c:	f107 030c 	add.w	r3, r7, #12
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	605a      	str	r2, [r3, #4]
 80005a6:	609a      	str	r2, [r3, #8]
 80005a8:	60da      	str	r2, [r3, #12]
 80005aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ac:	2300      	movs	r3, #0
 80005ae:	60bb      	str	r3, [r7, #8]
 80005b0:	4b23      	ldr	r3, [pc, #140]	; (8000640 <SystemClock_Config+0xb8>)
 80005b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b4:	4a22      	ldr	r2, [pc, #136]	; (8000640 <SystemClock_Config+0xb8>)
 80005b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ba:	6413      	str	r3, [r2, #64]	; 0x40
 80005bc:	4b20      	ldr	r3, [pc, #128]	; (8000640 <SystemClock_Config+0xb8>)
 80005be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c4:	60bb      	str	r3, [r7, #8]
 80005c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005c8:	2300      	movs	r3, #0
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	4b1d      	ldr	r3, [pc, #116]	; (8000644 <SystemClock_Config+0xbc>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005d4:	4a1b      	ldr	r2, [pc, #108]	; (8000644 <SystemClock_Config+0xbc>)
 80005d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005da:	6013      	str	r3, [r2, #0]
 80005dc:	4b19      	ldr	r3, [pc, #100]	; (8000644 <SystemClock_Config+0xbc>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005e4:	607b      	str	r3, [r7, #4]
 80005e6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005e8:	2302      	movs	r3, #2
 80005ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ec:	2301      	movs	r3, #1
 80005ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f0:	2310      	movs	r3, #16
 80005f2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005f4:	2300      	movs	r3, #0
 80005f6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f8:	f107 0320 	add.w	r3, r7, #32
 80005fc:	4618      	mov	r0, r3
 80005fe:	f000 fd0f 	bl	8001020 <HAL_RCC_OscConfig>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000608:	f000 f916 	bl	8000838 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060c:	230f      	movs	r3, #15
 800060e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000610:	2300      	movs	r3, #0
 8000612:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000614:	2300      	movs	r3, #0
 8000616:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800061c:	2300      	movs	r3, #0
 800061e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f000 ff6a 	bl	8001500 <HAL_RCC_ClockConfig>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000632:	f000 f901 	bl	8000838 <Error_Handler>
  }
}
 8000636:	bf00      	nop
 8000638:	3750      	adds	r7, #80	; 0x50
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40023800 	.word	0x40023800
 8000644:	40007000 	.word	0x40007000

08000648 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b086      	sub	sp, #24
 800064c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064e:	1d3b      	adds	r3, r7, #4
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800065c:	2300      	movs	r3, #0
 800065e:	603b      	str	r3, [r7, #0]
 8000660:	4b10      	ldr	r3, [pc, #64]	; (80006a4 <MX_GPIO_Init+0x5c>)
 8000662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000664:	4a0f      	ldr	r2, [pc, #60]	; (80006a4 <MX_GPIO_Init+0x5c>)
 8000666:	f043 0302 	orr.w	r3, r3, #2
 800066a:	6313      	str	r3, [r2, #48]	; 0x30
 800066c:	4b0d      	ldr	r3, [pc, #52]	; (80006a4 <MX_GPIO_Init+0x5c>)
 800066e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000670:	f003 0302 	and.w	r3, r3, #2
 8000674:	603b      	str	r3, [r7, #0]
 8000676:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000678:	2200      	movs	r2, #0
 800067a:	2180      	movs	r1, #128	; 0x80
 800067c:	480a      	ldr	r0, [pc, #40]	; (80006a8 <MX_GPIO_Init+0x60>)
 800067e:	f000 fc9b 	bl	8000fb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000682:	2380      	movs	r3, #128	; 0x80
 8000684:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000686:	2301      	movs	r3, #1
 8000688:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068a:	2300      	movs	r3, #0
 800068c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068e:	2300      	movs	r3, #0
 8000690:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	4619      	mov	r1, r3
 8000696:	4804      	ldr	r0, [pc, #16]	; (80006a8 <MX_GPIO_Init+0x60>)
 8000698:	f000 fae4 	bl	8000c64 <HAL_GPIO_Init>

}
 800069c:	bf00      	nop
 800069e:	3718      	adds	r7, #24
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	40023800 	.word	0x40023800
 80006a8:	40020400 	.word	0x40020400

080006ac <StartDefaultTask>:
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
SemaphoreHandle_t xSemaphore = NULL;
void StartDefaultTask(void *argument)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	unsigned int counter=1;
 80006b4:	2301      	movs	r3, #1
 80006b6:	60fb      	str	r3, [r7, #12]
  for(;;)
  {
	xSemaphore=xSemaphoreCreateMutex();
 80006b8:	2001      	movs	r0, #1
 80006ba:	f001 fc10 	bl	8001ede <xQueueCreateMutex>
 80006be:	4602      	mov	r2, r0
 80006c0:	4b20      	ldr	r3, [pc, #128]	; (8000744 <StartDefaultTask+0x98>)
 80006c2:	601a      	str	r2, [r3, #0]
    if(uxQueueSpacesAvailable(q1)>0||uxQueueSpacesAvailable(q2)>0){
 80006c4:	4b20      	ldr	r3, [pc, #128]	; (8000748 <StartDefaultTask+0x9c>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4618      	mov	r0, r3
 80006ca:	f001 fea8 	bl	800241e <uxQueueSpacesAvailable>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d107      	bne.n	80006e4 <StartDefaultTask+0x38>
 80006d4:	4b1d      	ldr	r3, [pc, #116]	; (800074c <StartDefaultTask+0xa0>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4618      	mov	r0, r3
 80006da:	f001 fea0 	bl	800241e <uxQueueSpacesAvailable>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d029      	beq.n	8000738 <StartDefaultTask+0x8c>
		xQueueSend(q1,(void *)&counter,portMAX_DELAY);
 80006e4:	4b18      	ldr	r3, [pc, #96]	; (8000748 <StartDefaultTask+0x9c>)
 80006e6:	6818      	ldr	r0, [r3, #0]
 80006e8:	f107 010c 	add.w	r1, r7, #12
 80006ec:	2300      	movs	r3, #0
 80006ee:	f04f 32ff 	mov.w	r2, #4294967295
 80006f2:	f001 fc0d 	bl	8001f10 <xQueueGenericSend>
		HAL_Delay(1000);
 80006f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006fa:	f000 f9ab 	bl	8000a54 <HAL_Delay>
		counter++;
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	3301      	adds	r3, #1
 8000702:	60fb      	str	r3, [r7, #12]
		xQueueSend(q2,(void *)&counter,portMAX_DELAY);
 8000704:	4b11      	ldr	r3, [pc, #68]	; (800074c <StartDefaultTask+0xa0>)
 8000706:	6818      	ldr	r0, [r3, #0]
 8000708:	f107 010c 	add.w	r1, r7, #12
 800070c:	2300      	movs	r3, #0
 800070e:	f04f 32ff 	mov.w	r2, #4294967295
 8000712:	f001 fbfd 	bl	8001f10 <xQueueGenericSend>
		xQueueSend(q1,(void *)&counter,portMAX_DELAY);
 8000716:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <StartDefaultTask+0x9c>)
 8000718:	6818      	ldr	r0, [r3, #0]
 800071a:	f107 010c 	add.w	r1, r7, #12
 800071e:	2300      	movs	r3, #0
 8000720:	f04f 32ff 	mov.w	r2, #4294967295
 8000724:	f001 fbf4 	bl	8001f10 <xQueueGenericSend>
		counter++;
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	3301      	adds	r3, #1
 800072c:	60fb      	str	r3, [r7, #12]
		HAL_Delay(1000);
 800072e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000732:	f000 f98f 	bl	8000a54 <HAL_Delay>
 8000736:	e003      	b.n	8000740 <StartDefaultTask+0x94>
    }
    else{
    	vTaskDelay(2000);
 8000738:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800073c:	f002 f99c 	bl	8002a78 <vTaskDelay>
	xSemaphore=xSemaphoreCreateMutex();
 8000740:	e7ba      	b.n	80006b8 <StartDefaultTask+0xc>
 8000742:	bf00      	nop
 8000744:	2000002c 	.word	0x2000002c
 8000748:	20004944 	.word	0x20004944
 800074c:	2000493c 	.word	0x2000493c

08000750 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  /* Infinite loop */

  for(;;)
  {
	    unsigned int rec;
	    if(uxQueueMessagesWaiting(q1)>1)
 8000758:	4b17      	ldr	r3, [pc, #92]	; (80007b8 <StartTask02+0x68>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4618      	mov	r0, r3
 800075e:	f001 fe41 	bl	80023e4 <uxQueueMessagesWaiting>
 8000762:	4603      	mov	r3, r0
 8000764:	2b01      	cmp	r3, #1
 8000766:	d9f7      	bls.n	8000758 <StartTask02+0x8>
	    {
	    	if(  xSemaphore != NULL  )
 8000768:	4b14      	ldr	r3, [pc, #80]	; (80007bc <StartTask02+0x6c>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d0f3      	beq.n	8000758 <StartTask02+0x8>
	    	{
	    	xQueueReceive(q1,&(rec),portMAX_DELAY);
 8000770:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <StartTask02+0x68>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	f107 0108 	add.w	r1, r7, #8
 8000778:	f04f 32ff 	mov.w	r2, #4294967295
 800077c:	4618      	mov	r0, r3
 800077e:	f001 fd55 	bl	800222c <xQueueReceive>
	    	for(int i=0;i<=rec;i++){
 8000782:	2300      	movs	r3, #0
 8000784:	60fb      	str	r3, [r7, #12]
 8000786:	e00a      	b.n	800079e <StartTask02+0x4e>
	    		HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_7);
 8000788:	2180      	movs	r1, #128	; 0x80
 800078a:	480d      	ldr	r0, [pc, #52]	; (80007c0 <StartTask02+0x70>)
 800078c:	f000 fc2d 	bl	8000fea <HAL_GPIO_TogglePin>
	    		HAL_Delay(750);
 8000790:	f240 20ee 	movw	r0, #750	; 0x2ee
 8000794:	f000 f95e 	bl	8000a54 <HAL_Delay>
	    	for(int i=0;i<=rec;i++){
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	3301      	adds	r3, #1
 800079c:	60fb      	str	r3, [r7, #12]
 800079e:	68fa      	ldr	r2, [r7, #12]
 80007a0:	68bb      	ldr	r3, [r7, #8]
 80007a2:	429a      	cmp	r2, r3
 80007a4:	d9f0      	bls.n	8000788 <StartTask02+0x38>
	    	}
	    	xSemaphoreGive( xSemaphore );
 80007a6:	4b05      	ldr	r3, [pc, #20]	; (80007bc <StartTask02+0x6c>)
 80007a8:	6818      	ldr	r0, [r3, #0]
 80007aa:	2300      	movs	r3, #0
 80007ac:	2200      	movs	r2, #0
 80007ae:	2100      	movs	r1, #0
 80007b0:	f001 fbae 	bl	8001f10 <xQueueGenericSend>
  {
 80007b4:	e7d0      	b.n	8000758 <StartTask02+0x8>
 80007b6:	bf00      	nop
 80007b8:	20004944 	.word	0x20004944
 80007bc:	2000002c 	.word	0x2000002c
 80007c0:	40020400 	.word	0x40020400

080007c4 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	    unsigned int rec;
	    if(uxQueueMessagesWaiting(q2)>1)
 80007cc:	4b17      	ldr	r3, [pc, #92]	; (800082c <StartTask03+0x68>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4618      	mov	r0, r3
 80007d2:	f001 fe07 	bl	80023e4 <uxQueueMessagesWaiting>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b01      	cmp	r3, #1
 80007da:	d9f7      	bls.n	80007cc <StartTask03+0x8>
	    {
	    	if(  xSemaphore != NULL  )
 80007dc:	4b14      	ldr	r3, [pc, #80]	; (8000830 <StartTask03+0x6c>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d0f3      	beq.n	80007cc <StartTask03+0x8>
	    	{
				xQueueReceive(q2,&(rec),portMAX_DELAY);
 80007e4:	4b11      	ldr	r3, [pc, #68]	; (800082c <StartTask03+0x68>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	f107 0108 	add.w	r1, r7, #8
 80007ec:	f04f 32ff 	mov.w	r2, #4294967295
 80007f0:	4618      	mov	r0, r3
 80007f2:	f001 fd1b 	bl	800222c <xQueueReceive>
				for(int i=0;i<=rec;i++){
 80007f6:	2300      	movs	r3, #0
 80007f8:	60fb      	str	r3, [r7, #12]
 80007fa:	e00a      	b.n	8000812 <StartTask03+0x4e>
					HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_7);
 80007fc:	2180      	movs	r1, #128	; 0x80
 80007fe:	480d      	ldr	r0, [pc, #52]	; (8000834 <StartTask03+0x70>)
 8000800:	f000 fbf3 	bl	8000fea <HAL_GPIO_TogglePin>
					HAL_Delay(750);
 8000804:	f240 20ee 	movw	r0, #750	; 0x2ee
 8000808:	f000 f924 	bl	8000a54 <HAL_Delay>
				for(int i=0;i<=rec;i++){
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	3301      	adds	r3, #1
 8000810:	60fb      	str	r3, [r7, #12]
 8000812:	68fa      	ldr	r2, [r7, #12]
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	429a      	cmp	r2, r3
 8000818:	d9f0      	bls.n	80007fc <StartTask03+0x38>
				}
				xSemaphoreGive( xSemaphore );
 800081a:	4b05      	ldr	r3, [pc, #20]	; (8000830 <StartTask03+0x6c>)
 800081c:	6818      	ldr	r0, [r3, #0]
 800081e:	2300      	movs	r3, #0
 8000820:	2200      	movs	r2, #0
 8000822:	2100      	movs	r1, #0
 8000824:	f001 fb74 	bl	8001f10 <xQueueGenericSend>
  {
 8000828:	e7d0      	b.n	80007cc <StartTask03+0x8>
 800082a:	bf00      	nop
 800082c:	2000493c 	.word	0x2000493c
 8000830:	2000002c 	.word	0x2000002c
 8000834:	40020400 	.word	0x40020400

08000838 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800083c:	bf00      	nop
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
	...

08000848 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	607b      	str	r3, [r7, #4]
 8000852:	4b12      	ldr	r3, [pc, #72]	; (800089c <HAL_MspInit+0x54>)
 8000854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000856:	4a11      	ldr	r2, [pc, #68]	; (800089c <HAL_MspInit+0x54>)
 8000858:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800085c:	6453      	str	r3, [r2, #68]	; 0x44
 800085e:	4b0f      	ldr	r3, [pc, #60]	; (800089c <HAL_MspInit+0x54>)
 8000860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000862:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	603b      	str	r3, [r7, #0]
 800086e:	4b0b      	ldr	r3, [pc, #44]	; (800089c <HAL_MspInit+0x54>)
 8000870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000872:	4a0a      	ldr	r2, [pc, #40]	; (800089c <HAL_MspInit+0x54>)
 8000874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000878:	6413      	str	r3, [r2, #64]	; 0x40
 800087a:	4b08      	ldr	r3, [pc, #32]	; (800089c <HAL_MspInit+0x54>)
 800087c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000882:	603b      	str	r3, [r7, #0]
 8000884:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000886:	2200      	movs	r2, #0
 8000888:	210f      	movs	r1, #15
 800088a:	f06f 0001 	mvn.w	r0, #1
 800088e:	f000 f9c0 	bl	8000c12 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000892:	bf00      	nop
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40023800 	.word	0x40023800

080008a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80008a4:	bf00      	nop
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr

080008ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ae:	b480      	push	{r7}
 80008b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008b2:	e7fe      	b.n	80008b2 <HardFault_Handler+0x4>

080008b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b8:	e7fe      	b.n	80008b8 <MemManage_Handler+0x4>

080008ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ba:	b480      	push	{r7}
 80008bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008be:	e7fe      	b.n	80008be <BusFault_Handler+0x4>

080008c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008c4:	e7fe      	b.n	80008c4 <UsageFault_Handler+0x4>

080008c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008c6:	b480      	push	{r7}
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ca:	bf00      	nop
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr

080008d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008d8:	f000 f89c 	bl	8000a14 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80008dc:	f002 fd36 	bl	800334c <xTaskGetSchedulerState>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b01      	cmp	r3, #1
 80008e4:	d001      	beq.n	80008ea <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80008e6:	f003 fb07 	bl	8003ef8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
	...

080008f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008f4:	4b08      	ldr	r3, [pc, #32]	; (8000918 <SystemInit+0x28>)
 80008f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008fa:	4a07      	ldr	r2, [pc, #28]	; (8000918 <SystemInit+0x28>)
 80008fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000900:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000904:	4b04      	ldr	r3, [pc, #16]	; (8000918 <SystemInit+0x28>)
 8000906:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800090a:	609a      	str	r2, [r3, #8]
#endif
}
 800090c:	bf00      	nop
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	e000ed00 	.word	0xe000ed00

0800091c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800091c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000954 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000920:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000922:	e003      	b.n	800092c <LoopCopyDataInit>

08000924 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000924:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000926:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000928:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800092a:	3104      	adds	r1, #4

0800092c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800092c:	480b      	ldr	r0, [pc, #44]	; (800095c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800092e:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000930:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000932:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000934:	d3f6      	bcc.n	8000924 <CopyDataInit>
  ldr  r2, =_sbss
 8000936:	4a0b      	ldr	r2, [pc, #44]	; (8000964 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000938:	e002      	b.n	8000940 <LoopFillZerobss>

0800093a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800093a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800093c:	f842 3b04 	str.w	r3, [r2], #4

08000940 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000940:	4b09      	ldr	r3, [pc, #36]	; (8000968 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000942:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000944:	d3f9      	bcc.n	800093a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000946:	f7ff ffd3 	bl	80008f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800094a:	f003 fd37 	bl	80043bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800094e:	f7ff fdcf 	bl	80004f0 <main>
  bx  lr    
 8000952:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000954:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000958:	0800450c 	.word	0x0800450c
  ldr  r0, =_sdata
 800095c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000960:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000964:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000968:	20004990 	.word	0x20004990

0800096c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800096c:	e7fe      	b.n	800096c <ADC_IRQHandler>
	...

08000970 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000974:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <HAL_Init+0x40>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a0d      	ldr	r2, [pc, #52]	; (80009b0 <HAL_Init+0x40>)
 800097a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800097e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000980:	4b0b      	ldr	r3, [pc, #44]	; (80009b0 <HAL_Init+0x40>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a0a      	ldr	r2, [pc, #40]	; (80009b0 <HAL_Init+0x40>)
 8000986:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800098a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800098c:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <HAL_Init+0x40>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a07      	ldr	r2, [pc, #28]	; (80009b0 <HAL_Init+0x40>)
 8000992:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000996:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000998:	2003      	movs	r0, #3
 800099a:	f000 f92f 	bl	8000bfc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800099e:	200f      	movs	r0, #15
 80009a0:	f000 f808 	bl	80009b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009a4:	f7ff ff50 	bl	8000848 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009a8:	2300      	movs	r3, #0
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40023c00 	.word	0x40023c00

080009b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009bc:	4b12      	ldr	r3, [pc, #72]	; (8000a08 <HAL_InitTick+0x54>)
 80009be:	681a      	ldr	r2, [r3, #0]
 80009c0:	4b12      	ldr	r3, [pc, #72]	; (8000a0c <HAL_InitTick+0x58>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	4619      	mov	r1, r3
 80009c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80009d2:	4618      	mov	r0, r3
 80009d4:	f000 f939 	bl	8000c4a <HAL_SYSTICK_Config>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009de:	2301      	movs	r3, #1
 80009e0:	e00e      	b.n	8000a00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2b0f      	cmp	r3, #15
 80009e6:	d80a      	bhi.n	80009fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009e8:	2200      	movs	r2, #0
 80009ea:	6879      	ldr	r1, [r7, #4]
 80009ec:	f04f 30ff 	mov.w	r0, #4294967295
 80009f0:	f000 f90f 	bl	8000c12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009f4:	4a06      	ldr	r2, [pc, #24]	; (8000a10 <HAL_InitTick+0x5c>)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009fa:	2300      	movs	r3, #0
 80009fc:	e000      	b.n	8000a00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009fe:	2301      	movs	r3, #1
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	3708      	adds	r7, #8
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	20000000 	.word	0x20000000
 8000a0c:	20000008 	.word	0x20000008
 8000a10:	20000004 	.word	0x20000004

08000a14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <HAL_IncTick+0x20>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <HAL_IncTick+0x24>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4413      	add	r3, r2
 8000a24:	4a04      	ldr	r2, [pc, #16]	; (8000a38 <HAL_IncTick+0x24>)
 8000a26:	6013      	str	r3, [r2, #0]
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	20000008 	.word	0x20000008
 8000a38:	2000494c 	.word	0x2000494c

08000a3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a40:	4b03      	ldr	r3, [pc, #12]	; (8000a50 <HAL_GetTick+0x14>)
 8000a42:	681b      	ldr	r3, [r3, #0]
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	2000494c 	.word	0x2000494c

08000a54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a5c:	f7ff ffee 	bl	8000a3c <HAL_GetTick>
 8000a60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a6c:	d005      	beq.n	8000a7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a6e:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <HAL_Delay+0x40>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	461a      	mov	r2, r3
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	4413      	add	r3, r2
 8000a78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a7a:	bf00      	nop
 8000a7c:	f7ff ffde 	bl	8000a3c <HAL_GetTick>
 8000a80:	4602      	mov	r2, r0
 8000a82:	68bb      	ldr	r3, [r7, #8]
 8000a84:	1ad3      	subs	r3, r2, r3
 8000a86:	68fa      	ldr	r2, [r7, #12]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	d8f7      	bhi.n	8000a7c <HAL_Delay+0x28>
  {
  }
}
 8000a8c:	bf00      	nop
 8000a8e:	3710      	adds	r7, #16
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	20000008 	.word	0x20000008

08000a98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b085      	sub	sp, #20
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	f003 0307 	and.w	r3, r3, #7
 8000aa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <__NVIC_SetPriorityGrouping+0x44>)
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aae:	68ba      	ldr	r2, [r7, #8]
 8000ab0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ac0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ac4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ac8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aca:	4a04      	ldr	r2, [pc, #16]	; (8000adc <__NVIC_SetPriorityGrouping+0x44>)
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	60d3      	str	r3, [r2, #12]
}
 8000ad0:	bf00      	nop
 8000ad2:	3714      	adds	r7, #20
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr
 8000adc:	e000ed00 	.word	0xe000ed00

08000ae0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ae4:	4b04      	ldr	r3, [pc, #16]	; (8000af8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	0a1b      	lsrs	r3, r3, #8
 8000aea:	f003 0307 	and.w	r3, r3, #7
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	e000ed00 	.word	0xe000ed00

08000afc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	6039      	str	r1, [r7, #0]
 8000b06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	db0a      	blt.n	8000b26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	b2da      	uxtb	r2, r3
 8000b14:	490c      	ldr	r1, [pc, #48]	; (8000b48 <__NVIC_SetPriority+0x4c>)
 8000b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1a:	0112      	lsls	r2, r2, #4
 8000b1c:	b2d2      	uxtb	r2, r2
 8000b1e:	440b      	add	r3, r1
 8000b20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b24:	e00a      	b.n	8000b3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	b2da      	uxtb	r2, r3
 8000b2a:	4908      	ldr	r1, [pc, #32]	; (8000b4c <__NVIC_SetPriority+0x50>)
 8000b2c:	79fb      	ldrb	r3, [r7, #7]
 8000b2e:	f003 030f 	and.w	r3, r3, #15
 8000b32:	3b04      	subs	r3, #4
 8000b34:	0112      	lsls	r2, r2, #4
 8000b36:	b2d2      	uxtb	r2, r2
 8000b38:	440b      	add	r3, r1
 8000b3a:	761a      	strb	r2, [r3, #24]
}
 8000b3c:	bf00      	nop
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	e000e100 	.word	0xe000e100
 8000b4c:	e000ed00 	.word	0xe000ed00

08000b50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b089      	sub	sp, #36	; 0x24
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	60f8      	str	r0, [r7, #12]
 8000b58:	60b9      	str	r1, [r7, #8]
 8000b5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	f003 0307 	and.w	r3, r3, #7
 8000b62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b64:	69fb      	ldr	r3, [r7, #28]
 8000b66:	f1c3 0307 	rsb	r3, r3, #7
 8000b6a:	2b04      	cmp	r3, #4
 8000b6c:	bf28      	it	cs
 8000b6e:	2304      	movcs	r3, #4
 8000b70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b72:	69fb      	ldr	r3, [r7, #28]
 8000b74:	3304      	adds	r3, #4
 8000b76:	2b06      	cmp	r3, #6
 8000b78:	d902      	bls.n	8000b80 <NVIC_EncodePriority+0x30>
 8000b7a:	69fb      	ldr	r3, [r7, #28]
 8000b7c:	3b03      	subs	r3, #3
 8000b7e:	e000      	b.n	8000b82 <NVIC_EncodePriority+0x32>
 8000b80:	2300      	movs	r3, #0
 8000b82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b84:	f04f 32ff 	mov.w	r2, #4294967295
 8000b88:	69bb      	ldr	r3, [r7, #24]
 8000b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8e:	43da      	mvns	r2, r3
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	401a      	ands	r2, r3
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b98:	f04f 31ff 	mov.w	r1, #4294967295
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba2:	43d9      	mvns	r1, r3
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba8:	4313      	orrs	r3, r2
         );
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3724      	adds	r7, #36	; 0x24
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
	...

08000bb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	3b01      	subs	r3, #1
 8000bc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bc8:	d301      	bcc.n	8000bce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bca:	2301      	movs	r3, #1
 8000bcc:	e00f      	b.n	8000bee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bce:	4a0a      	ldr	r2, [pc, #40]	; (8000bf8 <SysTick_Config+0x40>)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	3b01      	subs	r3, #1
 8000bd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bd6:	210f      	movs	r1, #15
 8000bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bdc:	f7ff ff8e 	bl	8000afc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000be0:	4b05      	ldr	r3, [pc, #20]	; (8000bf8 <SysTick_Config+0x40>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000be6:	4b04      	ldr	r3, [pc, #16]	; (8000bf8 <SysTick_Config+0x40>)
 8000be8:	2207      	movs	r2, #7
 8000bea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bec:	2300      	movs	r3, #0
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	e000e010 	.word	0xe000e010

08000bfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c04:	6878      	ldr	r0, [r7, #4]
 8000c06:	f7ff ff47 	bl	8000a98 <__NVIC_SetPriorityGrouping>
}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b086      	sub	sp, #24
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	4603      	mov	r3, r0
 8000c1a:	60b9      	str	r1, [r7, #8]
 8000c1c:	607a      	str	r2, [r7, #4]
 8000c1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c20:	2300      	movs	r3, #0
 8000c22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c24:	f7ff ff5c 	bl	8000ae0 <__NVIC_GetPriorityGrouping>
 8000c28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c2a:	687a      	ldr	r2, [r7, #4]
 8000c2c:	68b9      	ldr	r1, [r7, #8]
 8000c2e:	6978      	ldr	r0, [r7, #20]
 8000c30:	f7ff ff8e 	bl	8000b50 <NVIC_EncodePriority>
 8000c34:	4602      	mov	r2, r0
 8000c36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c3a:	4611      	mov	r1, r2
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff ff5d 	bl	8000afc <__NVIC_SetPriority>
}
 8000c42:	bf00      	nop
 8000c44:	3718      	adds	r7, #24
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b082      	sub	sp, #8
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c52:	6878      	ldr	r0, [r7, #4]
 8000c54:	f7ff ffb0 	bl	8000bb8 <SysTick_Config>
 8000c58:	4603      	mov	r3, r0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
	...

08000c64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b089      	sub	sp, #36	; 0x24
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c72:	2300      	movs	r3, #0
 8000c74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c76:	2300      	movs	r3, #0
 8000c78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	61fb      	str	r3, [r7, #28]
 8000c7e:	e177      	b.n	8000f70 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c80:	2201      	movs	r2, #1
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	fa02 f303 	lsl.w	r3, r2, r3
 8000c88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	697a      	ldr	r2, [r7, #20]
 8000c90:	4013      	ands	r3, r2
 8000c92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c94:	693a      	ldr	r2, [r7, #16]
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	f040 8166 	bne.w	8000f6a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d00b      	beq.n	8000cbe <HAL_GPIO_Init+0x5a>
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	2b02      	cmp	r3, #2
 8000cac:	d007      	beq.n	8000cbe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cb2:	2b11      	cmp	r3, #17
 8000cb4:	d003      	beq.n	8000cbe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	2b12      	cmp	r3, #18
 8000cbc:	d130      	bne.n	8000d20 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	689b      	ldr	r3, [r3, #8]
 8000cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cc4:	69fb      	ldr	r3, [r7, #28]
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	2203      	movs	r2, #3
 8000cca:	fa02 f303 	lsl.w	r3, r2, r3
 8000cce:	43db      	mvns	r3, r3
 8000cd0:	69ba      	ldr	r2, [r7, #24]
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	68da      	ldr	r2, [r3, #12]
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	005b      	lsls	r3, r3, #1
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	69ba      	ldr	r2, [r7, #24]
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	69ba      	ldr	r2, [r7, #24]
 8000cec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfc:	43db      	mvns	r3, r3
 8000cfe:	69ba      	ldr	r2, [r7, #24]
 8000d00:	4013      	ands	r3, r2
 8000d02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	091b      	lsrs	r3, r3, #4
 8000d0a:	f003 0201 	and.w	r2, r3, #1
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	fa02 f303 	lsl.w	r3, r2, r3
 8000d14:	69ba      	ldr	r2, [r7, #24]
 8000d16:	4313      	orrs	r3, r2
 8000d18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	69ba      	ldr	r2, [r7, #24]
 8000d1e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	68db      	ldr	r3, [r3, #12]
 8000d24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	005b      	lsls	r3, r3, #1
 8000d2a:	2203      	movs	r2, #3
 8000d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d30:	43db      	mvns	r3, r3
 8000d32:	69ba      	ldr	r2, [r7, #24]
 8000d34:	4013      	ands	r3, r2
 8000d36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	689a      	ldr	r2, [r3, #8]
 8000d3c:	69fb      	ldr	r3, [r7, #28]
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	69ba      	ldr	r2, [r7, #24]
 8000d46:	4313      	orrs	r3, r2
 8000d48:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	69ba      	ldr	r2, [r7, #24]
 8000d4e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	2b02      	cmp	r3, #2
 8000d56:	d003      	beq.n	8000d60 <HAL_GPIO_Init+0xfc>
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	2b12      	cmp	r3, #18
 8000d5e:	d123      	bne.n	8000da8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	08da      	lsrs	r2, r3, #3
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	3208      	adds	r2, #8
 8000d68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	f003 0307 	and.w	r3, r3, #7
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	220f      	movs	r2, #15
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	43db      	mvns	r3, r3
 8000d7e:	69ba      	ldr	r2, [r7, #24]
 8000d80:	4013      	ands	r3, r2
 8000d82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	691a      	ldr	r2, [r3, #16]
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	f003 0307 	and.w	r3, r3, #7
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	08da      	lsrs	r2, r3, #3
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	3208      	adds	r2, #8
 8000da2:	69b9      	ldr	r1, [r7, #24]
 8000da4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	2203      	movs	r2, #3
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	43db      	mvns	r3, r3
 8000dba:	69ba      	ldr	r2, [r7, #24]
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f003 0203 	and.w	r2, r3, #3
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	f000 80c0 	beq.w	8000f6a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	4b65      	ldr	r3, [pc, #404]	; (8000f84 <HAL_GPIO_Init+0x320>)
 8000df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df2:	4a64      	ldr	r2, [pc, #400]	; (8000f84 <HAL_GPIO_Init+0x320>)
 8000df4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000df8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dfa:	4b62      	ldr	r3, [pc, #392]	; (8000f84 <HAL_GPIO_Init+0x320>)
 8000dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e06:	4a60      	ldr	r2, [pc, #384]	; (8000f88 <HAL_GPIO_Init+0x324>)
 8000e08:	69fb      	ldr	r3, [r7, #28]
 8000e0a:	089b      	lsrs	r3, r3, #2
 8000e0c:	3302      	adds	r3, #2
 8000e0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	f003 0303 	and.w	r3, r3, #3
 8000e1a:	009b      	lsls	r3, r3, #2
 8000e1c:	220f      	movs	r2, #15
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	43db      	mvns	r3, r3
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	4013      	ands	r3, r2
 8000e28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4a57      	ldr	r2, [pc, #348]	; (8000f8c <HAL_GPIO_Init+0x328>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d037      	beq.n	8000ea2 <HAL_GPIO_Init+0x23e>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4a56      	ldr	r2, [pc, #344]	; (8000f90 <HAL_GPIO_Init+0x32c>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d031      	beq.n	8000e9e <HAL_GPIO_Init+0x23a>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4a55      	ldr	r2, [pc, #340]	; (8000f94 <HAL_GPIO_Init+0x330>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d02b      	beq.n	8000e9a <HAL_GPIO_Init+0x236>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4a54      	ldr	r2, [pc, #336]	; (8000f98 <HAL_GPIO_Init+0x334>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d025      	beq.n	8000e96 <HAL_GPIO_Init+0x232>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a53      	ldr	r2, [pc, #332]	; (8000f9c <HAL_GPIO_Init+0x338>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d01f      	beq.n	8000e92 <HAL_GPIO_Init+0x22e>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4a52      	ldr	r2, [pc, #328]	; (8000fa0 <HAL_GPIO_Init+0x33c>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d019      	beq.n	8000e8e <HAL_GPIO_Init+0x22a>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4a51      	ldr	r2, [pc, #324]	; (8000fa4 <HAL_GPIO_Init+0x340>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d013      	beq.n	8000e8a <HAL_GPIO_Init+0x226>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4a50      	ldr	r2, [pc, #320]	; (8000fa8 <HAL_GPIO_Init+0x344>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d00d      	beq.n	8000e86 <HAL_GPIO_Init+0x222>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4a4f      	ldr	r2, [pc, #316]	; (8000fac <HAL_GPIO_Init+0x348>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d007      	beq.n	8000e82 <HAL_GPIO_Init+0x21e>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a4e      	ldr	r2, [pc, #312]	; (8000fb0 <HAL_GPIO_Init+0x34c>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d101      	bne.n	8000e7e <HAL_GPIO_Init+0x21a>
 8000e7a:	2309      	movs	r3, #9
 8000e7c:	e012      	b.n	8000ea4 <HAL_GPIO_Init+0x240>
 8000e7e:	230a      	movs	r3, #10
 8000e80:	e010      	b.n	8000ea4 <HAL_GPIO_Init+0x240>
 8000e82:	2308      	movs	r3, #8
 8000e84:	e00e      	b.n	8000ea4 <HAL_GPIO_Init+0x240>
 8000e86:	2307      	movs	r3, #7
 8000e88:	e00c      	b.n	8000ea4 <HAL_GPIO_Init+0x240>
 8000e8a:	2306      	movs	r3, #6
 8000e8c:	e00a      	b.n	8000ea4 <HAL_GPIO_Init+0x240>
 8000e8e:	2305      	movs	r3, #5
 8000e90:	e008      	b.n	8000ea4 <HAL_GPIO_Init+0x240>
 8000e92:	2304      	movs	r3, #4
 8000e94:	e006      	b.n	8000ea4 <HAL_GPIO_Init+0x240>
 8000e96:	2303      	movs	r3, #3
 8000e98:	e004      	b.n	8000ea4 <HAL_GPIO_Init+0x240>
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	e002      	b.n	8000ea4 <HAL_GPIO_Init+0x240>
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e000      	b.n	8000ea4 <HAL_GPIO_Init+0x240>
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	69fa      	ldr	r2, [r7, #28]
 8000ea6:	f002 0203 	and.w	r2, r2, #3
 8000eaa:	0092      	lsls	r2, r2, #2
 8000eac:	4093      	lsls	r3, r2
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000eb4:	4934      	ldr	r1, [pc, #208]	; (8000f88 <HAL_GPIO_Init+0x324>)
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	089b      	lsrs	r3, r3, #2
 8000eba:	3302      	adds	r3, #2
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ec2:	4b3c      	ldr	r3, [pc, #240]	; (8000fb4 <HAL_GPIO_Init+0x350>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d003      	beq.n	8000ee6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ee6:	4a33      	ldr	r2, [pc, #204]	; (8000fb4 <HAL_GPIO_Init+0x350>)
 8000ee8:	69bb      	ldr	r3, [r7, #24]
 8000eea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000eec:	4b31      	ldr	r3, [pc, #196]	; (8000fb4 <HAL_GPIO_Init+0x350>)
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d003      	beq.n	8000f10 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f10:	4a28      	ldr	r2, [pc, #160]	; (8000fb4 <HAL_GPIO_Init+0x350>)
 8000f12:	69bb      	ldr	r3, [r7, #24]
 8000f14:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f16:	4b27      	ldr	r3, [pc, #156]	; (8000fb4 <HAL_GPIO_Init+0x350>)
 8000f18:	689b      	ldr	r3, [r3, #8]
 8000f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	43db      	mvns	r3, r3
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	4013      	ands	r3, r2
 8000f24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d003      	beq.n	8000f3a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f3a:	4a1e      	ldr	r2, [pc, #120]	; (8000fb4 <HAL_GPIO_Init+0x350>)
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f40:	4b1c      	ldr	r3, [pc, #112]	; (8000fb4 <HAL_GPIO_Init+0x350>)
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d003      	beq.n	8000f64 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f64:	4a13      	ldr	r2, [pc, #76]	; (8000fb4 <HAL_GPIO_Init+0x350>)
 8000f66:	69bb      	ldr	r3, [r7, #24]
 8000f68:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	61fb      	str	r3, [r7, #28]
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	2b0f      	cmp	r3, #15
 8000f74:	f67f ae84 	bls.w	8000c80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f78:	bf00      	nop
 8000f7a:	3724      	adds	r7, #36	; 0x24
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr
 8000f84:	40023800 	.word	0x40023800
 8000f88:	40013800 	.word	0x40013800
 8000f8c:	40020000 	.word	0x40020000
 8000f90:	40020400 	.word	0x40020400
 8000f94:	40020800 	.word	0x40020800
 8000f98:	40020c00 	.word	0x40020c00
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	40021400 	.word	0x40021400
 8000fa4:	40021800 	.word	0x40021800
 8000fa8:	40021c00 	.word	0x40021c00
 8000fac:	40022000 	.word	0x40022000
 8000fb0:	40022400 	.word	0x40022400
 8000fb4:	40013c00 	.word	0x40013c00

08000fb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	807b      	strh	r3, [r7, #2]
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fc8:	787b      	ldrb	r3, [r7, #1]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d003      	beq.n	8000fd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fce:	887a      	ldrh	r2, [r7, #2]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000fd4:	e003      	b.n	8000fde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fd6:	887b      	ldrh	r3, [r7, #2]
 8000fd8:	041a      	lsls	r2, r3, #16
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	619a      	str	r2, [r3, #24]
}
 8000fde:	bf00      	nop
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr

08000fea <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fea:	b480      	push	{r7}
 8000fec:	b083      	sub	sp, #12
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
 8000ff2:	460b      	mov	r3, r1
 8000ff4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	695a      	ldr	r2, [r3, #20]
 8000ffa:	887b      	ldrh	r3, [r7, #2]
 8000ffc:	401a      	ands	r2, r3
 8000ffe:	887b      	ldrh	r3, [r7, #2]
 8001000:	429a      	cmp	r2, r3
 8001002:	d104      	bne.n	800100e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001004:	887b      	ldrh	r3, [r7, #2]
 8001006:	041a      	lsls	r2, r3, #16
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800100c:	e002      	b.n	8001014 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800100e:	887a      	ldrh	r2, [r7, #2]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	619a      	str	r2, [r3, #24]
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b086      	sub	sp, #24
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d101      	bne.n	8001032 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	e25b      	b.n	80014ea <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	2b00      	cmp	r3, #0
 800103c:	d075      	beq.n	800112a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800103e:	4ba3      	ldr	r3, [pc, #652]	; (80012cc <HAL_RCC_OscConfig+0x2ac>)
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	f003 030c 	and.w	r3, r3, #12
 8001046:	2b04      	cmp	r3, #4
 8001048:	d00c      	beq.n	8001064 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800104a:	4ba0      	ldr	r3, [pc, #640]	; (80012cc <HAL_RCC_OscConfig+0x2ac>)
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001052:	2b08      	cmp	r3, #8
 8001054:	d112      	bne.n	800107c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001056:	4b9d      	ldr	r3, [pc, #628]	; (80012cc <HAL_RCC_OscConfig+0x2ac>)
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800105e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001062:	d10b      	bne.n	800107c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001064:	4b99      	ldr	r3, [pc, #612]	; (80012cc <HAL_RCC_OscConfig+0x2ac>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800106c:	2b00      	cmp	r3, #0
 800106e:	d05b      	beq.n	8001128 <HAL_RCC_OscConfig+0x108>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d157      	bne.n	8001128 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001078:	2301      	movs	r3, #1
 800107a:	e236      	b.n	80014ea <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001084:	d106      	bne.n	8001094 <HAL_RCC_OscConfig+0x74>
 8001086:	4b91      	ldr	r3, [pc, #580]	; (80012cc <HAL_RCC_OscConfig+0x2ac>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a90      	ldr	r2, [pc, #576]	; (80012cc <HAL_RCC_OscConfig+0x2ac>)
 800108c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001090:	6013      	str	r3, [r2, #0]
 8001092:	e01d      	b.n	80010d0 <HAL_RCC_OscConfig+0xb0>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800109c:	d10c      	bne.n	80010b8 <HAL_RCC_OscConfig+0x98>
 800109e:	4b8b      	ldr	r3, [pc, #556]	; (80012cc <HAL_RCC_OscConfig+0x2ac>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a8a      	ldr	r2, [pc, #552]	; (80012cc <HAL_RCC_OscConfig+0x2ac>)
 80010a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010a8:	6013      	str	r3, [r2, #0]
 80010aa:	4b88      	ldr	r3, [pc, #544]	; (80012cc <HAL_RCC_OscConfig+0x2ac>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a87      	ldr	r2, [pc, #540]	; (80012cc <HAL_RCC_OscConfig+0x2ac>)
 80010b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010b4:	6013      	str	r3, [r2, #0]
 80010b6:	e00b      	b.n	80010d0 <HAL_RCC_OscConfig+0xb0>
 80010b8:	4b84      	ldr	r3, [pc, #528]	; (80012cc <HAL_RCC_OscConfig+0x2ac>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a83      	ldr	r2, [pc, #524]	; (80012cc <HAL_RCC_OscConfig+0x2ac>)
 80010be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010c2:	6013      	str	r3, [r2, #0]
 80010c4:	4b81      	ldr	r3, [pc, #516]	; (80012cc <HAL_RCC_OscConfig+0x2ac>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a80      	ldr	r2, [pc, #512]	; (80012cc <HAL_RCC_OscConfig+0x2ac>)
 80010ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d013      	beq.n	8001100 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d8:	f7ff fcb0 	bl	8000a3c <HAL_GetTick>
 80010dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010de:	e008      	b.n	80010f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010e0:	f7ff fcac 	bl	8000a3c <HAL_GetTick>
 80010e4:	4602      	mov	r2, r0
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	2b64      	cmp	r3, #100	; 0x64
 80010ec:	d901      	bls.n	80010f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80010ee:	2303      	movs	r3, #3
 80010f0:	e1fb      	b.n	80014ea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010f2:	4b76      	ldr	r3, [pc, #472]	; (80012cc <HAL_RCC_OscConfig+0x2ac>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d0f0      	beq.n	80010e0 <HAL_RCC_OscConfig+0xc0>
 80010fe:	e014      	b.n	800112a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001100:	f7ff fc9c 	bl	8000a3c <HAL_GetTick>
 8001104:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001106:	e008      	b.n	800111a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001108:	f7ff fc98 	bl	8000a3c <HAL_GetTick>
 800110c:	4602      	mov	r2, r0
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	2b64      	cmp	r3, #100	; 0x64
 8001114:	d901      	bls.n	800111a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001116:	2303      	movs	r3, #3
 8001118:	e1e7      	b.n	80014ea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800111a:	4b6c      	ldr	r3, [pc, #432]	; (80012cc <HAL_RCC_OscConfig+0x2ac>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d1f0      	bne.n	8001108 <HAL_RCC_OscConfig+0xe8>
 8001126:	e000      	b.n	800112a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001128:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f003 0302 	and.w	r3, r3, #2
 8001132:	2b00      	cmp	r3, #0
 8001134:	d063      	beq.n	80011fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001136:	4b65      	ldr	r3, [pc, #404]	; (80012cc <HAL_RCC_OscConfig+0x2ac>)
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	f003 030c 	and.w	r3, r3, #12
 800113e:	2b00      	cmp	r3, #0
 8001140:	d00b      	beq.n	800115a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001142:	4b62      	ldr	r3, [pc, #392]	; (80012cc <HAL_RCC_OscConfig+0x2ac>)
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800114a:	2b08      	cmp	r3, #8
 800114c:	d11c      	bne.n	8001188 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800114e:	4b5f      	ldr	r3, [pc, #380]	; (80012cc <HAL_RCC_OscConfig+0x2ac>)
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d116      	bne.n	8001188 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800115a:	4b5c      	ldr	r3, [pc, #368]	; (80012cc <HAL_RCC_OscConfig+0x2ac>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f003 0302 	and.w	r3, r3, #2
 8001162:	2b00      	cmp	r3, #0
 8001164:	d005      	beq.n	8001172 <HAL_RCC_OscConfig+0x152>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	68db      	ldr	r3, [r3, #12]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d001      	beq.n	8001172 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e1bb      	b.n	80014ea <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001172:	4b56      	ldr	r3, [pc, #344]	; (80012cc <HAL_RCC_OscConfig+0x2ac>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	691b      	ldr	r3, [r3, #16]
 800117e:	00db      	lsls	r3, r3, #3
 8001180:	4952      	ldr	r1, [pc, #328]	; (80012cc <HAL_RCC_OscConfig+0x2ac>)
 8001182:	4313      	orrs	r3, r2
 8001184:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001186:	e03a      	b.n	80011fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d020      	beq.n	80011d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001190:	4b4f      	ldr	r3, [pc, #316]	; (80012d0 <HAL_RCC_OscConfig+0x2b0>)
 8001192:	2201      	movs	r2, #1
 8001194:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001196:	f7ff fc51 	bl	8000a3c <HAL_GetTick>
 800119a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800119c:	e008      	b.n	80011b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800119e:	f7ff fc4d 	bl	8000a3c <HAL_GetTick>
 80011a2:	4602      	mov	r2, r0
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d901      	bls.n	80011b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80011ac:	2303      	movs	r3, #3
 80011ae:	e19c      	b.n	80014ea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011b0:	4b46      	ldr	r3, [pc, #280]	; (80012cc <HAL_RCC_OscConfig+0x2ac>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 0302 	and.w	r3, r3, #2
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d0f0      	beq.n	800119e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011bc:	4b43      	ldr	r3, [pc, #268]	; (80012cc <HAL_RCC_OscConfig+0x2ac>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	691b      	ldr	r3, [r3, #16]
 80011c8:	00db      	lsls	r3, r3, #3
 80011ca:	4940      	ldr	r1, [pc, #256]	; (80012cc <HAL_RCC_OscConfig+0x2ac>)
 80011cc:	4313      	orrs	r3, r2
 80011ce:	600b      	str	r3, [r1, #0]
 80011d0:	e015      	b.n	80011fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011d2:	4b3f      	ldr	r3, [pc, #252]	; (80012d0 <HAL_RCC_OscConfig+0x2b0>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011d8:	f7ff fc30 	bl	8000a3c <HAL_GetTick>
 80011dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011de:	e008      	b.n	80011f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011e0:	f7ff fc2c 	bl	8000a3c <HAL_GetTick>
 80011e4:	4602      	mov	r2, r0
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d901      	bls.n	80011f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80011ee:	2303      	movs	r3, #3
 80011f0:	e17b      	b.n	80014ea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011f2:	4b36      	ldr	r3, [pc, #216]	; (80012cc <HAL_RCC_OscConfig+0x2ac>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f003 0302 	and.w	r3, r3, #2
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d1f0      	bne.n	80011e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0308 	and.w	r3, r3, #8
 8001206:	2b00      	cmp	r3, #0
 8001208:	d030      	beq.n	800126c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	695b      	ldr	r3, [r3, #20]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d016      	beq.n	8001240 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001212:	4b30      	ldr	r3, [pc, #192]	; (80012d4 <HAL_RCC_OscConfig+0x2b4>)
 8001214:	2201      	movs	r2, #1
 8001216:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001218:	f7ff fc10 	bl	8000a3c <HAL_GetTick>
 800121c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800121e:	e008      	b.n	8001232 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001220:	f7ff fc0c 	bl	8000a3c <HAL_GetTick>
 8001224:	4602      	mov	r2, r0
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	2b02      	cmp	r3, #2
 800122c:	d901      	bls.n	8001232 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800122e:	2303      	movs	r3, #3
 8001230:	e15b      	b.n	80014ea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001232:	4b26      	ldr	r3, [pc, #152]	; (80012cc <HAL_RCC_OscConfig+0x2ac>)
 8001234:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001236:	f003 0302 	and.w	r3, r3, #2
 800123a:	2b00      	cmp	r3, #0
 800123c:	d0f0      	beq.n	8001220 <HAL_RCC_OscConfig+0x200>
 800123e:	e015      	b.n	800126c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001240:	4b24      	ldr	r3, [pc, #144]	; (80012d4 <HAL_RCC_OscConfig+0x2b4>)
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001246:	f7ff fbf9 	bl	8000a3c <HAL_GetTick>
 800124a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800124c:	e008      	b.n	8001260 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800124e:	f7ff fbf5 	bl	8000a3c <HAL_GetTick>
 8001252:	4602      	mov	r2, r0
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	2b02      	cmp	r3, #2
 800125a:	d901      	bls.n	8001260 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800125c:	2303      	movs	r3, #3
 800125e:	e144      	b.n	80014ea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001260:	4b1a      	ldr	r3, [pc, #104]	; (80012cc <HAL_RCC_OscConfig+0x2ac>)
 8001262:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001264:	f003 0302 	and.w	r3, r3, #2
 8001268:	2b00      	cmp	r3, #0
 800126a:	d1f0      	bne.n	800124e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f003 0304 	and.w	r3, r3, #4
 8001274:	2b00      	cmp	r3, #0
 8001276:	f000 80a0 	beq.w	80013ba <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800127a:	2300      	movs	r3, #0
 800127c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800127e:	4b13      	ldr	r3, [pc, #76]	; (80012cc <HAL_RCC_OscConfig+0x2ac>)
 8001280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d10f      	bne.n	80012aa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	60bb      	str	r3, [r7, #8]
 800128e:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <HAL_RCC_OscConfig+0x2ac>)
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	4a0e      	ldr	r2, [pc, #56]	; (80012cc <HAL_RCC_OscConfig+0x2ac>)
 8001294:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001298:	6413      	str	r3, [r2, #64]	; 0x40
 800129a:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <HAL_RCC_OscConfig+0x2ac>)
 800129c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a2:	60bb      	str	r3, [r7, #8]
 80012a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012a6:	2301      	movs	r3, #1
 80012a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012aa:	4b0b      	ldr	r3, [pc, #44]	; (80012d8 <HAL_RCC_OscConfig+0x2b8>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d121      	bne.n	80012fa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012b6:	4b08      	ldr	r3, [pc, #32]	; (80012d8 <HAL_RCC_OscConfig+0x2b8>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a07      	ldr	r2, [pc, #28]	; (80012d8 <HAL_RCC_OscConfig+0x2b8>)
 80012bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012c2:	f7ff fbbb 	bl	8000a3c <HAL_GetTick>
 80012c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012c8:	e011      	b.n	80012ee <HAL_RCC_OscConfig+0x2ce>
 80012ca:	bf00      	nop
 80012cc:	40023800 	.word	0x40023800
 80012d0:	42470000 	.word	0x42470000
 80012d4:	42470e80 	.word	0x42470e80
 80012d8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012dc:	f7ff fbae 	bl	8000a3c <HAL_GetTick>
 80012e0:	4602      	mov	r2, r0
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	d901      	bls.n	80012ee <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80012ea:	2303      	movs	r3, #3
 80012ec:	e0fd      	b.n	80014ea <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012ee:	4b81      	ldr	r3, [pc, #516]	; (80014f4 <HAL_RCC_OscConfig+0x4d4>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d0f0      	beq.n	80012dc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d106      	bne.n	8001310 <HAL_RCC_OscConfig+0x2f0>
 8001302:	4b7d      	ldr	r3, [pc, #500]	; (80014f8 <HAL_RCC_OscConfig+0x4d8>)
 8001304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001306:	4a7c      	ldr	r2, [pc, #496]	; (80014f8 <HAL_RCC_OscConfig+0x4d8>)
 8001308:	f043 0301 	orr.w	r3, r3, #1
 800130c:	6713      	str	r3, [r2, #112]	; 0x70
 800130e:	e01c      	b.n	800134a <HAL_RCC_OscConfig+0x32a>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	2b05      	cmp	r3, #5
 8001316:	d10c      	bne.n	8001332 <HAL_RCC_OscConfig+0x312>
 8001318:	4b77      	ldr	r3, [pc, #476]	; (80014f8 <HAL_RCC_OscConfig+0x4d8>)
 800131a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800131c:	4a76      	ldr	r2, [pc, #472]	; (80014f8 <HAL_RCC_OscConfig+0x4d8>)
 800131e:	f043 0304 	orr.w	r3, r3, #4
 8001322:	6713      	str	r3, [r2, #112]	; 0x70
 8001324:	4b74      	ldr	r3, [pc, #464]	; (80014f8 <HAL_RCC_OscConfig+0x4d8>)
 8001326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001328:	4a73      	ldr	r2, [pc, #460]	; (80014f8 <HAL_RCC_OscConfig+0x4d8>)
 800132a:	f043 0301 	orr.w	r3, r3, #1
 800132e:	6713      	str	r3, [r2, #112]	; 0x70
 8001330:	e00b      	b.n	800134a <HAL_RCC_OscConfig+0x32a>
 8001332:	4b71      	ldr	r3, [pc, #452]	; (80014f8 <HAL_RCC_OscConfig+0x4d8>)
 8001334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001336:	4a70      	ldr	r2, [pc, #448]	; (80014f8 <HAL_RCC_OscConfig+0x4d8>)
 8001338:	f023 0301 	bic.w	r3, r3, #1
 800133c:	6713      	str	r3, [r2, #112]	; 0x70
 800133e:	4b6e      	ldr	r3, [pc, #440]	; (80014f8 <HAL_RCC_OscConfig+0x4d8>)
 8001340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001342:	4a6d      	ldr	r2, [pc, #436]	; (80014f8 <HAL_RCC_OscConfig+0x4d8>)
 8001344:	f023 0304 	bic.w	r3, r3, #4
 8001348:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d015      	beq.n	800137e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001352:	f7ff fb73 	bl	8000a3c <HAL_GetTick>
 8001356:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001358:	e00a      	b.n	8001370 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800135a:	f7ff fb6f 	bl	8000a3c <HAL_GetTick>
 800135e:	4602      	mov	r2, r0
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	f241 3288 	movw	r2, #5000	; 0x1388
 8001368:	4293      	cmp	r3, r2
 800136a:	d901      	bls.n	8001370 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800136c:	2303      	movs	r3, #3
 800136e:	e0bc      	b.n	80014ea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001370:	4b61      	ldr	r3, [pc, #388]	; (80014f8 <HAL_RCC_OscConfig+0x4d8>)
 8001372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001374:	f003 0302 	and.w	r3, r3, #2
 8001378:	2b00      	cmp	r3, #0
 800137a:	d0ee      	beq.n	800135a <HAL_RCC_OscConfig+0x33a>
 800137c:	e014      	b.n	80013a8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800137e:	f7ff fb5d 	bl	8000a3c <HAL_GetTick>
 8001382:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001384:	e00a      	b.n	800139c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001386:	f7ff fb59 	bl	8000a3c <HAL_GetTick>
 800138a:	4602      	mov	r2, r0
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	f241 3288 	movw	r2, #5000	; 0x1388
 8001394:	4293      	cmp	r3, r2
 8001396:	d901      	bls.n	800139c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001398:	2303      	movs	r3, #3
 800139a:	e0a6      	b.n	80014ea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800139c:	4b56      	ldr	r3, [pc, #344]	; (80014f8 <HAL_RCC_OscConfig+0x4d8>)
 800139e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013a0:	f003 0302 	and.w	r3, r3, #2
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d1ee      	bne.n	8001386 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013a8:	7dfb      	ldrb	r3, [r7, #23]
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d105      	bne.n	80013ba <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013ae:	4b52      	ldr	r3, [pc, #328]	; (80014f8 <HAL_RCC_OscConfig+0x4d8>)
 80013b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b2:	4a51      	ldr	r2, [pc, #324]	; (80014f8 <HAL_RCC_OscConfig+0x4d8>)
 80013b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	699b      	ldr	r3, [r3, #24]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	f000 8092 	beq.w	80014e8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80013c4:	4b4c      	ldr	r3, [pc, #304]	; (80014f8 <HAL_RCC_OscConfig+0x4d8>)
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	f003 030c 	and.w	r3, r3, #12
 80013cc:	2b08      	cmp	r3, #8
 80013ce:	d05c      	beq.n	800148a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d141      	bne.n	800145c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013d8:	4b48      	ldr	r3, [pc, #288]	; (80014fc <HAL_RCC_OscConfig+0x4dc>)
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013de:	f7ff fb2d 	bl	8000a3c <HAL_GetTick>
 80013e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013e4:	e008      	b.n	80013f8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013e6:	f7ff fb29 	bl	8000a3c <HAL_GetTick>
 80013ea:	4602      	mov	r2, r0
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d901      	bls.n	80013f8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80013f4:	2303      	movs	r3, #3
 80013f6:	e078      	b.n	80014ea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013f8:	4b3f      	ldr	r3, [pc, #252]	; (80014f8 <HAL_RCC_OscConfig+0x4d8>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d1f0      	bne.n	80013e6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	69da      	ldr	r2, [r3, #28]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6a1b      	ldr	r3, [r3, #32]
 800140c:	431a      	orrs	r2, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001412:	019b      	lsls	r3, r3, #6
 8001414:	431a      	orrs	r2, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800141a:	085b      	lsrs	r3, r3, #1
 800141c:	3b01      	subs	r3, #1
 800141e:	041b      	lsls	r3, r3, #16
 8001420:	431a      	orrs	r2, r3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001426:	061b      	lsls	r3, r3, #24
 8001428:	4933      	ldr	r1, [pc, #204]	; (80014f8 <HAL_RCC_OscConfig+0x4d8>)
 800142a:	4313      	orrs	r3, r2
 800142c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800142e:	4b33      	ldr	r3, [pc, #204]	; (80014fc <HAL_RCC_OscConfig+0x4dc>)
 8001430:	2201      	movs	r2, #1
 8001432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001434:	f7ff fb02 	bl	8000a3c <HAL_GetTick>
 8001438:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800143a:	e008      	b.n	800144e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800143c:	f7ff fafe 	bl	8000a3c <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b02      	cmp	r3, #2
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e04d      	b.n	80014ea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800144e:	4b2a      	ldr	r3, [pc, #168]	; (80014f8 <HAL_RCC_OscConfig+0x4d8>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d0f0      	beq.n	800143c <HAL_RCC_OscConfig+0x41c>
 800145a:	e045      	b.n	80014e8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800145c:	4b27      	ldr	r3, [pc, #156]	; (80014fc <HAL_RCC_OscConfig+0x4dc>)
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001462:	f7ff faeb 	bl	8000a3c <HAL_GetTick>
 8001466:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001468:	e008      	b.n	800147c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800146a:	f7ff fae7 	bl	8000a3c <HAL_GetTick>
 800146e:	4602      	mov	r2, r0
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	2b02      	cmp	r3, #2
 8001476:	d901      	bls.n	800147c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001478:	2303      	movs	r3, #3
 800147a:	e036      	b.n	80014ea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800147c:	4b1e      	ldr	r3, [pc, #120]	; (80014f8 <HAL_RCC_OscConfig+0x4d8>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d1f0      	bne.n	800146a <HAL_RCC_OscConfig+0x44a>
 8001488:	e02e      	b.n	80014e8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	699b      	ldr	r3, [r3, #24]
 800148e:	2b01      	cmp	r3, #1
 8001490:	d101      	bne.n	8001496 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e029      	b.n	80014ea <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001496:	4b18      	ldr	r3, [pc, #96]	; (80014f8 <HAL_RCC_OscConfig+0x4d8>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	69db      	ldr	r3, [r3, #28]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d11c      	bne.n	80014e4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d115      	bne.n	80014e4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80014b8:	68fa      	ldr	r2, [r7, #12]
 80014ba:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80014be:	4013      	ands	r3, r2
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d10d      	bne.n	80014e4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d106      	bne.n	80014e4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d001      	beq.n	80014e8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e000      	b.n	80014ea <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3718      	adds	r7, #24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40007000 	.word	0x40007000
 80014f8:	40023800 	.word	0x40023800
 80014fc:	42470060 	.word	0x42470060

08001500 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d101      	bne.n	8001514 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e0cc      	b.n	80016ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001514:	4b68      	ldr	r3, [pc, #416]	; (80016b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 030f 	and.w	r3, r3, #15
 800151c:	683a      	ldr	r2, [r7, #0]
 800151e:	429a      	cmp	r2, r3
 8001520:	d90c      	bls.n	800153c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001522:	4b65      	ldr	r3, [pc, #404]	; (80016b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001524:	683a      	ldr	r2, [r7, #0]
 8001526:	b2d2      	uxtb	r2, r2
 8001528:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800152a:	4b63      	ldr	r3, [pc, #396]	; (80016b8 <HAL_RCC_ClockConfig+0x1b8>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 030f 	and.w	r3, r3, #15
 8001532:	683a      	ldr	r2, [r7, #0]
 8001534:	429a      	cmp	r2, r3
 8001536:	d001      	beq.n	800153c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e0b8      	b.n	80016ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0302 	and.w	r3, r3, #2
 8001544:	2b00      	cmp	r3, #0
 8001546:	d020      	beq.n	800158a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0304 	and.w	r3, r3, #4
 8001550:	2b00      	cmp	r3, #0
 8001552:	d005      	beq.n	8001560 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001554:	4b59      	ldr	r3, [pc, #356]	; (80016bc <HAL_RCC_ClockConfig+0x1bc>)
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	4a58      	ldr	r2, [pc, #352]	; (80016bc <HAL_RCC_ClockConfig+0x1bc>)
 800155a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800155e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0308 	and.w	r3, r3, #8
 8001568:	2b00      	cmp	r3, #0
 800156a:	d005      	beq.n	8001578 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800156c:	4b53      	ldr	r3, [pc, #332]	; (80016bc <HAL_RCC_ClockConfig+0x1bc>)
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	4a52      	ldr	r2, [pc, #328]	; (80016bc <HAL_RCC_ClockConfig+0x1bc>)
 8001572:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001576:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001578:	4b50      	ldr	r3, [pc, #320]	; (80016bc <HAL_RCC_ClockConfig+0x1bc>)
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	494d      	ldr	r1, [pc, #308]	; (80016bc <HAL_RCC_ClockConfig+0x1bc>)
 8001586:	4313      	orrs	r3, r2
 8001588:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	2b00      	cmp	r3, #0
 8001594:	d044      	beq.n	8001620 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d107      	bne.n	80015ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800159e:	4b47      	ldr	r3, [pc, #284]	; (80016bc <HAL_RCC_ClockConfig+0x1bc>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d119      	bne.n	80015de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e07f      	b.n	80016ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d003      	beq.n	80015be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015ba:	2b03      	cmp	r3, #3
 80015bc:	d107      	bne.n	80015ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015be:	4b3f      	ldr	r3, [pc, #252]	; (80016bc <HAL_RCC_ClockConfig+0x1bc>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d109      	bne.n	80015de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e06f      	b.n	80016ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ce:	4b3b      	ldr	r3, [pc, #236]	; (80016bc <HAL_RCC_ClockConfig+0x1bc>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d101      	bne.n	80015de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e067      	b.n	80016ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015de:	4b37      	ldr	r3, [pc, #220]	; (80016bc <HAL_RCC_ClockConfig+0x1bc>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	f023 0203 	bic.w	r2, r3, #3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	4934      	ldr	r1, [pc, #208]	; (80016bc <HAL_RCC_ClockConfig+0x1bc>)
 80015ec:	4313      	orrs	r3, r2
 80015ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015f0:	f7ff fa24 	bl	8000a3c <HAL_GetTick>
 80015f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015f6:	e00a      	b.n	800160e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015f8:	f7ff fa20 	bl	8000a3c <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	f241 3288 	movw	r2, #5000	; 0x1388
 8001606:	4293      	cmp	r3, r2
 8001608:	d901      	bls.n	800160e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e04f      	b.n	80016ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800160e:	4b2b      	ldr	r3, [pc, #172]	; (80016bc <HAL_RCC_ClockConfig+0x1bc>)
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	f003 020c 	and.w	r2, r3, #12
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	429a      	cmp	r2, r3
 800161e:	d1eb      	bne.n	80015f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001620:	4b25      	ldr	r3, [pc, #148]	; (80016b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 030f 	and.w	r3, r3, #15
 8001628:	683a      	ldr	r2, [r7, #0]
 800162a:	429a      	cmp	r2, r3
 800162c:	d20c      	bcs.n	8001648 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800162e:	4b22      	ldr	r3, [pc, #136]	; (80016b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001630:	683a      	ldr	r2, [r7, #0]
 8001632:	b2d2      	uxtb	r2, r2
 8001634:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001636:	4b20      	ldr	r3, [pc, #128]	; (80016b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 030f 	and.w	r3, r3, #15
 800163e:	683a      	ldr	r2, [r7, #0]
 8001640:	429a      	cmp	r2, r3
 8001642:	d001      	beq.n	8001648 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e032      	b.n	80016ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 0304 	and.w	r3, r3, #4
 8001650:	2b00      	cmp	r3, #0
 8001652:	d008      	beq.n	8001666 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001654:	4b19      	ldr	r3, [pc, #100]	; (80016bc <HAL_RCC_ClockConfig+0x1bc>)
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	4916      	ldr	r1, [pc, #88]	; (80016bc <HAL_RCC_ClockConfig+0x1bc>)
 8001662:	4313      	orrs	r3, r2
 8001664:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0308 	and.w	r3, r3, #8
 800166e:	2b00      	cmp	r3, #0
 8001670:	d009      	beq.n	8001686 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001672:	4b12      	ldr	r3, [pc, #72]	; (80016bc <HAL_RCC_ClockConfig+0x1bc>)
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	691b      	ldr	r3, [r3, #16]
 800167e:	00db      	lsls	r3, r3, #3
 8001680:	490e      	ldr	r1, [pc, #56]	; (80016bc <HAL_RCC_ClockConfig+0x1bc>)
 8001682:	4313      	orrs	r3, r2
 8001684:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001686:	f000 f821 	bl	80016cc <HAL_RCC_GetSysClockFreq>
 800168a:	4601      	mov	r1, r0
 800168c:	4b0b      	ldr	r3, [pc, #44]	; (80016bc <HAL_RCC_ClockConfig+0x1bc>)
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	091b      	lsrs	r3, r3, #4
 8001692:	f003 030f 	and.w	r3, r3, #15
 8001696:	4a0a      	ldr	r2, [pc, #40]	; (80016c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001698:	5cd3      	ldrb	r3, [r2, r3]
 800169a:	fa21 f303 	lsr.w	r3, r1, r3
 800169e:	4a09      	ldr	r2, [pc, #36]	; (80016c4 <HAL_RCC_ClockConfig+0x1c4>)
 80016a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80016a2:	4b09      	ldr	r3, [pc, #36]	; (80016c8 <HAL_RCC_ClockConfig+0x1c8>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff f984 	bl	80009b4 <HAL_InitTick>

  return HAL_OK;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3710      	adds	r7, #16
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40023c00 	.word	0x40023c00
 80016bc:	40023800 	.word	0x40023800
 80016c0:	080044ec 	.word	0x080044ec
 80016c4:	20000000 	.word	0x20000000
 80016c8:	20000004 	.word	0x20000004

080016cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80016d2:	2300      	movs	r3, #0
 80016d4:	607b      	str	r3, [r7, #4]
 80016d6:	2300      	movs	r3, #0
 80016d8:	60fb      	str	r3, [r7, #12]
 80016da:	2300      	movs	r3, #0
 80016dc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80016de:	2300      	movs	r3, #0
 80016e0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016e2:	4b50      	ldr	r3, [pc, #320]	; (8001824 <HAL_RCC_GetSysClockFreq+0x158>)
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	f003 030c 	and.w	r3, r3, #12
 80016ea:	2b04      	cmp	r3, #4
 80016ec:	d007      	beq.n	80016fe <HAL_RCC_GetSysClockFreq+0x32>
 80016ee:	2b08      	cmp	r3, #8
 80016f0:	d008      	beq.n	8001704 <HAL_RCC_GetSysClockFreq+0x38>
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	f040 808d 	bne.w	8001812 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80016f8:	4b4b      	ldr	r3, [pc, #300]	; (8001828 <HAL_RCC_GetSysClockFreq+0x15c>)
 80016fa:	60bb      	str	r3, [r7, #8]
       break;
 80016fc:	e08c      	b.n	8001818 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80016fe:	4b4b      	ldr	r3, [pc, #300]	; (800182c <HAL_RCC_GetSysClockFreq+0x160>)
 8001700:	60bb      	str	r3, [r7, #8]
      break;
 8001702:	e089      	b.n	8001818 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001704:	4b47      	ldr	r3, [pc, #284]	; (8001824 <HAL_RCC_GetSysClockFreq+0x158>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800170c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800170e:	4b45      	ldr	r3, [pc, #276]	; (8001824 <HAL_RCC_GetSysClockFreq+0x158>)
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d023      	beq.n	8001762 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800171a:	4b42      	ldr	r3, [pc, #264]	; (8001824 <HAL_RCC_GetSysClockFreq+0x158>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	099b      	lsrs	r3, r3, #6
 8001720:	f04f 0400 	mov.w	r4, #0
 8001724:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001728:	f04f 0200 	mov.w	r2, #0
 800172c:	ea03 0501 	and.w	r5, r3, r1
 8001730:	ea04 0602 	and.w	r6, r4, r2
 8001734:	4a3d      	ldr	r2, [pc, #244]	; (800182c <HAL_RCC_GetSysClockFreq+0x160>)
 8001736:	fb02 f106 	mul.w	r1, r2, r6
 800173a:	2200      	movs	r2, #0
 800173c:	fb02 f205 	mul.w	r2, r2, r5
 8001740:	440a      	add	r2, r1
 8001742:	493a      	ldr	r1, [pc, #232]	; (800182c <HAL_RCC_GetSysClockFreq+0x160>)
 8001744:	fba5 0101 	umull	r0, r1, r5, r1
 8001748:	1853      	adds	r3, r2, r1
 800174a:	4619      	mov	r1, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f04f 0400 	mov.w	r4, #0
 8001752:	461a      	mov	r2, r3
 8001754:	4623      	mov	r3, r4
 8001756:	f7fe fd4b 	bl	80001f0 <__aeabi_uldivmod>
 800175a:	4603      	mov	r3, r0
 800175c:	460c      	mov	r4, r1
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	e049      	b.n	80017f6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001762:	4b30      	ldr	r3, [pc, #192]	; (8001824 <HAL_RCC_GetSysClockFreq+0x158>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	099b      	lsrs	r3, r3, #6
 8001768:	f04f 0400 	mov.w	r4, #0
 800176c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001770:	f04f 0200 	mov.w	r2, #0
 8001774:	ea03 0501 	and.w	r5, r3, r1
 8001778:	ea04 0602 	and.w	r6, r4, r2
 800177c:	4629      	mov	r1, r5
 800177e:	4632      	mov	r2, r6
 8001780:	f04f 0300 	mov.w	r3, #0
 8001784:	f04f 0400 	mov.w	r4, #0
 8001788:	0154      	lsls	r4, r2, #5
 800178a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800178e:	014b      	lsls	r3, r1, #5
 8001790:	4619      	mov	r1, r3
 8001792:	4622      	mov	r2, r4
 8001794:	1b49      	subs	r1, r1, r5
 8001796:	eb62 0206 	sbc.w	r2, r2, r6
 800179a:	f04f 0300 	mov.w	r3, #0
 800179e:	f04f 0400 	mov.w	r4, #0
 80017a2:	0194      	lsls	r4, r2, #6
 80017a4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80017a8:	018b      	lsls	r3, r1, #6
 80017aa:	1a5b      	subs	r3, r3, r1
 80017ac:	eb64 0402 	sbc.w	r4, r4, r2
 80017b0:	f04f 0100 	mov.w	r1, #0
 80017b4:	f04f 0200 	mov.w	r2, #0
 80017b8:	00e2      	lsls	r2, r4, #3
 80017ba:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80017be:	00d9      	lsls	r1, r3, #3
 80017c0:	460b      	mov	r3, r1
 80017c2:	4614      	mov	r4, r2
 80017c4:	195b      	adds	r3, r3, r5
 80017c6:	eb44 0406 	adc.w	r4, r4, r6
 80017ca:	f04f 0100 	mov.w	r1, #0
 80017ce:	f04f 0200 	mov.w	r2, #0
 80017d2:	02a2      	lsls	r2, r4, #10
 80017d4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80017d8:	0299      	lsls	r1, r3, #10
 80017da:	460b      	mov	r3, r1
 80017dc:	4614      	mov	r4, r2
 80017de:	4618      	mov	r0, r3
 80017e0:	4621      	mov	r1, r4
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f04f 0400 	mov.w	r4, #0
 80017e8:	461a      	mov	r2, r3
 80017ea:	4623      	mov	r3, r4
 80017ec:	f7fe fd00 	bl	80001f0 <__aeabi_uldivmod>
 80017f0:	4603      	mov	r3, r0
 80017f2:	460c      	mov	r4, r1
 80017f4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80017f6:	4b0b      	ldr	r3, [pc, #44]	; (8001824 <HAL_RCC_GetSysClockFreq+0x158>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	0c1b      	lsrs	r3, r3, #16
 80017fc:	f003 0303 	and.w	r3, r3, #3
 8001800:	3301      	adds	r3, #1
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001806:	68fa      	ldr	r2, [r7, #12]
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	fbb2 f3f3 	udiv	r3, r2, r3
 800180e:	60bb      	str	r3, [r7, #8]
      break;
 8001810:	e002      	b.n	8001818 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001812:	4b05      	ldr	r3, [pc, #20]	; (8001828 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001814:	60bb      	str	r3, [r7, #8]
      break;
 8001816:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001818:	68bb      	ldr	r3, [r7, #8]
}
 800181a:	4618      	mov	r0, r3
 800181c:	3714      	adds	r7, #20
 800181e:	46bd      	mov	sp, r7
 8001820:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001822:	bf00      	nop
 8001824:	40023800 	.word	0x40023800
 8001828:	00f42400 	.word	0x00f42400
 800182c:	017d7840 	.word	0x017d7840

08001830 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8001834:	bf00      	nop
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
	...

08001840 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001840:	b480      	push	{r7}
 8001842:	b085      	sub	sp, #20
 8001844:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001846:	f3ef 8305 	mrs	r3, IPSR
 800184a:	60bb      	str	r3, [r7, #8]
  return(result);
 800184c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800184e:	2b00      	cmp	r3, #0
 8001850:	d10f      	bne.n	8001872 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001852:	f3ef 8310 	mrs	r3, PRIMASK
 8001856:	607b      	str	r3, [r7, #4]
  return(result);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d105      	bne.n	800186a <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800185e:	f3ef 8311 	mrs	r3, BASEPRI
 8001862:	603b      	str	r3, [r7, #0]
  return(result);
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d007      	beq.n	800187a <osKernelInitialize+0x3a>
 800186a:	4b0e      	ldr	r3, [pc, #56]	; (80018a4 <osKernelInitialize+0x64>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2b02      	cmp	r3, #2
 8001870:	d103      	bne.n	800187a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8001872:	f06f 0305 	mvn.w	r3, #5
 8001876:	60fb      	str	r3, [r7, #12]
 8001878:	e00c      	b.n	8001894 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800187a:	4b0a      	ldr	r3, [pc, #40]	; (80018a4 <osKernelInitialize+0x64>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d105      	bne.n	800188e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001882:	4b08      	ldr	r3, [pc, #32]	; (80018a4 <osKernelInitialize+0x64>)
 8001884:	2201      	movs	r2, #1
 8001886:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001888:	2300      	movs	r3, #0
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	e002      	b.n	8001894 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800188e:	f04f 33ff 	mov.w	r3, #4294967295
 8001892:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001894:	68fb      	ldr	r3, [r7, #12]
}
 8001896:	4618      	mov	r0, r3
 8001898:	3714      	adds	r7, #20
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	20000030 	.word	0x20000030

080018a8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80018ae:	f3ef 8305 	mrs	r3, IPSR
 80018b2:	60bb      	str	r3, [r7, #8]
  return(result);
 80018b4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d10f      	bne.n	80018da <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80018ba:	f3ef 8310 	mrs	r3, PRIMASK
 80018be:	607b      	str	r3, [r7, #4]
  return(result);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d105      	bne.n	80018d2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80018c6:	f3ef 8311 	mrs	r3, BASEPRI
 80018ca:	603b      	str	r3, [r7, #0]
  return(result);
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d007      	beq.n	80018e2 <osKernelStart+0x3a>
 80018d2:	4b0f      	ldr	r3, [pc, #60]	; (8001910 <osKernelStart+0x68>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d103      	bne.n	80018e2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80018da:	f06f 0305 	mvn.w	r3, #5
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	e010      	b.n	8001904 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80018e2:	4b0b      	ldr	r3, [pc, #44]	; (8001910 <osKernelStart+0x68>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d109      	bne.n	80018fe <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80018ea:	f7ff ffa1 	bl	8001830 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80018ee:	4b08      	ldr	r3, [pc, #32]	; (8001910 <osKernelStart+0x68>)
 80018f0:	2202      	movs	r2, #2
 80018f2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80018f4:	f001 f8f4 	bl	8002ae0 <vTaskStartScheduler>
      stat = osOK;
 80018f8:	2300      	movs	r3, #0
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	e002      	b.n	8001904 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80018fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001902:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001904:	68fb      	ldr	r3, [r7, #12]
}
 8001906:	4618      	mov	r0, r3
 8001908:	3710      	adds	r7, #16
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	20000030 	.word	0x20000030

08001914 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001914:	b580      	push	{r7, lr}
 8001916:	b090      	sub	sp, #64	; 0x40
 8001918:	af04      	add	r7, sp, #16
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	60b9      	str	r1, [r7, #8]
 800191e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001920:	2300      	movs	r3, #0
 8001922:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001924:	f3ef 8305 	mrs	r3, IPSR
 8001928:	61fb      	str	r3, [r7, #28]
  return(result);
 800192a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800192c:	2b00      	cmp	r3, #0
 800192e:	f040 808f 	bne.w	8001a50 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001932:	f3ef 8310 	mrs	r3, PRIMASK
 8001936:	61bb      	str	r3, [r7, #24]
  return(result);
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d105      	bne.n	800194a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800193e:	f3ef 8311 	mrs	r3, BASEPRI
 8001942:	617b      	str	r3, [r7, #20]
  return(result);
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d003      	beq.n	8001952 <osThreadNew+0x3e>
 800194a:	4b44      	ldr	r3, [pc, #272]	; (8001a5c <osThreadNew+0x148>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2b02      	cmp	r3, #2
 8001950:	d07e      	beq.n	8001a50 <osThreadNew+0x13c>
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d07b      	beq.n	8001a50 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8001958:	2380      	movs	r3, #128	; 0x80
 800195a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800195c:	2318      	movs	r3, #24
 800195e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8001960:	2300      	movs	r3, #0
 8001962:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8001964:	f04f 33ff 	mov.w	r3, #4294967295
 8001968:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d045      	beq.n	80019fc <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d002      	beq.n	800197e <osThreadNew+0x6a>
        name = attr->name;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	699b      	ldr	r3, [r3, #24]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d002      	beq.n	800198c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	699b      	ldr	r3, [r3, #24]
 800198a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800198c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198e:	2b00      	cmp	r3, #0
 8001990:	d008      	beq.n	80019a4 <osThreadNew+0x90>
 8001992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001994:	2b38      	cmp	r3, #56	; 0x38
 8001996:	d805      	bhi.n	80019a4 <osThreadNew+0x90>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f003 0301 	and.w	r3, r3, #1
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <osThreadNew+0x94>
        return (NULL);
 80019a4:	2300      	movs	r3, #0
 80019a6:	e054      	b.n	8001a52 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	695b      	ldr	r3, [r3, #20]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d003      	beq.n	80019b8 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	695b      	ldr	r3, [r3, #20]
 80019b4:	089b      	lsrs	r3, r3, #2
 80019b6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d00e      	beq.n	80019de <osThreadNew+0xca>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	2b5b      	cmp	r3, #91	; 0x5b
 80019c6:	d90a      	bls.n	80019de <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d006      	beq.n	80019de <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	695b      	ldr	r3, [r3, #20]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d002      	beq.n	80019de <osThreadNew+0xca>
        mem = 1;
 80019d8:	2301      	movs	r3, #1
 80019da:	623b      	str	r3, [r7, #32]
 80019dc:	e010      	b.n	8001a00 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d10c      	bne.n	8001a00 <osThreadNew+0xec>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d108      	bne.n	8001a00 <osThreadNew+0xec>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	691b      	ldr	r3, [r3, #16]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d104      	bne.n	8001a00 <osThreadNew+0xec>
          mem = 0;
 80019f6:	2300      	movs	r3, #0
 80019f8:	623b      	str	r3, [r7, #32]
 80019fa:	e001      	b.n	8001a00 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80019fc:	2300      	movs	r3, #0
 80019fe:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8001a00:	6a3b      	ldr	r3, [r7, #32]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d110      	bne.n	8001a28 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001a0e:	9202      	str	r2, [sp, #8]
 8001a10:	9301      	str	r3, [sp, #4]
 8001a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a14:	9300      	str	r3, [sp, #0]
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001a1c:	68f8      	ldr	r0, [r7, #12]
 8001a1e:	f000 fe8d 	bl	800273c <xTaskCreateStatic>
 8001a22:	4603      	mov	r3, r0
 8001a24:	613b      	str	r3, [r7, #16]
 8001a26:	e013      	b.n	8001a50 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8001a28:	6a3b      	ldr	r3, [r7, #32]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d110      	bne.n	8001a50 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a30:	b29a      	uxth	r2, r3
 8001a32:	f107 0310 	add.w	r3, r7, #16
 8001a36:	9301      	str	r3, [sp, #4]
 8001a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3a:	9300      	str	r3, [sp, #0]
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001a40:	68f8      	ldr	r0, [r7, #12]
 8001a42:	f000 fed5 	bl	80027f0 <xTaskCreate>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d001      	beq.n	8001a50 <osThreadNew+0x13c>
          hTask = NULL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001a50:	693b      	ldr	r3, [r7, #16]
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3730      	adds	r7, #48	; 0x30
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20000030 	.word	0x20000030

08001a60 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001a60:	b480      	push	{r7}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	4a07      	ldr	r2, [pc, #28]	; (8001a8c <vApplicationGetIdleTaskMemory+0x2c>)
 8001a70:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	4a06      	ldr	r2, [pc, #24]	; (8001a90 <vApplicationGetIdleTaskMemory+0x30>)
 8001a76:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2280      	movs	r2, #128	; 0x80
 8001a7c:	601a      	str	r2, [r3, #0]
}
 8001a7e:	bf00      	nop
 8001a80:	3714      	adds	r7, #20
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	20000034 	.word	0x20000034
 8001a90:	20000090 	.word	0x20000090

08001a94 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	4a07      	ldr	r2, [pc, #28]	; (8001ac0 <vApplicationGetTimerTaskMemory+0x2c>)
 8001aa4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	4a06      	ldr	r2, [pc, #24]	; (8001ac4 <vApplicationGetTimerTaskMemory+0x30>)
 8001aaa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ab2:	601a      	str	r2, [r3, #0]
}
 8001ab4:	bf00      	nop
 8001ab6:	3714      	adds	r7, #20
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	20000290 	.word	0x20000290
 8001ac4:	200002ec 	.word	0x200002ec

08001ac8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f103 0208 	add.w	r2, r3, #8
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ae0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f103 0208 	add.w	r2, r3, #8
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f103 0208 	add.w	r2, r3, #8
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001afc:	bf00      	nop
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001b16:	bf00      	nop
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr

08001b22 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001b22:	b480      	push	{r7}
 8001b24:	b085      	sub	sp, #20
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
 8001b2a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	68fa      	ldr	r2, [r7, #12]
 8001b36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	689a      	ldr	r2, [r3, #8]
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	683a      	ldr	r2, [r7, #0]
 8001b46:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	683a      	ldr	r2, [r7, #0]
 8001b4c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	1c5a      	adds	r2, r3, #1
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	601a      	str	r2, [r3, #0]
}
 8001b5e:	bf00      	nop
 8001b60:	3714      	adds	r7, #20
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr

08001b6a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	b085      	sub	sp, #20
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
 8001b72:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b80:	d103      	bne.n	8001b8a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	691b      	ldr	r3, [r3, #16]
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	e00c      	b.n	8001ba4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	3308      	adds	r3, #8
 8001b8e:	60fb      	str	r3, [r7, #12]
 8001b90:	e002      	b.n	8001b98 <vListInsert+0x2e>
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	68ba      	ldr	r2, [r7, #8]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d2f6      	bcs.n	8001b92 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	685a      	ldr	r2, [r3, #4]
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	683a      	ldr	r2, [r7, #0]
 8001bb2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	68fa      	ldr	r2, [r7, #12]
 8001bb8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	683a      	ldr	r2, [r7, #0]
 8001bbe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	1c5a      	adds	r2, r3, #1
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	601a      	str	r2, [r3, #0]
}
 8001bd0:	bf00      	nop
 8001bd2:	3714      	adds	r7, #20
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b085      	sub	sp, #20
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	691b      	ldr	r3, [r3, #16]
 8001be8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	6892      	ldr	r2, [r2, #8]
 8001bf2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	6852      	ldr	r2, [r2, #4]
 8001bfc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d103      	bne.n	8001c10 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689a      	ldr	r2, [r3, #8]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	1e5a      	subs	r2, r3, #1
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3714      	adds	r7, #20
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d109      	bne.n	8001c58 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c48:	f383 8811 	msr	BASEPRI, r3
 8001c4c:	f3bf 8f6f 	isb	sy
 8001c50:	f3bf 8f4f 	dsb	sy
 8001c54:	60bb      	str	r3, [r7, #8]
 8001c56:	e7fe      	b.n	8001c56 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8001c58:	f002 f8c0 	bl	8003ddc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c64:	68f9      	ldr	r1, [r7, #12]
 8001c66:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001c68:	fb01 f303 	mul.w	r3, r1, r3
 8001c6c:	441a      	add	r2, r3
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2200      	movs	r2, #0
 8001c76:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c88:	3b01      	subs	r3, #1
 8001c8a:	68f9      	ldr	r1, [r7, #12]
 8001c8c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001c8e:	fb01 f303 	mul.w	r3, r1, r3
 8001c92:	441a      	add	r2, r3
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	22ff      	movs	r2, #255	; 0xff
 8001c9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	22ff      	movs	r2, #255	; 0xff
 8001ca4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d114      	bne.n	8001cd8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d01a      	beq.n	8001cec <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	3310      	adds	r3, #16
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f001 f990 	bl	8002fe0 <xTaskRemoveFromEventList>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d012      	beq.n	8001cec <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001cc6:	4b0d      	ldr	r3, [pc, #52]	; (8001cfc <xQueueGenericReset+0xcc>)
 8001cc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ccc:	601a      	str	r2, [r3, #0]
 8001cce:	f3bf 8f4f 	dsb	sy
 8001cd2:	f3bf 8f6f 	isb	sy
 8001cd6:	e009      	b.n	8001cec <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	3310      	adds	r3, #16
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff fef3 	bl	8001ac8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	3324      	adds	r3, #36	; 0x24
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff feee 	bl	8001ac8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001cec:	f002 f8a4 	bl	8003e38 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001cf0:	2301      	movs	r3, #1
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3710      	adds	r7, #16
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	e000ed04 	.word	0xe000ed04

08001d00 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b08e      	sub	sp, #56	; 0x38
 8001d04:	af02      	add	r7, sp, #8
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	60b9      	str	r1, [r7, #8]
 8001d0a:	607a      	str	r2, [r7, #4]
 8001d0c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d109      	bne.n	8001d28 <xQueueGenericCreateStatic+0x28>
 8001d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d18:	f383 8811 	msr	BASEPRI, r3
 8001d1c:	f3bf 8f6f 	isb	sy
 8001d20:	f3bf 8f4f 	dsb	sy
 8001d24:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d26:	e7fe      	b.n	8001d26 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d109      	bne.n	8001d42 <xQueueGenericCreateStatic+0x42>
 8001d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d32:	f383 8811 	msr	BASEPRI, r3
 8001d36:	f3bf 8f6f 	isb	sy
 8001d3a:	f3bf 8f4f 	dsb	sy
 8001d3e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d40:	e7fe      	b.n	8001d40 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d002      	beq.n	8001d4e <xQueueGenericCreateStatic+0x4e>
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <xQueueGenericCreateStatic+0x52>
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e000      	b.n	8001d54 <xQueueGenericCreateStatic+0x54>
 8001d52:	2300      	movs	r3, #0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d109      	bne.n	8001d6c <xQueueGenericCreateStatic+0x6c>
 8001d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d5c:	f383 8811 	msr	BASEPRI, r3
 8001d60:	f3bf 8f6f 	isb	sy
 8001d64:	f3bf 8f4f 	dsb	sy
 8001d68:	623b      	str	r3, [r7, #32]
 8001d6a:	e7fe      	b.n	8001d6a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d102      	bne.n	8001d78 <xQueueGenericCreateStatic+0x78>
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d101      	bne.n	8001d7c <xQueueGenericCreateStatic+0x7c>
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e000      	b.n	8001d7e <xQueueGenericCreateStatic+0x7e>
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d109      	bne.n	8001d96 <xQueueGenericCreateStatic+0x96>
 8001d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d86:	f383 8811 	msr	BASEPRI, r3
 8001d8a:	f3bf 8f6f 	isb	sy
 8001d8e:	f3bf 8f4f 	dsb	sy
 8001d92:	61fb      	str	r3, [r7, #28]
 8001d94:	e7fe      	b.n	8001d94 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001d96:	2350      	movs	r3, #80	; 0x50
 8001d98:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	2b50      	cmp	r3, #80	; 0x50
 8001d9e:	d009      	beq.n	8001db4 <xQueueGenericCreateStatic+0xb4>
 8001da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001da4:	f383 8811 	msr	BASEPRI, r3
 8001da8:	f3bf 8f6f 	isb	sy
 8001dac:	f3bf 8f4f 	dsb	sy
 8001db0:	61bb      	str	r3, [r7, #24]
 8001db2:	e7fe      	b.n	8001db2 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8001db4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8001dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d00d      	beq.n	8001ddc <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001dc8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dce:	9300      	str	r3, [sp, #0]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	68b9      	ldr	r1, [r7, #8]
 8001dd6:	68f8      	ldr	r0, [r7, #12]
 8001dd8:	f000 f844 	bl	8001e64 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3730      	adds	r7, #48	; 0x30
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b08a      	sub	sp, #40	; 0x28
 8001dea:	af02      	add	r7, sp, #8
 8001dec:	60f8      	str	r0, [r7, #12]
 8001dee:	60b9      	str	r1, [r7, #8]
 8001df0:	4613      	mov	r3, r2
 8001df2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d109      	bne.n	8001e0e <xQueueGenericCreate+0x28>
 8001dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dfe:	f383 8811 	msr	BASEPRI, r3
 8001e02:	f3bf 8f6f 	isb	sy
 8001e06:	f3bf 8f4f 	dsb	sy
 8001e0a:	613b      	str	r3, [r7, #16]
 8001e0c:	e7fe      	b.n	8001e0c <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d102      	bne.n	8001e1a <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8001e14:	2300      	movs	r3, #0
 8001e16:	61fb      	str	r3, [r7, #28]
 8001e18:	e004      	b.n	8001e24 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	68ba      	ldr	r2, [r7, #8]
 8001e1e:	fb02 f303 	mul.w	r3, r2, r3
 8001e22:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	3350      	adds	r3, #80	; 0x50
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f002 f8f1 	bl	8004010 <pvPortMalloc>
 8001e2e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d011      	beq.n	8001e5a <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	3350      	adds	r3, #80	; 0x50
 8001e3e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	2200      	movs	r2, #0
 8001e44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001e48:	79fa      	ldrb	r2, [r7, #7]
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	9300      	str	r3, [sp, #0]
 8001e4e:	4613      	mov	r3, r2
 8001e50:	697a      	ldr	r2, [r7, #20]
 8001e52:	68b9      	ldr	r1, [r7, #8]
 8001e54:	68f8      	ldr	r0, [r7, #12]
 8001e56:	f000 f805 	bl	8001e64 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001e5a:	69bb      	ldr	r3, [r7, #24]
	}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3720      	adds	r7, #32
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	60b9      	str	r1, [r7, #8]
 8001e6e:	607a      	str	r2, [r7, #4]
 8001e70:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d103      	bne.n	8001e80 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	e002      	b.n	8001e86 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	68fa      	ldr	r2, [r7, #12]
 8001e8a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	68ba      	ldr	r2, [r7, #8]
 8001e90:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001e92:	2101      	movs	r1, #1
 8001e94:	69b8      	ldr	r0, [r7, #24]
 8001e96:	f7ff fecb 	bl	8001c30 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	78fa      	ldrb	r2, [r7, #3]
 8001e9e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001ea2:	bf00      	nop
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b082      	sub	sp, #8
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d00e      	beq.n	8001ed6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8001eca:	2300      	movs	r3, #0
 8001ecc:	2200      	movs	r2, #0
 8001ece:	2100      	movs	r1, #0
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f000 f81d 	bl	8001f10 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8001ed6:	bf00      	nop
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b086      	sub	sp, #24
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	617b      	str	r3, [r7, #20]
 8001eec:	2300      	movs	r3, #0
 8001eee:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8001ef0:	79fb      	ldrb	r3, [r7, #7]
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	6939      	ldr	r1, [r7, #16]
 8001ef6:	6978      	ldr	r0, [r7, #20]
 8001ef8:	f7ff ff75 	bl	8001de6 <xQueueGenericCreate>
 8001efc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8001efe:	68f8      	ldr	r0, [r7, #12]
 8001f00:	f7ff ffd3 	bl	8001eaa <prvInitialiseMutex>

		return xNewQueue;
 8001f04:	68fb      	ldr	r3, [r7, #12]
	}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3718      	adds	r7, #24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
	...

08001f10 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b08e      	sub	sp, #56	; 0x38
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
 8001f1c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d109      	bne.n	8001f40 <xQueueGenericSend+0x30>
 8001f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f30:	f383 8811 	msr	BASEPRI, r3
 8001f34:	f3bf 8f6f 	isb	sy
 8001f38:	f3bf 8f4f 	dsb	sy
 8001f3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f3e:	e7fe      	b.n	8001f3e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d103      	bne.n	8001f4e <xQueueGenericSend+0x3e>
 8001f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d101      	bne.n	8001f52 <xQueueGenericSend+0x42>
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e000      	b.n	8001f54 <xQueueGenericSend+0x44>
 8001f52:	2300      	movs	r3, #0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d109      	bne.n	8001f6c <xQueueGenericSend+0x5c>
 8001f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f5c:	f383 8811 	msr	BASEPRI, r3
 8001f60:	f3bf 8f6f 	isb	sy
 8001f64:	f3bf 8f4f 	dsb	sy
 8001f68:	627b      	str	r3, [r7, #36]	; 0x24
 8001f6a:	e7fe      	b.n	8001f6a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d103      	bne.n	8001f7a <xQueueGenericSend+0x6a>
 8001f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d101      	bne.n	8001f7e <xQueueGenericSend+0x6e>
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e000      	b.n	8001f80 <xQueueGenericSend+0x70>
 8001f7e:	2300      	movs	r3, #0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d109      	bne.n	8001f98 <xQueueGenericSend+0x88>
 8001f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f88:	f383 8811 	msr	BASEPRI, r3
 8001f8c:	f3bf 8f6f 	isb	sy
 8001f90:	f3bf 8f4f 	dsb	sy
 8001f94:	623b      	str	r3, [r7, #32]
 8001f96:	e7fe      	b.n	8001f96 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001f98:	f001 f9d8 	bl	800334c <xTaskGetSchedulerState>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d102      	bne.n	8001fa8 <xQueueGenericSend+0x98>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d101      	bne.n	8001fac <xQueueGenericSend+0x9c>
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e000      	b.n	8001fae <xQueueGenericSend+0x9e>
 8001fac:	2300      	movs	r3, #0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d109      	bne.n	8001fc6 <xQueueGenericSend+0xb6>
 8001fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fb6:	f383 8811 	msr	BASEPRI, r3
 8001fba:	f3bf 8f6f 	isb	sy
 8001fbe:	f3bf 8f4f 	dsb	sy
 8001fc2:	61fb      	str	r3, [r7, #28]
 8001fc4:	e7fe      	b.n	8001fc4 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001fc6:	f001 ff09 	bl	8003ddc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d302      	bcc.n	8001fdc <xQueueGenericSend+0xcc>
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d129      	bne.n	8002030 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001fdc:	683a      	ldr	r2, [r7, #0]
 8001fde:	68b9      	ldr	r1, [r7, #8]
 8001fe0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001fe2:	f000 fa3e 	bl	8002462 <prvCopyDataToQueue>
 8001fe6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d010      	beq.n	8002012 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ff2:	3324      	adds	r3, #36	; 0x24
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f000 fff3 	bl	8002fe0 <xTaskRemoveFromEventList>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d013      	beq.n	8002028 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002000:	4b3f      	ldr	r3, [pc, #252]	; (8002100 <xQueueGenericSend+0x1f0>)
 8002002:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002006:	601a      	str	r2, [r3, #0]
 8002008:	f3bf 8f4f 	dsb	sy
 800200c:	f3bf 8f6f 	isb	sy
 8002010:	e00a      	b.n	8002028 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002014:	2b00      	cmp	r3, #0
 8002016:	d007      	beq.n	8002028 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002018:	4b39      	ldr	r3, [pc, #228]	; (8002100 <xQueueGenericSend+0x1f0>)
 800201a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	f3bf 8f4f 	dsb	sy
 8002024:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002028:	f001 ff06 	bl	8003e38 <vPortExitCritical>
				return pdPASS;
 800202c:	2301      	movs	r3, #1
 800202e:	e063      	b.n	80020f8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d103      	bne.n	800203e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002036:	f001 feff 	bl	8003e38 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800203a:	2300      	movs	r3, #0
 800203c:	e05c      	b.n	80020f8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800203e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002040:	2b00      	cmp	r3, #0
 8002042:	d106      	bne.n	8002052 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002044:	f107 0314 	add.w	r3, r7, #20
 8002048:	4618      	mov	r0, r3
 800204a:	f001 f82b 	bl	80030a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800204e:	2301      	movs	r3, #1
 8002050:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002052:	f001 fef1 	bl	8003e38 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002056:	f000 fda7 	bl	8002ba8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800205a:	f001 febf 	bl	8003ddc <vPortEnterCritical>
 800205e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002060:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002064:	b25b      	sxtb	r3, r3
 8002066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800206a:	d103      	bne.n	8002074 <xQueueGenericSend+0x164>
 800206c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800206e:	2200      	movs	r2, #0
 8002070:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002076:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800207a:	b25b      	sxtb	r3, r3
 800207c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002080:	d103      	bne.n	800208a <xQueueGenericSend+0x17a>
 8002082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002084:	2200      	movs	r2, #0
 8002086:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800208a:	f001 fed5 	bl	8003e38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800208e:	1d3a      	adds	r2, r7, #4
 8002090:	f107 0314 	add.w	r3, r7, #20
 8002094:	4611      	mov	r1, r2
 8002096:	4618      	mov	r0, r3
 8002098:	f001 f81a 	bl	80030d0 <xTaskCheckForTimeOut>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d124      	bne.n	80020ec <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80020a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80020a4:	f000 fad5 	bl	8002652 <prvIsQueueFull>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d018      	beq.n	80020e0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80020ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020b0:	3310      	adds	r3, #16
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	4611      	mov	r1, r2
 80020b6:	4618      	mov	r0, r3
 80020b8:	f000 ff44 	bl	8002f44 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80020bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80020be:	f000 fa60 	bl	8002582 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80020c2:	f000 fd7f 	bl	8002bc4 <xTaskResumeAll>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	f47f af7c 	bne.w	8001fc6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80020ce:	4b0c      	ldr	r3, [pc, #48]	; (8002100 <xQueueGenericSend+0x1f0>)
 80020d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020d4:	601a      	str	r2, [r3, #0]
 80020d6:	f3bf 8f4f 	dsb	sy
 80020da:	f3bf 8f6f 	isb	sy
 80020de:	e772      	b.n	8001fc6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80020e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80020e2:	f000 fa4e 	bl	8002582 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80020e6:	f000 fd6d 	bl	8002bc4 <xTaskResumeAll>
 80020ea:	e76c      	b.n	8001fc6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80020ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80020ee:	f000 fa48 	bl	8002582 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80020f2:	f000 fd67 	bl	8002bc4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80020f6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3738      	adds	r7, #56	; 0x38
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	e000ed04 	.word	0xe000ed04

08002104 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b08e      	sub	sp, #56	; 0x38
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
 8002110:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002118:	2b00      	cmp	r3, #0
 800211a:	d109      	bne.n	8002130 <xQueueGenericSendFromISR+0x2c>
 800211c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002120:	f383 8811 	msr	BASEPRI, r3
 8002124:	f3bf 8f6f 	isb	sy
 8002128:	f3bf 8f4f 	dsb	sy
 800212c:	627b      	str	r3, [r7, #36]	; 0x24
 800212e:	e7fe      	b.n	800212e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d103      	bne.n	800213e <xQueueGenericSendFromISR+0x3a>
 8002136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	2b00      	cmp	r3, #0
 800213c:	d101      	bne.n	8002142 <xQueueGenericSendFromISR+0x3e>
 800213e:	2301      	movs	r3, #1
 8002140:	e000      	b.n	8002144 <xQueueGenericSendFromISR+0x40>
 8002142:	2300      	movs	r3, #0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d109      	bne.n	800215c <xQueueGenericSendFromISR+0x58>
 8002148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800214c:	f383 8811 	msr	BASEPRI, r3
 8002150:	f3bf 8f6f 	isb	sy
 8002154:	f3bf 8f4f 	dsb	sy
 8002158:	623b      	str	r3, [r7, #32]
 800215a:	e7fe      	b.n	800215a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	2b02      	cmp	r3, #2
 8002160:	d103      	bne.n	800216a <xQueueGenericSendFromISR+0x66>
 8002162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002166:	2b01      	cmp	r3, #1
 8002168:	d101      	bne.n	800216e <xQueueGenericSendFromISR+0x6a>
 800216a:	2301      	movs	r3, #1
 800216c:	e000      	b.n	8002170 <xQueueGenericSendFromISR+0x6c>
 800216e:	2300      	movs	r3, #0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d109      	bne.n	8002188 <xQueueGenericSendFromISR+0x84>
 8002174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002178:	f383 8811 	msr	BASEPRI, r3
 800217c:	f3bf 8f6f 	isb	sy
 8002180:	f3bf 8f4f 	dsb	sy
 8002184:	61fb      	str	r3, [r7, #28]
 8002186:	e7fe      	b.n	8002186 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002188:	f001 ff04 	bl	8003f94 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800218c:	f3ef 8211 	mrs	r2, BASEPRI
 8002190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002194:	f383 8811 	msr	BASEPRI, r3
 8002198:	f3bf 8f6f 	isb	sy
 800219c:	f3bf 8f4f 	dsb	sy
 80021a0:	61ba      	str	r2, [r7, #24]
 80021a2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80021a4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80021a6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80021a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d302      	bcc.n	80021ba <xQueueGenericSendFromISR+0xb6>
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d12c      	bne.n	8002214 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80021ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80021c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80021c4:	683a      	ldr	r2, [r7, #0]
 80021c6:	68b9      	ldr	r1, [r7, #8]
 80021c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80021ca:	f000 f94a 	bl	8002462 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80021ce:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80021d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021d6:	d112      	bne.n	80021fe <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80021d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d016      	beq.n	800220e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80021e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021e2:	3324      	adds	r3, #36	; 0x24
 80021e4:	4618      	mov	r0, r3
 80021e6:	f000 fefb 	bl	8002fe0 <xTaskRemoveFromEventList>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d00e      	beq.n	800220e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d00b      	beq.n	800220e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2201      	movs	r2, #1
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	e007      	b.n	800220e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80021fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002202:	3301      	adds	r3, #1
 8002204:	b2db      	uxtb	r3, r3
 8002206:	b25a      	sxtb	r2, r3
 8002208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800220a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800220e:	2301      	movs	r3, #1
 8002210:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002212:	e001      	b.n	8002218 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002214:	2300      	movs	r3, #0
 8002216:	637b      	str	r3, [r7, #52]	; 0x34
 8002218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800221a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002224:	4618      	mov	r0, r3
 8002226:	3738      	adds	r7, #56	; 0x38
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b08c      	sub	sp, #48	; 0x30
 8002230:	af00      	add	r7, sp, #0
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	60b9      	str	r1, [r7, #8]
 8002236:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002238:	2300      	movs	r3, #0
 800223a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002242:	2b00      	cmp	r3, #0
 8002244:	d109      	bne.n	800225a <xQueueReceive+0x2e>
	__asm volatile
 8002246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800224a:	f383 8811 	msr	BASEPRI, r3
 800224e:	f3bf 8f6f 	isb	sy
 8002252:	f3bf 8f4f 	dsb	sy
 8002256:	623b      	str	r3, [r7, #32]
 8002258:	e7fe      	b.n	8002258 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d103      	bne.n	8002268 <xQueueReceive+0x3c>
 8002260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002264:	2b00      	cmp	r3, #0
 8002266:	d101      	bne.n	800226c <xQueueReceive+0x40>
 8002268:	2301      	movs	r3, #1
 800226a:	e000      	b.n	800226e <xQueueReceive+0x42>
 800226c:	2300      	movs	r3, #0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d109      	bne.n	8002286 <xQueueReceive+0x5a>
 8002272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002276:	f383 8811 	msr	BASEPRI, r3
 800227a:	f3bf 8f6f 	isb	sy
 800227e:	f3bf 8f4f 	dsb	sy
 8002282:	61fb      	str	r3, [r7, #28]
 8002284:	e7fe      	b.n	8002284 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002286:	f001 f861 	bl	800334c <xTaskGetSchedulerState>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d102      	bne.n	8002296 <xQueueReceive+0x6a>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d101      	bne.n	800229a <xQueueReceive+0x6e>
 8002296:	2301      	movs	r3, #1
 8002298:	e000      	b.n	800229c <xQueueReceive+0x70>
 800229a:	2300      	movs	r3, #0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d109      	bne.n	80022b4 <xQueueReceive+0x88>
 80022a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022a4:	f383 8811 	msr	BASEPRI, r3
 80022a8:	f3bf 8f6f 	isb	sy
 80022ac:	f3bf 8f4f 	dsb	sy
 80022b0:	61bb      	str	r3, [r7, #24]
 80022b2:	e7fe      	b.n	80022b2 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80022b4:	f001 fd92 	bl	8003ddc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80022b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022bc:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80022be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d01f      	beq.n	8002304 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80022c4:	68b9      	ldr	r1, [r7, #8]
 80022c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80022c8:	f000 f935 	bl	8002536 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80022cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ce:	1e5a      	subs	r2, r3, #1
 80022d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022d2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80022d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022d6:	691b      	ldr	r3, [r3, #16]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d00f      	beq.n	80022fc <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80022dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022de:	3310      	adds	r3, #16
 80022e0:	4618      	mov	r0, r3
 80022e2:	f000 fe7d 	bl	8002fe0 <xTaskRemoveFromEventList>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d007      	beq.n	80022fc <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80022ec:	4b3c      	ldr	r3, [pc, #240]	; (80023e0 <xQueueReceive+0x1b4>)
 80022ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022f2:	601a      	str	r2, [r3, #0]
 80022f4:	f3bf 8f4f 	dsb	sy
 80022f8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80022fc:	f001 fd9c 	bl	8003e38 <vPortExitCritical>
				return pdPASS;
 8002300:	2301      	movs	r3, #1
 8002302:	e069      	b.n	80023d8 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d103      	bne.n	8002312 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800230a:	f001 fd95 	bl	8003e38 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800230e:	2300      	movs	r3, #0
 8002310:	e062      	b.n	80023d8 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002314:	2b00      	cmp	r3, #0
 8002316:	d106      	bne.n	8002326 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002318:	f107 0310 	add.w	r3, r7, #16
 800231c:	4618      	mov	r0, r3
 800231e:	f000 fec1 	bl	80030a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002322:	2301      	movs	r3, #1
 8002324:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002326:	f001 fd87 	bl	8003e38 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800232a:	f000 fc3d 	bl	8002ba8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800232e:	f001 fd55 	bl	8003ddc <vPortEnterCritical>
 8002332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002334:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002338:	b25b      	sxtb	r3, r3
 800233a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800233e:	d103      	bne.n	8002348 <xQueueReceive+0x11c>
 8002340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002342:	2200      	movs	r2, #0
 8002344:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800234a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800234e:	b25b      	sxtb	r3, r3
 8002350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002354:	d103      	bne.n	800235e <xQueueReceive+0x132>
 8002356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002358:	2200      	movs	r2, #0
 800235a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800235e:	f001 fd6b 	bl	8003e38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002362:	1d3a      	adds	r2, r7, #4
 8002364:	f107 0310 	add.w	r3, r7, #16
 8002368:	4611      	mov	r1, r2
 800236a:	4618      	mov	r0, r3
 800236c:	f000 feb0 	bl	80030d0 <xTaskCheckForTimeOut>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d123      	bne.n	80023be <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002376:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002378:	f000 f955 	bl	8002626 <prvIsQueueEmpty>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d017      	beq.n	80023b2 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002384:	3324      	adds	r3, #36	; 0x24
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	4611      	mov	r1, r2
 800238a:	4618      	mov	r0, r3
 800238c:	f000 fdda 	bl	8002f44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002390:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002392:	f000 f8f6 	bl	8002582 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002396:	f000 fc15 	bl	8002bc4 <xTaskResumeAll>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d189      	bne.n	80022b4 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80023a0:	4b0f      	ldr	r3, [pc, #60]	; (80023e0 <xQueueReceive+0x1b4>)
 80023a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	f3bf 8f4f 	dsb	sy
 80023ac:	f3bf 8f6f 	isb	sy
 80023b0:	e780      	b.n	80022b4 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80023b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80023b4:	f000 f8e5 	bl	8002582 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80023b8:	f000 fc04 	bl	8002bc4 <xTaskResumeAll>
 80023bc:	e77a      	b.n	80022b4 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80023be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80023c0:	f000 f8df 	bl	8002582 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80023c4:	f000 fbfe 	bl	8002bc4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80023c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80023ca:	f000 f92c 	bl	8002626 <prvIsQueueEmpty>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	f43f af6f 	beq.w	80022b4 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80023d6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3730      	adds	r7, #48	; 0x30
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	e000ed04 	.word	0xe000ed04

080023e4 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d109      	bne.n	8002406 <uxQueueMessagesWaiting+0x22>
 80023f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023f6:	f383 8811 	msr	BASEPRI, r3
 80023fa:	f3bf 8f6f 	isb	sy
 80023fe:	f3bf 8f4f 	dsb	sy
 8002402:	60bb      	str	r3, [r7, #8]
 8002404:	e7fe      	b.n	8002404 <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 8002406:	f001 fce9 	bl	8003ddc <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800240e:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8002410:	f001 fd12 	bl	8003e38 <vPortExitCritical>

	return uxReturn;
 8002414:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8002416:	4618      	mov	r0, r3
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b086      	sub	sp, #24
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d109      	bne.n	8002444 <uxQueueSpacesAvailable+0x26>
 8002430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002434:	f383 8811 	msr	BASEPRI, r3
 8002438:	f3bf 8f6f 	isb	sy
 800243c:	f3bf 8f4f 	dsb	sy
 8002440:	60fb      	str	r3, [r7, #12]
 8002442:	e7fe      	b.n	8002442 <uxQueueSpacesAvailable+0x24>

	taskENTER_CRITICAL();
 8002444:	f001 fcca 	bl	8003ddc <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8002454:	f001 fcf0 	bl	8003e38 <vPortExitCritical>

	return uxReturn;
 8002458:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800245a:	4618      	mov	r0, r3
 800245c:	3718      	adds	r7, #24
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b086      	sub	sp, #24
 8002466:	af00      	add	r7, sp, #0
 8002468:	60f8      	str	r0, [r7, #12]
 800246a:	60b9      	str	r1, [r7, #8]
 800246c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800246e:	2300      	movs	r3, #0
 8002470:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002476:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247c:	2b00      	cmp	r3, #0
 800247e:	d10d      	bne.n	800249c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d14d      	bne.n	8002524 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	4618      	mov	r0, r3
 800248e:	f000 ff7b 	bl	8003388 <xTaskPriorityDisinherit>
 8002492:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2200      	movs	r2, #0
 8002498:	609a      	str	r2, [r3, #8]
 800249a:	e043      	b.n	8002524 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d119      	bne.n	80024d6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6858      	ldr	r0, [r3, #4]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024aa:	461a      	mov	r2, r3
 80024ac:	68b9      	ldr	r1, [r7, #8]
 80024ae:	f001 ffa9 	bl	8004404 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	685a      	ldr	r2, [r3, #4]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ba:	441a      	add	r2, r3
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	685a      	ldr	r2, [r3, #4]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d32b      	bcc.n	8002524 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	605a      	str	r2, [r3, #4]
 80024d4:	e026      	b.n	8002524 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	68d8      	ldr	r0, [r3, #12]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024de:	461a      	mov	r2, r3
 80024e0:	68b9      	ldr	r1, [r7, #8]
 80024e2:	f001 ff8f 	bl	8004404 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	68da      	ldr	r2, [r3, #12]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ee:	425b      	negs	r3, r3
 80024f0:	441a      	add	r2, r3
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	68da      	ldr	r2, [r3, #12]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	429a      	cmp	r2, r3
 8002500:	d207      	bcs.n	8002512 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	689a      	ldr	r2, [r3, #8]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250a:	425b      	negs	r3, r3
 800250c:	441a      	add	r2, r3
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2b02      	cmp	r3, #2
 8002516:	d105      	bne.n	8002524 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d002      	beq.n	8002524 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	3b01      	subs	r3, #1
 8002522:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	1c5a      	adds	r2, r3, #1
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800252c:	697b      	ldr	r3, [r7, #20]
}
 800252e:	4618      	mov	r0, r3
 8002530:	3718      	adds	r7, #24
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b082      	sub	sp, #8
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
 800253e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002544:	2b00      	cmp	r3, #0
 8002546:	d018      	beq.n	800257a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	68da      	ldr	r2, [r3, #12]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002550:	441a      	add	r2, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	68da      	ldr	r2, [r3, #12]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	429a      	cmp	r2, r3
 8002560:	d303      	bcc.n	800256a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	68d9      	ldr	r1, [r3, #12]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002572:	461a      	mov	r2, r3
 8002574:	6838      	ldr	r0, [r7, #0]
 8002576:	f001 ff45 	bl	8004404 <memcpy>
	}
}
 800257a:	bf00      	nop
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002582:	b580      	push	{r7, lr}
 8002584:	b084      	sub	sp, #16
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800258a:	f001 fc27 	bl	8003ddc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002594:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002596:	e011      	b.n	80025bc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259c:	2b00      	cmp	r3, #0
 800259e:	d012      	beq.n	80025c6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	3324      	adds	r3, #36	; 0x24
 80025a4:	4618      	mov	r0, r3
 80025a6:	f000 fd1b 	bl	8002fe0 <xTaskRemoveFromEventList>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d001      	beq.n	80025b4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80025b0:	f000 fdee 	bl	8003190 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80025b4:	7bfb      	ldrb	r3, [r7, #15]
 80025b6:	3b01      	subs	r3, #1
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80025bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	dce9      	bgt.n	8002598 <prvUnlockQueue+0x16>
 80025c4:	e000      	b.n	80025c8 <prvUnlockQueue+0x46>
					break;
 80025c6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	22ff      	movs	r2, #255	; 0xff
 80025cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80025d0:	f001 fc32 	bl	8003e38 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80025d4:	f001 fc02 	bl	8003ddc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80025de:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80025e0:	e011      	b.n	8002606 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d012      	beq.n	8002610 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	3310      	adds	r3, #16
 80025ee:	4618      	mov	r0, r3
 80025f0:	f000 fcf6 	bl	8002fe0 <xTaskRemoveFromEventList>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80025fa:	f000 fdc9 	bl	8003190 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80025fe:	7bbb      	ldrb	r3, [r7, #14]
 8002600:	3b01      	subs	r3, #1
 8002602:	b2db      	uxtb	r3, r3
 8002604:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002606:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800260a:	2b00      	cmp	r3, #0
 800260c:	dce9      	bgt.n	80025e2 <prvUnlockQueue+0x60>
 800260e:	e000      	b.n	8002612 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002610:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	22ff      	movs	r2, #255	; 0xff
 8002616:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800261a:	f001 fc0d 	bl	8003e38 <vPortExitCritical>
}
 800261e:	bf00      	nop
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}

08002626 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002626:	b580      	push	{r7, lr}
 8002628:	b084      	sub	sp, #16
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800262e:	f001 fbd5 	bl	8003ddc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002636:	2b00      	cmp	r3, #0
 8002638:	d102      	bne.n	8002640 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800263a:	2301      	movs	r3, #1
 800263c:	60fb      	str	r3, [r7, #12]
 800263e:	e001      	b.n	8002644 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002640:	2300      	movs	r3, #0
 8002642:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002644:	f001 fbf8 	bl	8003e38 <vPortExitCritical>

	return xReturn;
 8002648:	68fb      	ldr	r3, [r7, #12]
}
 800264a:	4618      	mov	r0, r3
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b084      	sub	sp, #16
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800265a:	f001 fbbf 	bl	8003ddc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002666:	429a      	cmp	r2, r3
 8002668:	d102      	bne.n	8002670 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800266a:	2301      	movs	r3, #1
 800266c:	60fb      	str	r3, [r7, #12]
 800266e:	e001      	b.n	8002674 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002670:	2300      	movs	r3, #0
 8002672:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002674:	f001 fbe0 	bl	8003e38 <vPortExitCritical>

	return xReturn;
 8002678:	68fb      	ldr	r3, [r7, #12]
}
 800267a:	4618      	mov	r0, r3
 800267c:	3710      	adds	r7, #16
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
	...

08002684 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800268e:	2300      	movs	r3, #0
 8002690:	60fb      	str	r3, [r7, #12]
 8002692:	e014      	b.n	80026be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002694:	4a0e      	ldr	r2, [pc, #56]	; (80026d0 <vQueueAddToRegistry+0x4c>)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d10b      	bne.n	80026b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80026a0:	490b      	ldr	r1, [pc, #44]	; (80026d0 <vQueueAddToRegistry+0x4c>)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	683a      	ldr	r2, [r7, #0]
 80026a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80026aa:	4a09      	ldr	r2, [pc, #36]	; (80026d0 <vQueueAddToRegistry+0x4c>)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	00db      	lsls	r3, r3, #3
 80026b0:	4413      	add	r3, r2
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80026b6:	e005      	b.n	80026c4 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	3301      	adds	r3, #1
 80026bc:	60fb      	str	r3, [r7, #12]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2b07      	cmp	r3, #7
 80026c2:	d9e7      	bls.n	8002694 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80026c4:	bf00      	nop
 80026c6:	3714      	adds	r7, #20
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr
 80026d0:	20004950 	.word	0x20004950

080026d4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b086      	sub	sp, #24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80026e4:	f001 fb7a 	bl	8003ddc <vPortEnterCritical>
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80026ee:	b25b      	sxtb	r3, r3
 80026f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f4:	d103      	bne.n	80026fe <vQueueWaitForMessageRestricted+0x2a>
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002704:	b25b      	sxtb	r3, r3
 8002706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800270a:	d103      	bne.n	8002714 <vQueueWaitForMessageRestricted+0x40>
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002714:	f001 fb90 	bl	8003e38 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800271c:	2b00      	cmp	r3, #0
 800271e:	d106      	bne.n	800272e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	3324      	adds	r3, #36	; 0x24
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	68b9      	ldr	r1, [r7, #8]
 8002728:	4618      	mov	r0, r3
 800272a:	f000 fc2f 	bl	8002f8c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800272e:	6978      	ldr	r0, [r7, #20]
 8002730:	f7ff ff27 	bl	8002582 <prvUnlockQueue>
	}
 8002734:	bf00      	nop
 8002736:	3718      	adds	r7, #24
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800273c:	b580      	push	{r7, lr}
 800273e:	b08e      	sub	sp, #56	; 0x38
 8002740:	af04      	add	r7, sp, #16
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	607a      	str	r2, [r7, #4]
 8002748:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800274a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800274c:	2b00      	cmp	r3, #0
 800274e:	d109      	bne.n	8002764 <xTaskCreateStatic+0x28>
 8002750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002754:	f383 8811 	msr	BASEPRI, r3
 8002758:	f3bf 8f6f 	isb	sy
 800275c:	f3bf 8f4f 	dsb	sy
 8002760:	623b      	str	r3, [r7, #32]
 8002762:	e7fe      	b.n	8002762 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8002764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002766:	2b00      	cmp	r3, #0
 8002768:	d109      	bne.n	800277e <xTaskCreateStatic+0x42>
 800276a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800276e:	f383 8811 	msr	BASEPRI, r3
 8002772:	f3bf 8f6f 	isb	sy
 8002776:	f3bf 8f4f 	dsb	sy
 800277a:	61fb      	str	r3, [r7, #28]
 800277c:	e7fe      	b.n	800277c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800277e:	235c      	movs	r3, #92	; 0x5c
 8002780:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	2b5c      	cmp	r3, #92	; 0x5c
 8002786:	d009      	beq.n	800279c <xTaskCreateStatic+0x60>
 8002788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800278c:	f383 8811 	msr	BASEPRI, r3
 8002790:	f3bf 8f6f 	isb	sy
 8002794:	f3bf 8f4f 	dsb	sy
 8002798:	61bb      	str	r3, [r7, #24]
 800279a:	e7fe      	b.n	800279a <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800279c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800279e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d01e      	beq.n	80027e2 <xTaskCreateStatic+0xa6>
 80027a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d01b      	beq.n	80027e2 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80027aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ac:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80027ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027b2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80027b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b6:	2202      	movs	r2, #2
 80027b8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80027bc:	2300      	movs	r3, #0
 80027be:	9303      	str	r3, [sp, #12]
 80027c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c2:	9302      	str	r3, [sp, #8]
 80027c4:	f107 0314 	add.w	r3, r7, #20
 80027c8:	9301      	str	r3, [sp, #4]
 80027ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027cc:	9300      	str	r3, [sp, #0]
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	68b9      	ldr	r1, [r7, #8]
 80027d4:	68f8      	ldr	r0, [r7, #12]
 80027d6:	f000 f850 	bl	800287a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80027da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80027dc:	f000 f8dc 	bl	8002998 <prvAddNewTaskToReadyList>
 80027e0:	e001      	b.n	80027e6 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80027e2:	2300      	movs	r3, #0
 80027e4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80027e6:	697b      	ldr	r3, [r7, #20]
	}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3728      	adds	r7, #40	; 0x28
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b08c      	sub	sp, #48	; 0x30
 80027f4:	af04      	add	r7, sp, #16
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	603b      	str	r3, [r7, #0]
 80027fc:	4613      	mov	r3, r2
 80027fe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002800:	88fb      	ldrh	r3, [r7, #6]
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	4618      	mov	r0, r3
 8002806:	f001 fc03 	bl	8004010 <pvPortMalloc>
 800280a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d00e      	beq.n	8002830 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002812:	205c      	movs	r0, #92	; 0x5c
 8002814:	f001 fbfc 	bl	8004010 <pvPortMalloc>
 8002818:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d003      	beq.n	8002828 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	697a      	ldr	r2, [r7, #20]
 8002824:	631a      	str	r2, [r3, #48]	; 0x30
 8002826:	e005      	b.n	8002834 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002828:	6978      	ldr	r0, [r7, #20]
 800282a:	f001 fcb3 	bl	8004194 <vPortFree>
 800282e:	e001      	b.n	8002834 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002830:	2300      	movs	r3, #0
 8002832:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d017      	beq.n	800286a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002842:	88fa      	ldrh	r2, [r7, #6]
 8002844:	2300      	movs	r3, #0
 8002846:	9303      	str	r3, [sp, #12]
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	9302      	str	r3, [sp, #8]
 800284c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800284e:	9301      	str	r3, [sp, #4]
 8002850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002852:	9300      	str	r3, [sp, #0]
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	68b9      	ldr	r1, [r7, #8]
 8002858:	68f8      	ldr	r0, [r7, #12]
 800285a:	f000 f80e 	bl	800287a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800285e:	69f8      	ldr	r0, [r7, #28]
 8002860:	f000 f89a 	bl	8002998 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002864:	2301      	movs	r3, #1
 8002866:	61bb      	str	r3, [r7, #24]
 8002868:	e002      	b.n	8002870 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800286a:	f04f 33ff 	mov.w	r3, #4294967295
 800286e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002870:	69bb      	ldr	r3, [r7, #24]
	}
 8002872:	4618      	mov	r0, r3
 8002874:	3720      	adds	r7, #32
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800287a:	b580      	push	{r7, lr}
 800287c:	b088      	sub	sp, #32
 800287e:	af00      	add	r7, sp, #0
 8002880:	60f8      	str	r0, [r7, #12]
 8002882:	60b9      	str	r1, [r7, #8]
 8002884:	607a      	str	r2, [r7, #4]
 8002886:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800288a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	461a      	mov	r2, r3
 8002892:	21a5      	movs	r1, #165	; 0xa5
 8002894:	f001 fdc1 	bl	800441a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800289a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80028a2:	3b01      	subs	r3, #1
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	4413      	add	r3, r2
 80028a8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	f023 0307 	bic.w	r3, r3, #7
 80028b0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	f003 0307 	and.w	r3, r3, #7
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d009      	beq.n	80028d0 <prvInitialiseNewTask+0x56>
 80028bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028c0:	f383 8811 	msr	BASEPRI, r3
 80028c4:	f3bf 8f6f 	isb	sy
 80028c8:	f3bf 8f4f 	dsb	sy
 80028cc:	617b      	str	r3, [r7, #20]
 80028ce:	e7fe      	b.n	80028ce <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d01f      	beq.n	8002916 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80028d6:	2300      	movs	r3, #0
 80028d8:	61fb      	str	r3, [r7, #28]
 80028da:	e012      	b.n	8002902 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80028dc:	68ba      	ldr	r2, [r7, #8]
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	4413      	add	r3, r2
 80028e2:	7819      	ldrb	r1, [r3, #0]
 80028e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	4413      	add	r3, r2
 80028ea:	3334      	adds	r3, #52	; 0x34
 80028ec:	460a      	mov	r2, r1
 80028ee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80028f0:	68ba      	ldr	r2, [r7, #8]
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	4413      	add	r3, r2
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d006      	beq.n	800290a <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	3301      	adds	r3, #1
 8002900:	61fb      	str	r3, [r7, #28]
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	2b0f      	cmp	r3, #15
 8002906:	d9e9      	bls.n	80028dc <prvInitialiseNewTask+0x62>
 8002908:	e000      	b.n	800290c <prvInitialiseNewTask+0x92>
			{
				break;
 800290a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800290c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800290e:	2200      	movs	r2, #0
 8002910:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002914:	e003      	b.n	800291e <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002918:	2200      	movs	r2, #0
 800291a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800291e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002920:	2b37      	cmp	r3, #55	; 0x37
 8002922:	d901      	bls.n	8002928 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002924:	2337      	movs	r3, #55	; 0x37
 8002926:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800292a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800292c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800292e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002930:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002932:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002936:	2200      	movs	r2, #0
 8002938:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800293a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800293c:	3304      	adds	r3, #4
 800293e:	4618      	mov	r0, r3
 8002940:	f7ff f8e2 	bl	8001b08 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002946:	3318      	adds	r3, #24
 8002948:	4618      	mov	r0, r3
 800294a:	f7ff f8dd 	bl	8001b08 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800294e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002950:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002952:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002956:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800295a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800295c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800295e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002960:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002962:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002966:	2200      	movs	r2, #0
 8002968:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800296a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800296c:	2200      	movs	r2, #0
 800296e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	68f9      	ldr	r1, [r7, #12]
 8002976:	69b8      	ldr	r0, [r7, #24]
 8002978:	f001 f90c 	bl	8003b94 <pxPortInitialiseStack>
 800297c:	4602      	mov	r2, r0
 800297e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002980:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002984:	2b00      	cmp	r3, #0
 8002986:	d002      	beq.n	800298e <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800298a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800298c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800298e:	bf00      	nop
 8002990:	3720      	adds	r7, #32
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
	...

08002998 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80029a0:	f001 fa1c 	bl	8003ddc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80029a4:	4b2d      	ldr	r3, [pc, #180]	; (8002a5c <prvAddNewTaskToReadyList+0xc4>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	3301      	adds	r3, #1
 80029aa:	4a2c      	ldr	r2, [pc, #176]	; (8002a5c <prvAddNewTaskToReadyList+0xc4>)
 80029ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80029ae:	4b2c      	ldr	r3, [pc, #176]	; (8002a60 <prvAddNewTaskToReadyList+0xc8>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d109      	bne.n	80029ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80029b6:	4a2a      	ldr	r2, [pc, #168]	; (8002a60 <prvAddNewTaskToReadyList+0xc8>)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80029bc:	4b27      	ldr	r3, [pc, #156]	; (8002a5c <prvAddNewTaskToReadyList+0xc4>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d110      	bne.n	80029e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80029c4:	f000 fc08 	bl	80031d8 <prvInitialiseTaskLists>
 80029c8:	e00d      	b.n	80029e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80029ca:	4b26      	ldr	r3, [pc, #152]	; (8002a64 <prvAddNewTaskToReadyList+0xcc>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d109      	bne.n	80029e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80029d2:	4b23      	ldr	r3, [pc, #140]	; (8002a60 <prvAddNewTaskToReadyList+0xc8>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029dc:	429a      	cmp	r2, r3
 80029de:	d802      	bhi.n	80029e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80029e0:	4a1f      	ldr	r2, [pc, #124]	; (8002a60 <prvAddNewTaskToReadyList+0xc8>)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80029e6:	4b20      	ldr	r3, [pc, #128]	; (8002a68 <prvAddNewTaskToReadyList+0xd0>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	3301      	adds	r3, #1
 80029ec:	4a1e      	ldr	r2, [pc, #120]	; (8002a68 <prvAddNewTaskToReadyList+0xd0>)
 80029ee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80029f0:	4b1d      	ldr	r3, [pc, #116]	; (8002a68 <prvAddNewTaskToReadyList+0xd0>)
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029fc:	4b1b      	ldr	r3, [pc, #108]	; (8002a6c <prvAddNewTaskToReadyList+0xd4>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d903      	bls.n	8002a0c <prvAddNewTaskToReadyList+0x74>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a08:	4a18      	ldr	r2, [pc, #96]	; (8002a6c <prvAddNewTaskToReadyList+0xd4>)
 8002a0a:	6013      	str	r3, [r2, #0]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a10:	4613      	mov	r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	4413      	add	r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	4a15      	ldr	r2, [pc, #84]	; (8002a70 <prvAddNewTaskToReadyList+0xd8>)
 8002a1a:	441a      	add	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	3304      	adds	r3, #4
 8002a20:	4619      	mov	r1, r3
 8002a22:	4610      	mov	r0, r2
 8002a24:	f7ff f87d 	bl	8001b22 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002a28:	f001 fa06 	bl	8003e38 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002a2c:	4b0d      	ldr	r3, [pc, #52]	; (8002a64 <prvAddNewTaskToReadyList+0xcc>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d00e      	beq.n	8002a52 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002a34:	4b0a      	ldr	r3, [pc, #40]	; (8002a60 <prvAddNewTaskToReadyList+0xc8>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d207      	bcs.n	8002a52 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002a42:	4b0c      	ldr	r3, [pc, #48]	; (8002a74 <prvAddNewTaskToReadyList+0xdc>)
 8002a44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a48:	601a      	str	r2, [r3, #0]
 8002a4a:	f3bf 8f4f 	dsb	sy
 8002a4e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002a52:	bf00      	nop
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	20000bc0 	.word	0x20000bc0
 8002a60:	200006ec 	.word	0x200006ec
 8002a64:	20000bcc 	.word	0x20000bcc
 8002a68:	20000bdc 	.word	0x20000bdc
 8002a6c:	20000bc8 	.word	0x20000bc8
 8002a70:	200006f0 	.word	0x200006f0
 8002a74:	e000ed04 	.word	0xe000ed04

08002a78 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002a80:	2300      	movs	r3, #0
 8002a82:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d016      	beq.n	8002ab8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002a8a:	4b13      	ldr	r3, [pc, #76]	; (8002ad8 <vTaskDelay+0x60>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d009      	beq.n	8002aa6 <vTaskDelay+0x2e>
 8002a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a96:	f383 8811 	msr	BASEPRI, r3
 8002a9a:	f3bf 8f6f 	isb	sy
 8002a9e:	f3bf 8f4f 	dsb	sy
 8002aa2:	60bb      	str	r3, [r7, #8]
 8002aa4:	e7fe      	b.n	8002aa4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8002aa6:	f000 f87f 	bl	8002ba8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002aaa:	2100      	movs	r1, #0
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f000 fcd7 	bl	8003460 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002ab2:	f000 f887 	bl	8002bc4 <xTaskResumeAll>
 8002ab6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d107      	bne.n	8002ace <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8002abe:	4b07      	ldr	r3, [pc, #28]	; (8002adc <vTaskDelay+0x64>)
 8002ac0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ac4:	601a      	str	r2, [r3, #0]
 8002ac6:	f3bf 8f4f 	dsb	sy
 8002aca:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002ace:	bf00      	nop
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	20000be8 	.word	0x20000be8
 8002adc:	e000ed04 	.word	0xe000ed04

08002ae0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b08a      	sub	sp, #40	; 0x28
 8002ae4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002aea:	2300      	movs	r3, #0
 8002aec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002aee:	463a      	mov	r2, r7
 8002af0:	1d39      	adds	r1, r7, #4
 8002af2:	f107 0308 	add.w	r3, r7, #8
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7fe ffb2 	bl	8001a60 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002afc:	6839      	ldr	r1, [r7, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	68ba      	ldr	r2, [r7, #8]
 8002b02:	9202      	str	r2, [sp, #8]
 8002b04:	9301      	str	r3, [sp, #4]
 8002b06:	2300      	movs	r3, #0
 8002b08:	9300      	str	r3, [sp, #0]
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	460a      	mov	r2, r1
 8002b0e:	4920      	ldr	r1, [pc, #128]	; (8002b90 <vTaskStartScheduler+0xb0>)
 8002b10:	4820      	ldr	r0, [pc, #128]	; (8002b94 <vTaskStartScheduler+0xb4>)
 8002b12:	f7ff fe13 	bl	800273c <xTaskCreateStatic>
 8002b16:	4602      	mov	r2, r0
 8002b18:	4b1f      	ldr	r3, [pc, #124]	; (8002b98 <vTaskStartScheduler+0xb8>)
 8002b1a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002b1c:	4b1e      	ldr	r3, [pc, #120]	; (8002b98 <vTaskStartScheduler+0xb8>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d002      	beq.n	8002b2a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002b24:	2301      	movs	r3, #1
 8002b26:	617b      	str	r3, [r7, #20]
 8002b28:	e001      	b.n	8002b2e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d102      	bne.n	8002b3a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002b34:	f000 fce8 	bl	8003508 <xTimerCreateTimerTask>
 8002b38:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d115      	bne.n	8002b6c <vTaskStartScheduler+0x8c>
 8002b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b44:	f383 8811 	msr	BASEPRI, r3
 8002b48:	f3bf 8f6f 	isb	sy
 8002b4c:	f3bf 8f4f 	dsb	sy
 8002b50:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002b52:	4b12      	ldr	r3, [pc, #72]	; (8002b9c <vTaskStartScheduler+0xbc>)
 8002b54:	f04f 32ff 	mov.w	r2, #4294967295
 8002b58:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002b5a:	4b11      	ldr	r3, [pc, #68]	; (8002ba0 <vTaskStartScheduler+0xc0>)
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002b60:	4b10      	ldr	r3, [pc, #64]	; (8002ba4 <vTaskStartScheduler+0xc4>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002b66:	f001 f89b 	bl	8003ca0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002b6a:	e00d      	b.n	8002b88 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b72:	d109      	bne.n	8002b88 <vTaskStartScheduler+0xa8>
 8002b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b78:	f383 8811 	msr	BASEPRI, r3
 8002b7c:	f3bf 8f6f 	isb	sy
 8002b80:	f3bf 8f4f 	dsb	sy
 8002b84:	60fb      	str	r3, [r7, #12]
 8002b86:	e7fe      	b.n	8002b86 <vTaskStartScheduler+0xa6>
}
 8002b88:	bf00      	nop
 8002b8a:	3718      	adds	r7, #24
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	08004468 	.word	0x08004468
 8002b94:	080031a9 	.word	0x080031a9
 8002b98:	20000be4 	.word	0x20000be4
 8002b9c:	20000be0 	.word	0x20000be0
 8002ba0:	20000bcc 	.word	0x20000bcc
 8002ba4:	20000bc4 	.word	0x20000bc4

08002ba8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002bac:	4b04      	ldr	r3, [pc, #16]	; (8002bc0 <vTaskSuspendAll+0x18>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	4a03      	ldr	r2, [pc, #12]	; (8002bc0 <vTaskSuspendAll+0x18>)
 8002bb4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8002bb6:	bf00      	nop
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr
 8002bc0:	20000be8 	.word	0x20000be8

08002bc4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002bd2:	4b41      	ldr	r3, [pc, #260]	; (8002cd8 <xTaskResumeAll+0x114>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d109      	bne.n	8002bee <xTaskResumeAll+0x2a>
 8002bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bde:	f383 8811 	msr	BASEPRI, r3
 8002be2:	f3bf 8f6f 	isb	sy
 8002be6:	f3bf 8f4f 	dsb	sy
 8002bea:	603b      	str	r3, [r7, #0]
 8002bec:	e7fe      	b.n	8002bec <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002bee:	f001 f8f5 	bl	8003ddc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002bf2:	4b39      	ldr	r3, [pc, #228]	; (8002cd8 <xTaskResumeAll+0x114>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	4a37      	ldr	r2, [pc, #220]	; (8002cd8 <xTaskResumeAll+0x114>)
 8002bfa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002bfc:	4b36      	ldr	r3, [pc, #216]	; (8002cd8 <xTaskResumeAll+0x114>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d162      	bne.n	8002cca <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002c04:	4b35      	ldr	r3, [pc, #212]	; (8002cdc <xTaskResumeAll+0x118>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d05e      	beq.n	8002cca <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c0c:	e02f      	b.n	8002c6e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c0e:	4b34      	ldr	r3, [pc, #208]	; (8002ce0 <xTaskResumeAll+0x11c>)
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	3318      	adds	r3, #24
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7fe ffde 	bl	8001bdc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	3304      	adds	r3, #4
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7fe ffd9 	bl	8001bdc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c2e:	4b2d      	ldr	r3, [pc, #180]	; (8002ce4 <xTaskResumeAll+0x120>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d903      	bls.n	8002c3e <xTaskResumeAll+0x7a>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3a:	4a2a      	ldr	r2, [pc, #168]	; (8002ce4 <xTaskResumeAll+0x120>)
 8002c3c:	6013      	str	r3, [r2, #0]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c42:	4613      	mov	r3, r2
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	4413      	add	r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	4a27      	ldr	r2, [pc, #156]	; (8002ce8 <xTaskResumeAll+0x124>)
 8002c4c:	441a      	add	r2, r3
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	3304      	adds	r3, #4
 8002c52:	4619      	mov	r1, r3
 8002c54:	4610      	mov	r0, r2
 8002c56:	f7fe ff64 	bl	8001b22 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c5e:	4b23      	ldr	r3, [pc, #140]	; (8002cec <xTaskResumeAll+0x128>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d302      	bcc.n	8002c6e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002c68:	4b21      	ldr	r3, [pc, #132]	; (8002cf0 <xTaskResumeAll+0x12c>)
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c6e:	4b1c      	ldr	r3, [pc, #112]	; (8002ce0 <xTaskResumeAll+0x11c>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1cb      	bne.n	8002c0e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d001      	beq.n	8002c80 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002c7c:	f000 fb46 	bl	800330c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002c80:	4b1c      	ldr	r3, [pc, #112]	; (8002cf4 <xTaskResumeAll+0x130>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d010      	beq.n	8002cae <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002c8c:	f000 f846 	bl	8002d1c <xTaskIncrementTick>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d002      	beq.n	8002c9c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8002c96:	4b16      	ldr	r3, [pc, #88]	; (8002cf0 <xTaskResumeAll+0x12c>)
 8002c98:	2201      	movs	r2, #1
 8002c9a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d1f1      	bne.n	8002c8c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8002ca8:	4b12      	ldr	r3, [pc, #72]	; (8002cf4 <xTaskResumeAll+0x130>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002cae:	4b10      	ldr	r3, [pc, #64]	; (8002cf0 <xTaskResumeAll+0x12c>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d009      	beq.n	8002cca <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002cba:	4b0f      	ldr	r3, [pc, #60]	; (8002cf8 <xTaskResumeAll+0x134>)
 8002cbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cc0:	601a      	str	r2, [r3, #0]
 8002cc2:	f3bf 8f4f 	dsb	sy
 8002cc6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002cca:	f001 f8b5 	bl	8003e38 <vPortExitCritical>

	return xAlreadyYielded;
 8002cce:	68bb      	ldr	r3, [r7, #8]
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3710      	adds	r7, #16
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	20000be8 	.word	0x20000be8
 8002cdc:	20000bc0 	.word	0x20000bc0
 8002ce0:	20000b80 	.word	0x20000b80
 8002ce4:	20000bc8 	.word	0x20000bc8
 8002ce8:	200006f0 	.word	0x200006f0
 8002cec:	200006ec 	.word	0x200006ec
 8002cf0:	20000bd4 	.word	0x20000bd4
 8002cf4:	20000bd0 	.word	0x20000bd0
 8002cf8:	e000ed04 	.word	0xe000ed04

08002cfc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002d02:	4b05      	ldr	r3, [pc, #20]	; (8002d18 <xTaskGetTickCount+0x1c>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002d08:	687b      	ldr	r3, [r7, #4]
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	20000bc4 	.word	0x20000bc4

08002d1c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b086      	sub	sp, #24
 8002d20:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002d22:	2300      	movs	r3, #0
 8002d24:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d26:	4b4e      	ldr	r3, [pc, #312]	; (8002e60 <xTaskIncrementTick+0x144>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f040 8088 	bne.w	8002e40 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002d30:	4b4c      	ldr	r3, [pc, #304]	; (8002e64 <xTaskIncrementTick+0x148>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	3301      	adds	r3, #1
 8002d36:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002d38:	4a4a      	ldr	r2, [pc, #296]	; (8002e64 <xTaskIncrementTick+0x148>)
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d11f      	bne.n	8002d84 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8002d44:	4b48      	ldr	r3, [pc, #288]	; (8002e68 <xTaskIncrementTick+0x14c>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d009      	beq.n	8002d62 <xTaskIncrementTick+0x46>
 8002d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d52:	f383 8811 	msr	BASEPRI, r3
 8002d56:	f3bf 8f6f 	isb	sy
 8002d5a:	f3bf 8f4f 	dsb	sy
 8002d5e:	603b      	str	r3, [r7, #0]
 8002d60:	e7fe      	b.n	8002d60 <xTaskIncrementTick+0x44>
 8002d62:	4b41      	ldr	r3, [pc, #260]	; (8002e68 <xTaskIncrementTick+0x14c>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	60fb      	str	r3, [r7, #12]
 8002d68:	4b40      	ldr	r3, [pc, #256]	; (8002e6c <xTaskIncrementTick+0x150>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a3e      	ldr	r2, [pc, #248]	; (8002e68 <xTaskIncrementTick+0x14c>)
 8002d6e:	6013      	str	r3, [r2, #0]
 8002d70:	4a3e      	ldr	r2, [pc, #248]	; (8002e6c <xTaskIncrementTick+0x150>)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6013      	str	r3, [r2, #0]
 8002d76:	4b3e      	ldr	r3, [pc, #248]	; (8002e70 <xTaskIncrementTick+0x154>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	4a3c      	ldr	r2, [pc, #240]	; (8002e70 <xTaskIncrementTick+0x154>)
 8002d7e:	6013      	str	r3, [r2, #0]
 8002d80:	f000 fac4 	bl	800330c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002d84:	4b3b      	ldr	r3, [pc, #236]	; (8002e74 <xTaskIncrementTick+0x158>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	693a      	ldr	r2, [r7, #16]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d349      	bcc.n	8002e22 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d8e:	4b36      	ldr	r3, [pc, #216]	; (8002e68 <xTaskIncrementTick+0x14c>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d104      	bne.n	8002da2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d98:	4b36      	ldr	r3, [pc, #216]	; (8002e74 <xTaskIncrementTick+0x158>)
 8002d9a:	f04f 32ff 	mov.w	r2, #4294967295
 8002d9e:	601a      	str	r2, [r3, #0]
					break;
 8002da0:	e03f      	b.n	8002e22 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002da2:	4b31      	ldr	r3, [pc, #196]	; (8002e68 <xTaskIncrementTick+0x14c>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002db2:	693a      	ldr	r2, [r7, #16]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d203      	bcs.n	8002dc2 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002dba:	4a2e      	ldr	r2, [pc, #184]	; (8002e74 <xTaskIncrementTick+0x158>)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002dc0:	e02f      	b.n	8002e22 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	3304      	adds	r3, #4
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7fe ff08 	bl	8001bdc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d004      	beq.n	8002dde <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	3318      	adds	r3, #24
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7fe feff 	bl	8001bdc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002de2:	4b25      	ldr	r3, [pc, #148]	; (8002e78 <xTaskIncrementTick+0x15c>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d903      	bls.n	8002df2 <xTaskIncrementTick+0xd6>
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dee:	4a22      	ldr	r2, [pc, #136]	; (8002e78 <xTaskIncrementTick+0x15c>)
 8002df0:	6013      	str	r3, [r2, #0]
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002df6:	4613      	mov	r3, r2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	4413      	add	r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	4a1f      	ldr	r2, [pc, #124]	; (8002e7c <xTaskIncrementTick+0x160>)
 8002e00:	441a      	add	r2, r3
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	3304      	adds	r3, #4
 8002e06:	4619      	mov	r1, r3
 8002e08:	4610      	mov	r0, r2
 8002e0a:	f7fe fe8a 	bl	8001b22 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e12:	4b1b      	ldr	r3, [pc, #108]	; (8002e80 <xTaskIncrementTick+0x164>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d3b8      	bcc.n	8002d8e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e20:	e7b5      	b.n	8002d8e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002e22:	4b17      	ldr	r3, [pc, #92]	; (8002e80 <xTaskIncrementTick+0x164>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e28:	4914      	ldr	r1, [pc, #80]	; (8002e7c <xTaskIncrementTick+0x160>)
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	4413      	add	r3, r2
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	440b      	add	r3, r1
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d907      	bls.n	8002e4a <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	617b      	str	r3, [r7, #20]
 8002e3e:	e004      	b.n	8002e4a <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002e40:	4b10      	ldr	r3, [pc, #64]	; (8002e84 <xTaskIncrementTick+0x168>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	3301      	adds	r3, #1
 8002e46:	4a0f      	ldr	r2, [pc, #60]	; (8002e84 <xTaskIncrementTick+0x168>)
 8002e48:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002e4a:	4b0f      	ldr	r3, [pc, #60]	; (8002e88 <xTaskIncrementTick+0x16c>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8002e52:	2301      	movs	r3, #1
 8002e54:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002e56:	697b      	ldr	r3, [r7, #20]
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3718      	adds	r7, #24
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	20000be8 	.word	0x20000be8
 8002e64:	20000bc4 	.word	0x20000bc4
 8002e68:	20000b78 	.word	0x20000b78
 8002e6c:	20000b7c 	.word	0x20000b7c
 8002e70:	20000bd8 	.word	0x20000bd8
 8002e74:	20000be0 	.word	0x20000be0
 8002e78:	20000bc8 	.word	0x20000bc8
 8002e7c:	200006f0 	.word	0x200006f0
 8002e80:	200006ec 	.word	0x200006ec
 8002e84:	20000bd0 	.word	0x20000bd0
 8002e88:	20000bd4 	.word	0x20000bd4

08002e8c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b085      	sub	sp, #20
 8002e90:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002e92:	4b27      	ldr	r3, [pc, #156]	; (8002f30 <vTaskSwitchContext+0xa4>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d003      	beq.n	8002ea2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002e9a:	4b26      	ldr	r3, [pc, #152]	; (8002f34 <vTaskSwitchContext+0xa8>)
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002ea0:	e040      	b.n	8002f24 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8002ea2:	4b24      	ldr	r3, [pc, #144]	; (8002f34 <vTaskSwitchContext+0xa8>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ea8:	4b23      	ldr	r3, [pc, #140]	; (8002f38 <vTaskSwitchContext+0xac>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	60fb      	str	r3, [r7, #12]
 8002eae:	e00f      	b.n	8002ed0 <vTaskSwitchContext+0x44>
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d109      	bne.n	8002eca <vTaskSwitchContext+0x3e>
 8002eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eba:	f383 8811 	msr	BASEPRI, r3
 8002ebe:	f3bf 8f6f 	isb	sy
 8002ec2:	f3bf 8f4f 	dsb	sy
 8002ec6:	607b      	str	r3, [r7, #4]
 8002ec8:	e7fe      	b.n	8002ec8 <vTaskSwitchContext+0x3c>
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	3b01      	subs	r3, #1
 8002ece:	60fb      	str	r3, [r7, #12]
 8002ed0:	491a      	ldr	r1, [pc, #104]	; (8002f3c <vTaskSwitchContext+0xb0>)
 8002ed2:	68fa      	ldr	r2, [r7, #12]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	4413      	add	r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	440b      	add	r3, r1
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d0e5      	beq.n	8002eb0 <vTaskSwitchContext+0x24>
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	4413      	add	r3, r2
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	4a13      	ldr	r2, [pc, #76]	; (8002f3c <vTaskSwitchContext+0xb0>)
 8002ef0:	4413      	add	r3, r2
 8002ef2:	60bb      	str	r3, [r7, #8]
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	685a      	ldr	r2, [r3, #4]
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	605a      	str	r2, [r3, #4]
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	685a      	ldr	r2, [r3, #4]
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	3308      	adds	r3, #8
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d104      	bne.n	8002f14 <vTaskSwitchContext+0x88>
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	685a      	ldr	r2, [r3, #4]
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	605a      	str	r2, [r3, #4]
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	4a09      	ldr	r2, [pc, #36]	; (8002f40 <vTaskSwitchContext+0xb4>)
 8002f1c:	6013      	str	r3, [r2, #0]
 8002f1e:	4a06      	ldr	r2, [pc, #24]	; (8002f38 <vTaskSwitchContext+0xac>)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6013      	str	r3, [r2, #0]
}
 8002f24:	bf00      	nop
 8002f26:	3714      	adds	r7, #20
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr
 8002f30:	20000be8 	.word	0x20000be8
 8002f34:	20000bd4 	.word	0x20000bd4
 8002f38:	20000bc8 	.word	0x20000bc8
 8002f3c:	200006f0 	.word	0x200006f0
 8002f40:	200006ec 	.word	0x200006ec

08002f44 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d109      	bne.n	8002f68 <vTaskPlaceOnEventList+0x24>
 8002f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f58:	f383 8811 	msr	BASEPRI, r3
 8002f5c:	f3bf 8f6f 	isb	sy
 8002f60:	f3bf 8f4f 	dsb	sy
 8002f64:	60fb      	str	r3, [r7, #12]
 8002f66:	e7fe      	b.n	8002f66 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002f68:	4b07      	ldr	r3, [pc, #28]	; (8002f88 <vTaskPlaceOnEventList+0x44>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	3318      	adds	r3, #24
 8002f6e:	4619      	mov	r1, r3
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f7fe fdfa 	bl	8001b6a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002f76:	2101      	movs	r1, #1
 8002f78:	6838      	ldr	r0, [r7, #0]
 8002f7a:	f000 fa71 	bl	8003460 <prvAddCurrentTaskToDelayedList>
}
 8002f7e:	bf00      	nop
 8002f80:	3710      	adds	r7, #16
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	200006ec 	.word	0x200006ec

08002f8c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b086      	sub	sp, #24
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d109      	bne.n	8002fb2 <vTaskPlaceOnEventListRestricted+0x26>
 8002f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa2:	f383 8811 	msr	BASEPRI, r3
 8002fa6:	f3bf 8f6f 	isb	sy
 8002faa:	f3bf 8f4f 	dsb	sy
 8002fae:	617b      	str	r3, [r7, #20]
 8002fb0:	e7fe      	b.n	8002fb0 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002fb2:	4b0a      	ldr	r3, [pc, #40]	; (8002fdc <vTaskPlaceOnEventListRestricted+0x50>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	3318      	adds	r3, #24
 8002fb8:	4619      	mov	r1, r3
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	f7fe fdb1 	bl	8001b22 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d002      	beq.n	8002fcc <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8002fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8002fca:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002fcc:	6879      	ldr	r1, [r7, #4]
 8002fce:	68b8      	ldr	r0, [r7, #8]
 8002fd0:	f000 fa46 	bl	8003460 <prvAddCurrentTaskToDelayedList>
	}
 8002fd4:	bf00      	nop
 8002fd6:	3718      	adds	r7, #24
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	200006ec 	.word	0x200006ec

08002fe0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b086      	sub	sp, #24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d109      	bne.n	800300a <xTaskRemoveFromEventList+0x2a>
 8002ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ffa:	f383 8811 	msr	BASEPRI, r3
 8002ffe:	f3bf 8f6f 	isb	sy
 8003002:	f3bf 8f4f 	dsb	sy
 8003006:	60fb      	str	r3, [r7, #12]
 8003008:	e7fe      	b.n	8003008 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	3318      	adds	r3, #24
 800300e:	4618      	mov	r0, r3
 8003010:	f7fe fde4 	bl	8001bdc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003014:	4b1d      	ldr	r3, [pc, #116]	; (800308c <xTaskRemoveFromEventList+0xac>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d11d      	bne.n	8003058 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	3304      	adds	r3, #4
 8003020:	4618      	mov	r0, r3
 8003022:	f7fe fddb 	bl	8001bdc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800302a:	4b19      	ldr	r3, [pc, #100]	; (8003090 <xTaskRemoveFromEventList+0xb0>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	429a      	cmp	r2, r3
 8003030:	d903      	bls.n	800303a <xTaskRemoveFromEventList+0x5a>
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003036:	4a16      	ldr	r2, [pc, #88]	; (8003090 <xTaskRemoveFromEventList+0xb0>)
 8003038:	6013      	str	r3, [r2, #0]
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800303e:	4613      	mov	r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	4413      	add	r3, r2
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	4a13      	ldr	r2, [pc, #76]	; (8003094 <xTaskRemoveFromEventList+0xb4>)
 8003048:	441a      	add	r2, r3
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	3304      	adds	r3, #4
 800304e:	4619      	mov	r1, r3
 8003050:	4610      	mov	r0, r2
 8003052:	f7fe fd66 	bl	8001b22 <vListInsertEnd>
 8003056:	e005      	b.n	8003064 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	3318      	adds	r3, #24
 800305c:	4619      	mov	r1, r3
 800305e:	480e      	ldr	r0, [pc, #56]	; (8003098 <xTaskRemoveFromEventList+0xb8>)
 8003060:	f7fe fd5f 	bl	8001b22 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003068:	4b0c      	ldr	r3, [pc, #48]	; (800309c <xTaskRemoveFromEventList+0xbc>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800306e:	429a      	cmp	r2, r3
 8003070:	d905      	bls.n	800307e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003072:	2301      	movs	r3, #1
 8003074:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003076:	4b0a      	ldr	r3, [pc, #40]	; (80030a0 <xTaskRemoveFromEventList+0xc0>)
 8003078:	2201      	movs	r2, #1
 800307a:	601a      	str	r2, [r3, #0]
 800307c:	e001      	b.n	8003082 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800307e:	2300      	movs	r3, #0
 8003080:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003082:	697b      	ldr	r3, [r7, #20]
}
 8003084:	4618      	mov	r0, r3
 8003086:	3718      	adds	r7, #24
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	20000be8 	.word	0x20000be8
 8003090:	20000bc8 	.word	0x20000bc8
 8003094:	200006f0 	.word	0x200006f0
 8003098:	20000b80 	.word	0x20000b80
 800309c:	200006ec 	.word	0x200006ec
 80030a0:	20000bd4 	.word	0x20000bd4

080030a4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80030ac:	4b06      	ldr	r3, [pc, #24]	; (80030c8 <vTaskInternalSetTimeOutState+0x24>)
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80030b4:	4b05      	ldr	r3, [pc, #20]	; (80030cc <vTaskInternalSetTimeOutState+0x28>)
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	605a      	str	r2, [r3, #4]
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr
 80030c8:	20000bd8 	.word	0x20000bd8
 80030cc:	20000bc4 	.word	0x20000bc4

080030d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b088      	sub	sp, #32
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d109      	bne.n	80030f4 <xTaskCheckForTimeOut+0x24>
 80030e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e4:	f383 8811 	msr	BASEPRI, r3
 80030e8:	f3bf 8f6f 	isb	sy
 80030ec:	f3bf 8f4f 	dsb	sy
 80030f0:	613b      	str	r3, [r7, #16]
 80030f2:	e7fe      	b.n	80030f2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d109      	bne.n	800310e <xTaskCheckForTimeOut+0x3e>
 80030fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030fe:	f383 8811 	msr	BASEPRI, r3
 8003102:	f3bf 8f6f 	isb	sy
 8003106:	f3bf 8f4f 	dsb	sy
 800310a:	60fb      	str	r3, [r7, #12]
 800310c:	e7fe      	b.n	800310c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800310e:	f000 fe65 	bl	8003ddc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003112:	4b1d      	ldr	r3, [pc, #116]	; (8003188 <xTaskCheckForTimeOut+0xb8>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800312a:	d102      	bne.n	8003132 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800312c:	2300      	movs	r3, #0
 800312e:	61fb      	str	r3, [r7, #28]
 8003130:	e023      	b.n	800317a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	4b15      	ldr	r3, [pc, #84]	; (800318c <xTaskCheckForTimeOut+0xbc>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	429a      	cmp	r2, r3
 800313c:	d007      	beq.n	800314e <xTaskCheckForTimeOut+0x7e>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	69ba      	ldr	r2, [r7, #24]
 8003144:	429a      	cmp	r2, r3
 8003146:	d302      	bcc.n	800314e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003148:	2301      	movs	r3, #1
 800314a:	61fb      	str	r3, [r7, #28]
 800314c:	e015      	b.n	800317a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	429a      	cmp	r2, r3
 8003156:	d20b      	bcs.n	8003170 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	1ad2      	subs	r2, r2, r3
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f7ff ff9d 	bl	80030a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800316a:	2300      	movs	r3, #0
 800316c:	61fb      	str	r3, [r7, #28]
 800316e:	e004      	b.n	800317a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	2200      	movs	r2, #0
 8003174:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003176:	2301      	movs	r3, #1
 8003178:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800317a:	f000 fe5d 	bl	8003e38 <vPortExitCritical>

	return xReturn;
 800317e:	69fb      	ldr	r3, [r7, #28]
}
 8003180:	4618      	mov	r0, r3
 8003182:	3720      	adds	r7, #32
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	20000bc4 	.word	0x20000bc4
 800318c:	20000bd8 	.word	0x20000bd8

08003190 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003190:	b480      	push	{r7}
 8003192:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003194:	4b03      	ldr	r3, [pc, #12]	; (80031a4 <vTaskMissedYield+0x14>)
 8003196:	2201      	movs	r2, #1
 8003198:	601a      	str	r2, [r3, #0]
}
 800319a:	bf00      	nop
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr
 80031a4:	20000bd4 	.word	0x20000bd4

080031a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80031b0:	f000 f852 	bl	8003258 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80031b4:	4b06      	ldr	r3, [pc, #24]	; (80031d0 <prvIdleTask+0x28>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d9f9      	bls.n	80031b0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80031bc:	4b05      	ldr	r3, [pc, #20]	; (80031d4 <prvIdleTask+0x2c>)
 80031be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031c2:	601a      	str	r2, [r3, #0]
 80031c4:	f3bf 8f4f 	dsb	sy
 80031c8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80031cc:	e7f0      	b.n	80031b0 <prvIdleTask+0x8>
 80031ce:	bf00      	nop
 80031d0:	200006f0 	.word	0x200006f0
 80031d4:	e000ed04 	.word	0xe000ed04

080031d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80031de:	2300      	movs	r3, #0
 80031e0:	607b      	str	r3, [r7, #4]
 80031e2:	e00c      	b.n	80031fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	4613      	mov	r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	4413      	add	r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	4a12      	ldr	r2, [pc, #72]	; (8003238 <prvInitialiseTaskLists+0x60>)
 80031f0:	4413      	add	r3, r2
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7fe fc68 	bl	8001ac8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	3301      	adds	r3, #1
 80031fc:	607b      	str	r3, [r7, #4]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2b37      	cmp	r3, #55	; 0x37
 8003202:	d9ef      	bls.n	80031e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003204:	480d      	ldr	r0, [pc, #52]	; (800323c <prvInitialiseTaskLists+0x64>)
 8003206:	f7fe fc5f 	bl	8001ac8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800320a:	480d      	ldr	r0, [pc, #52]	; (8003240 <prvInitialiseTaskLists+0x68>)
 800320c:	f7fe fc5c 	bl	8001ac8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003210:	480c      	ldr	r0, [pc, #48]	; (8003244 <prvInitialiseTaskLists+0x6c>)
 8003212:	f7fe fc59 	bl	8001ac8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003216:	480c      	ldr	r0, [pc, #48]	; (8003248 <prvInitialiseTaskLists+0x70>)
 8003218:	f7fe fc56 	bl	8001ac8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800321c:	480b      	ldr	r0, [pc, #44]	; (800324c <prvInitialiseTaskLists+0x74>)
 800321e:	f7fe fc53 	bl	8001ac8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003222:	4b0b      	ldr	r3, [pc, #44]	; (8003250 <prvInitialiseTaskLists+0x78>)
 8003224:	4a05      	ldr	r2, [pc, #20]	; (800323c <prvInitialiseTaskLists+0x64>)
 8003226:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003228:	4b0a      	ldr	r3, [pc, #40]	; (8003254 <prvInitialiseTaskLists+0x7c>)
 800322a:	4a05      	ldr	r2, [pc, #20]	; (8003240 <prvInitialiseTaskLists+0x68>)
 800322c:	601a      	str	r2, [r3, #0]
}
 800322e:	bf00      	nop
 8003230:	3708      	adds	r7, #8
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	200006f0 	.word	0x200006f0
 800323c:	20000b50 	.word	0x20000b50
 8003240:	20000b64 	.word	0x20000b64
 8003244:	20000b80 	.word	0x20000b80
 8003248:	20000b94 	.word	0x20000b94
 800324c:	20000bac 	.word	0x20000bac
 8003250:	20000b78 	.word	0x20000b78
 8003254:	20000b7c 	.word	0x20000b7c

08003258 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800325e:	e019      	b.n	8003294 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003260:	f000 fdbc 	bl	8003ddc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003264:	4b0f      	ldr	r3, [pc, #60]	; (80032a4 <prvCheckTasksWaitingTermination+0x4c>)
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	3304      	adds	r3, #4
 8003270:	4618      	mov	r0, r3
 8003272:	f7fe fcb3 	bl	8001bdc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003276:	4b0c      	ldr	r3, [pc, #48]	; (80032a8 <prvCheckTasksWaitingTermination+0x50>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	3b01      	subs	r3, #1
 800327c:	4a0a      	ldr	r2, [pc, #40]	; (80032a8 <prvCheckTasksWaitingTermination+0x50>)
 800327e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003280:	4b0a      	ldr	r3, [pc, #40]	; (80032ac <prvCheckTasksWaitingTermination+0x54>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	3b01      	subs	r3, #1
 8003286:	4a09      	ldr	r2, [pc, #36]	; (80032ac <prvCheckTasksWaitingTermination+0x54>)
 8003288:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800328a:	f000 fdd5 	bl	8003e38 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 f80e 	bl	80032b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003294:	4b05      	ldr	r3, [pc, #20]	; (80032ac <prvCheckTasksWaitingTermination+0x54>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d1e1      	bne.n	8003260 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800329c:	bf00      	nop
 800329e:	3708      	adds	r7, #8
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	20000b94 	.word	0x20000b94
 80032a8:	20000bc0 	.word	0x20000bc0
 80032ac:	20000ba8 	.word	0x20000ba8

080032b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d108      	bne.n	80032d4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c6:	4618      	mov	r0, r3
 80032c8:	f000 ff64 	bl	8004194 <vPortFree>
				vPortFree( pxTCB );
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f000 ff61 	bl	8004194 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80032d2:	e017      	b.n	8003304 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d103      	bne.n	80032e6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 ff58 	bl	8004194 <vPortFree>
	}
 80032e4:	e00e      	b.n	8003304 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d009      	beq.n	8003304 <prvDeleteTCB+0x54>
 80032f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032f4:	f383 8811 	msr	BASEPRI, r3
 80032f8:	f3bf 8f6f 	isb	sy
 80032fc:	f3bf 8f4f 	dsb	sy
 8003300:	60fb      	str	r3, [r7, #12]
 8003302:	e7fe      	b.n	8003302 <prvDeleteTCB+0x52>
	}
 8003304:	bf00      	nop
 8003306:	3710      	adds	r7, #16
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003312:	4b0c      	ldr	r3, [pc, #48]	; (8003344 <prvResetNextTaskUnblockTime+0x38>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d104      	bne.n	8003326 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800331c:	4b0a      	ldr	r3, [pc, #40]	; (8003348 <prvResetNextTaskUnblockTime+0x3c>)
 800331e:	f04f 32ff 	mov.w	r2, #4294967295
 8003322:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003324:	e008      	b.n	8003338 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003326:	4b07      	ldr	r3, [pc, #28]	; (8003344 <prvResetNextTaskUnblockTime+0x38>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	4a04      	ldr	r2, [pc, #16]	; (8003348 <prvResetNextTaskUnblockTime+0x3c>)
 8003336:	6013      	str	r3, [r2, #0]
}
 8003338:	bf00      	nop
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr
 8003344:	20000b78 	.word	0x20000b78
 8003348:	20000be0 	.word	0x20000be0

0800334c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003352:	4b0b      	ldr	r3, [pc, #44]	; (8003380 <xTaskGetSchedulerState+0x34>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d102      	bne.n	8003360 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800335a:	2301      	movs	r3, #1
 800335c:	607b      	str	r3, [r7, #4]
 800335e:	e008      	b.n	8003372 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003360:	4b08      	ldr	r3, [pc, #32]	; (8003384 <xTaskGetSchedulerState+0x38>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d102      	bne.n	800336e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003368:	2302      	movs	r3, #2
 800336a:	607b      	str	r3, [r7, #4]
 800336c:	e001      	b.n	8003372 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800336e:	2300      	movs	r3, #0
 8003370:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003372:	687b      	ldr	r3, [r7, #4]
	}
 8003374:	4618      	mov	r0, r3
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr
 8003380:	20000bcc 	.word	0x20000bcc
 8003384:	20000be8 	.word	0x20000be8

08003388 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003388:	b580      	push	{r7, lr}
 800338a:	b086      	sub	sp, #24
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003394:	2300      	movs	r3, #0
 8003396:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d054      	beq.n	8003448 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800339e:	4b2d      	ldr	r3, [pc, #180]	; (8003454 <xTaskPriorityDisinherit+0xcc>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	693a      	ldr	r2, [r7, #16]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d009      	beq.n	80033bc <xTaskPriorityDisinherit+0x34>
 80033a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ac:	f383 8811 	msr	BASEPRI, r3
 80033b0:	f3bf 8f6f 	isb	sy
 80033b4:	f3bf 8f4f 	dsb	sy
 80033b8:	60fb      	str	r3, [r7, #12]
 80033ba:	e7fe      	b.n	80033ba <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d109      	bne.n	80033d8 <xTaskPriorityDisinherit+0x50>
 80033c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c8:	f383 8811 	msr	BASEPRI, r3
 80033cc:	f3bf 8f6f 	isb	sy
 80033d0:	f3bf 8f4f 	dsb	sy
 80033d4:	60bb      	str	r3, [r7, #8]
 80033d6:	e7fe      	b.n	80033d6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033dc:	1e5a      	subs	r2, r3, #1
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d02c      	beq.n	8003448 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d128      	bne.n	8003448 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	3304      	adds	r3, #4
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7fe fbee 	bl	8001bdc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003418:	4b0f      	ldr	r3, [pc, #60]	; (8003458 <xTaskPriorityDisinherit+0xd0>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	429a      	cmp	r2, r3
 800341e:	d903      	bls.n	8003428 <xTaskPriorityDisinherit+0xa0>
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003424:	4a0c      	ldr	r2, [pc, #48]	; (8003458 <xTaskPriorityDisinherit+0xd0>)
 8003426:	6013      	str	r3, [r2, #0]
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800342c:	4613      	mov	r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	4413      	add	r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	4a09      	ldr	r2, [pc, #36]	; (800345c <xTaskPriorityDisinherit+0xd4>)
 8003436:	441a      	add	r2, r3
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	3304      	adds	r3, #4
 800343c:	4619      	mov	r1, r3
 800343e:	4610      	mov	r0, r2
 8003440:	f7fe fb6f 	bl	8001b22 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003444:	2301      	movs	r3, #1
 8003446:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003448:	697b      	ldr	r3, [r7, #20]
	}
 800344a:	4618      	mov	r0, r3
 800344c:	3718      	adds	r7, #24
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	200006ec 	.word	0x200006ec
 8003458:	20000bc8 	.word	0x20000bc8
 800345c:	200006f0 	.word	0x200006f0

08003460 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800346a:	4b21      	ldr	r3, [pc, #132]	; (80034f0 <prvAddCurrentTaskToDelayedList+0x90>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003470:	4b20      	ldr	r3, [pc, #128]	; (80034f4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	3304      	adds	r3, #4
 8003476:	4618      	mov	r0, r3
 8003478:	f7fe fbb0 	bl	8001bdc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003482:	d10a      	bne.n	800349a <prvAddCurrentTaskToDelayedList+0x3a>
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d007      	beq.n	800349a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800348a:	4b1a      	ldr	r3, [pc, #104]	; (80034f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	3304      	adds	r3, #4
 8003490:	4619      	mov	r1, r3
 8003492:	4819      	ldr	r0, [pc, #100]	; (80034f8 <prvAddCurrentTaskToDelayedList+0x98>)
 8003494:	f7fe fb45 	bl	8001b22 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003498:	e026      	b.n	80034e8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	4413      	add	r3, r2
 80034a0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80034a2:	4b14      	ldr	r3, [pc, #80]	; (80034f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68ba      	ldr	r2, [r7, #8]
 80034a8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80034aa:	68ba      	ldr	r2, [r7, #8]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d209      	bcs.n	80034c6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80034b2:	4b12      	ldr	r3, [pc, #72]	; (80034fc <prvAddCurrentTaskToDelayedList+0x9c>)
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	4b0f      	ldr	r3, [pc, #60]	; (80034f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	3304      	adds	r3, #4
 80034bc:	4619      	mov	r1, r3
 80034be:	4610      	mov	r0, r2
 80034c0:	f7fe fb53 	bl	8001b6a <vListInsert>
}
 80034c4:	e010      	b.n	80034e8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80034c6:	4b0e      	ldr	r3, [pc, #56]	; (8003500 <prvAddCurrentTaskToDelayedList+0xa0>)
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	4b0a      	ldr	r3, [pc, #40]	; (80034f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	3304      	adds	r3, #4
 80034d0:	4619      	mov	r1, r3
 80034d2:	4610      	mov	r0, r2
 80034d4:	f7fe fb49 	bl	8001b6a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80034d8:	4b0a      	ldr	r3, [pc, #40]	; (8003504 <prvAddCurrentTaskToDelayedList+0xa4>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68ba      	ldr	r2, [r7, #8]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d202      	bcs.n	80034e8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80034e2:	4a08      	ldr	r2, [pc, #32]	; (8003504 <prvAddCurrentTaskToDelayedList+0xa4>)
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	6013      	str	r3, [r2, #0]
}
 80034e8:	bf00      	nop
 80034ea:	3710      	adds	r7, #16
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	20000bc4 	.word	0x20000bc4
 80034f4:	200006ec 	.word	0x200006ec
 80034f8:	20000bac 	.word	0x20000bac
 80034fc:	20000b7c 	.word	0x20000b7c
 8003500:	20000b78 	.word	0x20000b78
 8003504:	20000be0 	.word	0x20000be0

08003508 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b08a      	sub	sp, #40	; 0x28
 800350c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800350e:	2300      	movs	r3, #0
 8003510:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003512:	f000 faff 	bl	8003b14 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003516:	4b1c      	ldr	r3, [pc, #112]	; (8003588 <xTimerCreateTimerTask+0x80>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d021      	beq.n	8003562 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800351e:	2300      	movs	r3, #0
 8003520:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003522:	2300      	movs	r3, #0
 8003524:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003526:	1d3a      	adds	r2, r7, #4
 8003528:	f107 0108 	add.w	r1, r7, #8
 800352c:	f107 030c 	add.w	r3, r7, #12
 8003530:	4618      	mov	r0, r3
 8003532:	f7fe faaf 	bl	8001a94 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003536:	6879      	ldr	r1, [r7, #4]
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	68fa      	ldr	r2, [r7, #12]
 800353c:	9202      	str	r2, [sp, #8]
 800353e:	9301      	str	r3, [sp, #4]
 8003540:	2302      	movs	r3, #2
 8003542:	9300      	str	r3, [sp, #0]
 8003544:	2300      	movs	r3, #0
 8003546:	460a      	mov	r2, r1
 8003548:	4910      	ldr	r1, [pc, #64]	; (800358c <xTimerCreateTimerTask+0x84>)
 800354a:	4811      	ldr	r0, [pc, #68]	; (8003590 <xTimerCreateTimerTask+0x88>)
 800354c:	f7ff f8f6 	bl	800273c <xTaskCreateStatic>
 8003550:	4602      	mov	r2, r0
 8003552:	4b10      	ldr	r3, [pc, #64]	; (8003594 <xTimerCreateTimerTask+0x8c>)
 8003554:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003556:	4b0f      	ldr	r3, [pc, #60]	; (8003594 <xTimerCreateTimerTask+0x8c>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d001      	beq.n	8003562 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800355e:	2301      	movs	r3, #1
 8003560:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d109      	bne.n	800357c <xTimerCreateTimerTask+0x74>
 8003568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800356c:	f383 8811 	msr	BASEPRI, r3
 8003570:	f3bf 8f6f 	isb	sy
 8003574:	f3bf 8f4f 	dsb	sy
 8003578:	613b      	str	r3, [r7, #16]
 800357a:	e7fe      	b.n	800357a <xTimerCreateTimerTask+0x72>
	return xReturn;
 800357c:	697b      	ldr	r3, [r7, #20]
}
 800357e:	4618      	mov	r0, r3
 8003580:	3718      	adds	r7, #24
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	20000c1c 	.word	0x20000c1c
 800358c:	08004470 	.word	0x08004470
 8003590:	080036c9 	.word	0x080036c9
 8003594:	20000c20 	.word	0x20000c20

08003598 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b08a      	sub	sp, #40	; 0x28
 800359c:	af00      	add	r7, sp, #0
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	607a      	str	r2, [r7, #4]
 80035a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80035a6:	2300      	movs	r3, #0
 80035a8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d109      	bne.n	80035c4 <xTimerGenericCommand+0x2c>
 80035b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b4:	f383 8811 	msr	BASEPRI, r3
 80035b8:	f3bf 8f6f 	isb	sy
 80035bc:	f3bf 8f4f 	dsb	sy
 80035c0:	623b      	str	r3, [r7, #32]
 80035c2:	e7fe      	b.n	80035c2 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80035c4:	4b19      	ldr	r3, [pc, #100]	; (800362c <xTimerGenericCommand+0x94>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d02a      	beq.n	8003622 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	2b05      	cmp	r3, #5
 80035dc:	dc18      	bgt.n	8003610 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80035de:	f7ff feb5 	bl	800334c <xTaskGetSchedulerState>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d109      	bne.n	80035fc <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80035e8:	4b10      	ldr	r3, [pc, #64]	; (800362c <xTimerGenericCommand+0x94>)
 80035ea:	6818      	ldr	r0, [r3, #0]
 80035ec:	f107 0110 	add.w	r1, r7, #16
 80035f0:	2300      	movs	r3, #0
 80035f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035f4:	f7fe fc8c 	bl	8001f10 <xQueueGenericSend>
 80035f8:	6278      	str	r0, [r7, #36]	; 0x24
 80035fa:	e012      	b.n	8003622 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80035fc:	4b0b      	ldr	r3, [pc, #44]	; (800362c <xTimerGenericCommand+0x94>)
 80035fe:	6818      	ldr	r0, [r3, #0]
 8003600:	f107 0110 	add.w	r1, r7, #16
 8003604:	2300      	movs	r3, #0
 8003606:	2200      	movs	r2, #0
 8003608:	f7fe fc82 	bl	8001f10 <xQueueGenericSend>
 800360c:	6278      	str	r0, [r7, #36]	; 0x24
 800360e:	e008      	b.n	8003622 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003610:	4b06      	ldr	r3, [pc, #24]	; (800362c <xTimerGenericCommand+0x94>)
 8003612:	6818      	ldr	r0, [r3, #0]
 8003614:	f107 0110 	add.w	r1, r7, #16
 8003618:	2300      	movs	r3, #0
 800361a:	683a      	ldr	r2, [r7, #0]
 800361c:	f7fe fd72 	bl	8002104 <xQueueGenericSendFromISR>
 8003620:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003624:	4618      	mov	r0, r3
 8003626:	3728      	adds	r7, #40	; 0x28
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	20000c1c 	.word	0x20000c1c

08003630 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b088      	sub	sp, #32
 8003634:	af02      	add	r7, sp, #8
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800363a:	4b22      	ldr	r3, [pc, #136]	; (80036c4 <prvProcessExpiredTimer+0x94>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	3304      	adds	r3, #4
 8003648:	4618      	mov	r0, r3
 800364a:	f7fe fac7 	bl	8001bdc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003654:	f003 0304 	and.w	r3, r3, #4
 8003658:	2b00      	cmp	r3, #0
 800365a:	d021      	beq.n	80036a0 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	699a      	ldr	r2, [r3, #24]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	18d1      	adds	r1, r2, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	683a      	ldr	r2, [r7, #0]
 8003668:	6978      	ldr	r0, [r7, #20]
 800366a:	f000 f8d1 	bl	8003810 <prvInsertTimerInActiveList>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d01e      	beq.n	80036b2 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003674:	2300      	movs	r3, #0
 8003676:	9300      	str	r3, [sp, #0]
 8003678:	2300      	movs	r3, #0
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	2100      	movs	r1, #0
 800367e:	6978      	ldr	r0, [r7, #20]
 8003680:	f7ff ff8a 	bl	8003598 <xTimerGenericCommand>
 8003684:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d112      	bne.n	80036b2 <prvProcessExpiredTimer+0x82>
 800368c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003690:	f383 8811 	msr	BASEPRI, r3
 8003694:	f3bf 8f6f 	isb	sy
 8003698:	f3bf 8f4f 	dsb	sy
 800369c:	60fb      	str	r3, [r7, #12]
 800369e:	e7fe      	b.n	800369e <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80036a6:	f023 0301 	bic.w	r3, r3, #1
 80036aa:	b2da      	uxtb	r2, r3
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	6978      	ldr	r0, [r7, #20]
 80036b8:	4798      	blx	r3
}
 80036ba:	bf00      	nop
 80036bc:	3718      	adds	r7, #24
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	20000c14 	.word	0x20000c14

080036c8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80036d0:	f107 0308 	add.w	r3, r7, #8
 80036d4:	4618      	mov	r0, r3
 80036d6:	f000 f857 	bl	8003788 <prvGetNextExpireTime>
 80036da:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	4619      	mov	r1, r3
 80036e0:	68f8      	ldr	r0, [r7, #12]
 80036e2:	f000 f803 	bl	80036ec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80036e6:	f000 f8d5 	bl	8003894 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80036ea:	e7f1      	b.n	80036d0 <prvTimerTask+0x8>

080036ec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80036f6:	f7ff fa57 	bl	8002ba8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80036fa:	f107 0308 	add.w	r3, r7, #8
 80036fe:	4618      	mov	r0, r3
 8003700:	f000 f866 	bl	80037d0 <prvSampleTimeNow>
 8003704:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d130      	bne.n	800376e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d10a      	bne.n	8003728 <prvProcessTimerOrBlockTask+0x3c>
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	429a      	cmp	r2, r3
 8003718:	d806      	bhi.n	8003728 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800371a:	f7ff fa53 	bl	8002bc4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800371e:	68f9      	ldr	r1, [r7, #12]
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f7ff ff85 	bl	8003630 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003726:	e024      	b.n	8003772 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d008      	beq.n	8003740 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800372e:	4b13      	ldr	r3, [pc, #76]	; (800377c <prvProcessTimerOrBlockTask+0x90>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d101      	bne.n	800373c <prvProcessTimerOrBlockTask+0x50>
 8003738:	2301      	movs	r3, #1
 800373a:	e000      	b.n	800373e <prvProcessTimerOrBlockTask+0x52>
 800373c:	2300      	movs	r3, #0
 800373e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003740:	4b0f      	ldr	r3, [pc, #60]	; (8003780 <prvProcessTimerOrBlockTask+0x94>)
 8003742:	6818      	ldr	r0, [r3, #0]
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	683a      	ldr	r2, [r7, #0]
 800374c:	4619      	mov	r1, r3
 800374e:	f7fe ffc1 	bl	80026d4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003752:	f7ff fa37 	bl	8002bc4 <xTaskResumeAll>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d10a      	bne.n	8003772 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800375c:	4b09      	ldr	r3, [pc, #36]	; (8003784 <prvProcessTimerOrBlockTask+0x98>)
 800375e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003762:	601a      	str	r2, [r3, #0]
 8003764:	f3bf 8f4f 	dsb	sy
 8003768:	f3bf 8f6f 	isb	sy
}
 800376c:	e001      	b.n	8003772 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800376e:	f7ff fa29 	bl	8002bc4 <xTaskResumeAll>
}
 8003772:	bf00      	nop
 8003774:	3710      	adds	r7, #16
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	20000c18 	.word	0x20000c18
 8003780:	20000c1c 	.word	0x20000c1c
 8003784:	e000ed04 	.word	0xe000ed04

08003788 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003788:	b480      	push	{r7}
 800378a:	b085      	sub	sp, #20
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003790:	4b0e      	ldr	r3, [pc, #56]	; (80037cc <prvGetNextExpireTime+0x44>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d101      	bne.n	800379e <prvGetNextExpireTime+0x16>
 800379a:	2201      	movs	r2, #1
 800379c:	e000      	b.n	80037a0 <prvGetNextExpireTime+0x18>
 800379e:	2200      	movs	r2, #0
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d105      	bne.n	80037b8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80037ac:	4b07      	ldr	r3, [pc, #28]	; (80037cc <prvGetNextExpireTime+0x44>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	60fb      	str	r3, [r7, #12]
 80037b6:	e001      	b.n	80037bc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80037b8:	2300      	movs	r3, #0
 80037ba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80037bc:	68fb      	ldr	r3, [r7, #12]
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3714      	adds	r7, #20
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	20000c14 	.word	0x20000c14

080037d0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80037d8:	f7ff fa90 	bl	8002cfc <xTaskGetTickCount>
 80037dc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80037de:	4b0b      	ldr	r3, [pc, #44]	; (800380c <prvSampleTimeNow+0x3c>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	68fa      	ldr	r2, [r7, #12]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d205      	bcs.n	80037f4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80037e8:	f000 f930 	bl	8003a4c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	601a      	str	r2, [r3, #0]
 80037f2:	e002      	b.n	80037fa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80037fa:	4a04      	ldr	r2, [pc, #16]	; (800380c <prvSampleTimeNow+0x3c>)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003800:	68fb      	ldr	r3, [r7, #12]
}
 8003802:	4618      	mov	r0, r3
 8003804:	3710      	adds	r7, #16
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	20000c24 	.word	0x20000c24

08003810 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b086      	sub	sp, #24
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	607a      	str	r2, [r7, #4]
 800381c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800381e:	2300      	movs	r3, #0
 8003820:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	68ba      	ldr	r2, [r7, #8]
 8003826:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	68fa      	ldr	r2, [r7, #12]
 800382c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800382e:	68ba      	ldr	r2, [r7, #8]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	429a      	cmp	r2, r3
 8003834:	d812      	bhi.n	800385c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	1ad2      	subs	r2, r2, r3
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	699b      	ldr	r3, [r3, #24]
 8003840:	429a      	cmp	r2, r3
 8003842:	d302      	bcc.n	800384a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003844:	2301      	movs	r3, #1
 8003846:	617b      	str	r3, [r7, #20]
 8003848:	e01b      	b.n	8003882 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800384a:	4b10      	ldr	r3, [pc, #64]	; (800388c <prvInsertTimerInActiveList+0x7c>)
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	3304      	adds	r3, #4
 8003852:	4619      	mov	r1, r3
 8003854:	4610      	mov	r0, r2
 8003856:	f7fe f988 	bl	8001b6a <vListInsert>
 800385a:	e012      	b.n	8003882 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	429a      	cmp	r2, r3
 8003862:	d206      	bcs.n	8003872 <prvInsertTimerInActiveList+0x62>
 8003864:	68ba      	ldr	r2, [r7, #8]
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	429a      	cmp	r2, r3
 800386a:	d302      	bcc.n	8003872 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800386c:	2301      	movs	r3, #1
 800386e:	617b      	str	r3, [r7, #20]
 8003870:	e007      	b.n	8003882 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003872:	4b07      	ldr	r3, [pc, #28]	; (8003890 <prvInsertTimerInActiveList+0x80>)
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	3304      	adds	r3, #4
 800387a:	4619      	mov	r1, r3
 800387c:	4610      	mov	r0, r2
 800387e:	f7fe f974 	bl	8001b6a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003882:	697b      	ldr	r3, [r7, #20]
}
 8003884:	4618      	mov	r0, r3
 8003886:	3718      	adds	r7, #24
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}
 800388c:	20000c18 	.word	0x20000c18
 8003890:	20000c14 	.word	0x20000c14

08003894 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b08e      	sub	sp, #56	; 0x38
 8003898:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800389a:	e0c6      	b.n	8003a2a <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	da17      	bge.n	80038d2 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80038a2:	1d3b      	adds	r3, r7, #4
 80038a4:	3304      	adds	r3, #4
 80038a6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80038a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d109      	bne.n	80038c2 <prvProcessReceivedCommands+0x2e>
 80038ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b2:	f383 8811 	msr	BASEPRI, r3
 80038b6:	f3bf 8f6f 	isb	sy
 80038ba:	f3bf 8f4f 	dsb	sy
 80038be:	61fb      	str	r3, [r7, #28]
 80038c0:	e7fe      	b.n	80038c0 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80038c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038c8:	6850      	ldr	r0, [r2, #4]
 80038ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038cc:	6892      	ldr	r2, [r2, #8]
 80038ce:	4611      	mov	r1, r2
 80038d0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f2c0 80a7 	blt.w	8003a28 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80038de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e0:	695b      	ldr	r3, [r3, #20]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d004      	beq.n	80038f0 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80038e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e8:	3304      	adds	r3, #4
 80038ea:	4618      	mov	r0, r3
 80038ec:	f7fe f976 	bl	8001bdc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80038f0:	463b      	mov	r3, r7
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7ff ff6c 	bl	80037d0 <prvSampleTimeNow>
 80038f8:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2b09      	cmp	r3, #9
 80038fe:	f200 8094 	bhi.w	8003a2a <prvProcessReceivedCommands+0x196>
 8003902:	a201      	add	r2, pc, #4	; (adr r2, 8003908 <prvProcessReceivedCommands+0x74>)
 8003904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003908:	08003931 	.word	0x08003931
 800390c:	08003931 	.word	0x08003931
 8003910:	08003931 	.word	0x08003931
 8003914:	080039a3 	.word	0x080039a3
 8003918:	080039b7 	.word	0x080039b7
 800391c:	080039ff 	.word	0x080039ff
 8003920:	08003931 	.word	0x08003931
 8003924:	08003931 	.word	0x08003931
 8003928:	080039a3 	.word	0x080039a3
 800392c:	080039b7 	.word	0x080039b7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003932:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003936:	f043 0301 	orr.w	r3, r3, #1
 800393a:	b2da      	uxtb	r2, r3
 800393c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800393e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003942:	68ba      	ldr	r2, [r7, #8]
 8003944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	18d1      	adds	r1, r2, r3
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800394e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003950:	f7ff ff5e 	bl	8003810 <prvInsertTimerInActiveList>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d067      	beq.n	8003a2a <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800395a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800395c:	6a1b      	ldr	r3, [r3, #32]
 800395e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003960:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003964:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003968:	f003 0304 	and.w	r3, r3, #4
 800396c:	2b00      	cmp	r3, #0
 800396e:	d05c      	beq.n	8003a2a <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003970:	68ba      	ldr	r2, [r7, #8]
 8003972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003974:	699b      	ldr	r3, [r3, #24]
 8003976:	441a      	add	r2, r3
 8003978:	2300      	movs	r3, #0
 800397a:	9300      	str	r3, [sp, #0]
 800397c:	2300      	movs	r3, #0
 800397e:	2100      	movs	r1, #0
 8003980:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003982:	f7ff fe09 	bl	8003598 <xTimerGenericCommand>
 8003986:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003988:	6a3b      	ldr	r3, [r7, #32]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d14d      	bne.n	8003a2a <prvProcessReceivedCommands+0x196>
 800398e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003992:	f383 8811 	msr	BASEPRI, r3
 8003996:	f3bf 8f6f 	isb	sy
 800399a:	f3bf 8f4f 	dsb	sy
 800399e:	61bb      	str	r3, [r7, #24]
 80039a0:	e7fe      	b.n	80039a0 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80039a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80039a8:	f023 0301 	bic.w	r3, r3, #1
 80039ac:	b2da      	uxtb	r2, r3
 80039ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80039b4:	e039      	b.n	8003a2a <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80039b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80039bc:	f043 0301 	orr.w	r3, r3, #1
 80039c0:	b2da      	uxtb	r2, r3
 80039c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80039c8:	68ba      	ldr	r2, [r7, #8]
 80039ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039cc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80039ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d109      	bne.n	80039ea <prvProcessReceivedCommands+0x156>
 80039d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039da:	f383 8811 	msr	BASEPRI, r3
 80039de:	f3bf 8f6f 	isb	sy
 80039e2:	f3bf 8f4f 	dsb	sy
 80039e6:	617b      	str	r3, [r7, #20]
 80039e8:	e7fe      	b.n	80039e8 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80039ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ec:	699a      	ldr	r2, [r3, #24]
 80039ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f0:	18d1      	adds	r1, r2, r3
 80039f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80039f8:	f7ff ff0a 	bl	8003810 <prvInsertTimerInActiveList>
					break;
 80039fc:	e015      	b.n	8003a2a <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80039fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a04:	f003 0302 	and.w	r3, r3, #2
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d103      	bne.n	8003a14 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8003a0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a0e:	f000 fbc1 	bl	8004194 <vPortFree>
 8003a12:	e00a      	b.n	8003a2a <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a1a:	f023 0301 	bic.w	r3, r3, #1
 8003a1e:	b2da      	uxtb	r2, r3
 8003a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003a26:	e000      	b.n	8003a2a <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8003a28:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003a2a:	4b07      	ldr	r3, [pc, #28]	; (8003a48 <prvProcessReceivedCommands+0x1b4>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	1d39      	adds	r1, r7, #4
 8003a30:	2200      	movs	r2, #0
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7fe fbfa 	bl	800222c <xQueueReceive>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	f47f af2e 	bne.w	800389c <prvProcessReceivedCommands+0x8>
	}
}
 8003a40:	bf00      	nop
 8003a42:	3730      	adds	r7, #48	; 0x30
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	20000c1c 	.word	0x20000c1c

08003a4c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b088      	sub	sp, #32
 8003a50:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003a52:	e047      	b.n	8003ae4 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003a54:	4b2d      	ldr	r3, [pc, #180]	; (8003b0c <prvSwitchTimerLists+0xc0>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a5e:	4b2b      	ldr	r3, [pc, #172]	; (8003b0c <prvSwitchTimerLists+0xc0>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	3304      	adds	r3, #4
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f7fe f8b5 	bl	8001bdc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6a1b      	ldr	r3, [r3, #32]
 8003a76:	68f8      	ldr	r0, [r7, #12]
 8003a78:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a80:	f003 0304 	and.w	r3, r3, #4
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d02d      	beq.n	8003ae4 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	699b      	ldr	r3, [r3, #24]
 8003a8c:	693a      	ldr	r2, [r7, #16]
 8003a8e:	4413      	add	r3, r2
 8003a90:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003a92:	68ba      	ldr	r2, [r7, #8]
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d90e      	bls.n	8003ab8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	68ba      	ldr	r2, [r7, #8]
 8003a9e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003aa6:	4b19      	ldr	r3, [pc, #100]	; (8003b0c <prvSwitchTimerLists+0xc0>)
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	3304      	adds	r3, #4
 8003aae:	4619      	mov	r1, r3
 8003ab0:	4610      	mov	r0, r2
 8003ab2:	f7fe f85a 	bl	8001b6a <vListInsert>
 8003ab6:	e015      	b.n	8003ae4 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003ab8:	2300      	movs	r3, #0
 8003aba:	9300      	str	r3, [sp, #0]
 8003abc:	2300      	movs	r3, #0
 8003abe:	693a      	ldr	r2, [r7, #16]
 8003ac0:	2100      	movs	r1, #0
 8003ac2:	68f8      	ldr	r0, [r7, #12]
 8003ac4:	f7ff fd68 	bl	8003598 <xTimerGenericCommand>
 8003ac8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d109      	bne.n	8003ae4 <prvSwitchTimerLists+0x98>
 8003ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad4:	f383 8811 	msr	BASEPRI, r3
 8003ad8:	f3bf 8f6f 	isb	sy
 8003adc:	f3bf 8f4f 	dsb	sy
 8003ae0:	603b      	str	r3, [r7, #0]
 8003ae2:	e7fe      	b.n	8003ae2 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003ae4:	4b09      	ldr	r3, [pc, #36]	; (8003b0c <prvSwitchTimerLists+0xc0>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d1b2      	bne.n	8003a54 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003aee:	4b07      	ldr	r3, [pc, #28]	; (8003b0c <prvSwitchTimerLists+0xc0>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003af4:	4b06      	ldr	r3, [pc, #24]	; (8003b10 <prvSwitchTimerLists+0xc4>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a04      	ldr	r2, [pc, #16]	; (8003b0c <prvSwitchTimerLists+0xc0>)
 8003afa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003afc:	4a04      	ldr	r2, [pc, #16]	; (8003b10 <prvSwitchTimerLists+0xc4>)
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	6013      	str	r3, [r2, #0]
}
 8003b02:	bf00      	nop
 8003b04:	3718      	adds	r7, #24
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	20000c14 	.word	0x20000c14
 8003b10:	20000c18 	.word	0x20000c18

08003b14 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003b1a:	f000 f95f 	bl	8003ddc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003b1e:	4b15      	ldr	r3, [pc, #84]	; (8003b74 <prvCheckForValidListAndQueue+0x60>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d120      	bne.n	8003b68 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003b26:	4814      	ldr	r0, [pc, #80]	; (8003b78 <prvCheckForValidListAndQueue+0x64>)
 8003b28:	f7fd ffce 	bl	8001ac8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003b2c:	4813      	ldr	r0, [pc, #76]	; (8003b7c <prvCheckForValidListAndQueue+0x68>)
 8003b2e:	f7fd ffcb 	bl	8001ac8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003b32:	4b13      	ldr	r3, [pc, #76]	; (8003b80 <prvCheckForValidListAndQueue+0x6c>)
 8003b34:	4a10      	ldr	r2, [pc, #64]	; (8003b78 <prvCheckForValidListAndQueue+0x64>)
 8003b36:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003b38:	4b12      	ldr	r3, [pc, #72]	; (8003b84 <prvCheckForValidListAndQueue+0x70>)
 8003b3a:	4a10      	ldr	r2, [pc, #64]	; (8003b7c <prvCheckForValidListAndQueue+0x68>)
 8003b3c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003b3e:	2300      	movs	r3, #0
 8003b40:	9300      	str	r3, [sp, #0]
 8003b42:	4b11      	ldr	r3, [pc, #68]	; (8003b88 <prvCheckForValidListAndQueue+0x74>)
 8003b44:	4a11      	ldr	r2, [pc, #68]	; (8003b8c <prvCheckForValidListAndQueue+0x78>)
 8003b46:	2110      	movs	r1, #16
 8003b48:	200a      	movs	r0, #10
 8003b4a:	f7fe f8d9 	bl	8001d00 <xQueueGenericCreateStatic>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	4b08      	ldr	r3, [pc, #32]	; (8003b74 <prvCheckForValidListAndQueue+0x60>)
 8003b52:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003b54:	4b07      	ldr	r3, [pc, #28]	; (8003b74 <prvCheckForValidListAndQueue+0x60>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d005      	beq.n	8003b68 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003b5c:	4b05      	ldr	r3, [pc, #20]	; (8003b74 <prvCheckForValidListAndQueue+0x60>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	490b      	ldr	r1, [pc, #44]	; (8003b90 <prvCheckForValidListAndQueue+0x7c>)
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7fe fd8e 	bl	8002684 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003b68:	f000 f966 	bl	8003e38 <vPortExitCritical>
}
 8003b6c:	bf00      	nop
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	20000c1c 	.word	0x20000c1c
 8003b78:	20000bec 	.word	0x20000bec
 8003b7c:	20000c00 	.word	0x20000c00
 8003b80:	20000c14 	.word	0x20000c14
 8003b84:	20000c18 	.word	0x20000c18
 8003b88:	20000cc8 	.word	0x20000cc8
 8003b8c:	20000c28 	.word	0x20000c28
 8003b90:	08004478 	.word	0x08004478

08003b94 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003b94:	b480      	push	{r7}
 8003b96:	b085      	sub	sp, #20
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	3b04      	subs	r3, #4
 8003ba4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003bac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	3b04      	subs	r3, #4
 8003bb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	f023 0201 	bic.w	r2, r3, #1
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	3b04      	subs	r3, #4
 8003bc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003bc4:	4a0c      	ldr	r2, [pc, #48]	; (8003bf8 <pxPortInitialiseStack+0x64>)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	3b14      	subs	r3, #20
 8003bce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	3b04      	subs	r3, #4
 8003bda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f06f 0202 	mvn.w	r2, #2
 8003be2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	3b20      	subs	r3, #32
 8003be8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003bea:	68fb      	ldr	r3, [r7, #12]
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3714      	adds	r7, #20
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr
 8003bf8:	08003bfd 	.word	0x08003bfd

08003bfc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b085      	sub	sp, #20
 8003c00:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003c02:	2300      	movs	r3, #0
 8003c04:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003c06:	4b11      	ldr	r3, [pc, #68]	; (8003c4c <prvTaskExitError+0x50>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c0e:	d009      	beq.n	8003c24 <prvTaskExitError+0x28>
 8003c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c14:	f383 8811 	msr	BASEPRI, r3
 8003c18:	f3bf 8f6f 	isb	sy
 8003c1c:	f3bf 8f4f 	dsb	sy
 8003c20:	60fb      	str	r3, [r7, #12]
 8003c22:	e7fe      	b.n	8003c22 <prvTaskExitError+0x26>
 8003c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c28:	f383 8811 	msr	BASEPRI, r3
 8003c2c:	f3bf 8f6f 	isb	sy
 8003c30:	f3bf 8f4f 	dsb	sy
 8003c34:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003c36:	bf00      	nop
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d0fc      	beq.n	8003c38 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003c3e:	bf00      	nop
 8003c40:	3714      	adds	r7, #20
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	2000000c 	.word	0x2000000c

08003c50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003c50:	4b07      	ldr	r3, [pc, #28]	; (8003c70 <pxCurrentTCBConst2>)
 8003c52:	6819      	ldr	r1, [r3, #0]
 8003c54:	6808      	ldr	r0, [r1, #0]
 8003c56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c5a:	f380 8809 	msr	PSP, r0
 8003c5e:	f3bf 8f6f 	isb	sy
 8003c62:	f04f 0000 	mov.w	r0, #0
 8003c66:	f380 8811 	msr	BASEPRI, r0
 8003c6a:	4770      	bx	lr
 8003c6c:	f3af 8000 	nop.w

08003c70 <pxCurrentTCBConst2>:
 8003c70:	200006ec 	.word	0x200006ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003c74:	bf00      	nop
 8003c76:	bf00      	nop

08003c78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003c78:	4808      	ldr	r0, [pc, #32]	; (8003c9c <prvPortStartFirstTask+0x24>)
 8003c7a:	6800      	ldr	r0, [r0, #0]
 8003c7c:	6800      	ldr	r0, [r0, #0]
 8003c7e:	f380 8808 	msr	MSP, r0
 8003c82:	f04f 0000 	mov.w	r0, #0
 8003c86:	f380 8814 	msr	CONTROL, r0
 8003c8a:	b662      	cpsie	i
 8003c8c:	b661      	cpsie	f
 8003c8e:	f3bf 8f4f 	dsb	sy
 8003c92:	f3bf 8f6f 	isb	sy
 8003c96:	df00      	svc	0
 8003c98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003c9a:	bf00      	nop
 8003c9c:	e000ed08 	.word	0xe000ed08

08003ca0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b086      	sub	sp, #24
 8003ca4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003ca6:	4b44      	ldr	r3, [pc, #272]	; (8003db8 <xPortStartScheduler+0x118>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a44      	ldr	r2, [pc, #272]	; (8003dbc <xPortStartScheduler+0x11c>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d109      	bne.n	8003cc4 <xPortStartScheduler+0x24>
 8003cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb4:	f383 8811 	msr	BASEPRI, r3
 8003cb8:	f3bf 8f6f 	isb	sy
 8003cbc:	f3bf 8f4f 	dsb	sy
 8003cc0:	613b      	str	r3, [r7, #16]
 8003cc2:	e7fe      	b.n	8003cc2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003cc4:	4b3c      	ldr	r3, [pc, #240]	; (8003db8 <xPortStartScheduler+0x118>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a3d      	ldr	r2, [pc, #244]	; (8003dc0 <xPortStartScheduler+0x120>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d109      	bne.n	8003ce2 <xPortStartScheduler+0x42>
 8003cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd2:	f383 8811 	msr	BASEPRI, r3
 8003cd6:	f3bf 8f6f 	isb	sy
 8003cda:	f3bf 8f4f 	dsb	sy
 8003cde:	60fb      	str	r3, [r7, #12]
 8003ce0:	e7fe      	b.n	8003ce0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003ce2:	4b38      	ldr	r3, [pc, #224]	; (8003dc4 <xPortStartScheduler+0x124>)
 8003ce4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	22ff      	movs	r2, #255	; 0xff
 8003cf2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003cfc:	78fb      	ldrb	r3, [r7, #3]
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003d04:	b2da      	uxtb	r2, r3
 8003d06:	4b30      	ldr	r3, [pc, #192]	; (8003dc8 <xPortStartScheduler+0x128>)
 8003d08:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003d0a:	4b30      	ldr	r3, [pc, #192]	; (8003dcc <xPortStartScheduler+0x12c>)
 8003d0c:	2207      	movs	r2, #7
 8003d0e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003d10:	e009      	b.n	8003d26 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8003d12:	4b2e      	ldr	r3, [pc, #184]	; (8003dcc <xPortStartScheduler+0x12c>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	3b01      	subs	r3, #1
 8003d18:	4a2c      	ldr	r2, [pc, #176]	; (8003dcc <xPortStartScheduler+0x12c>)
 8003d1a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003d1c:	78fb      	ldrb	r3, [r7, #3]
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	005b      	lsls	r3, r3, #1
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003d26:	78fb      	ldrb	r3, [r7, #3]
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d2e:	2b80      	cmp	r3, #128	; 0x80
 8003d30:	d0ef      	beq.n	8003d12 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003d32:	4b26      	ldr	r3, [pc, #152]	; (8003dcc <xPortStartScheduler+0x12c>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f1c3 0307 	rsb	r3, r3, #7
 8003d3a:	2b04      	cmp	r3, #4
 8003d3c:	d009      	beq.n	8003d52 <xPortStartScheduler+0xb2>
 8003d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d42:	f383 8811 	msr	BASEPRI, r3
 8003d46:	f3bf 8f6f 	isb	sy
 8003d4a:	f3bf 8f4f 	dsb	sy
 8003d4e:	60bb      	str	r3, [r7, #8]
 8003d50:	e7fe      	b.n	8003d50 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003d52:	4b1e      	ldr	r3, [pc, #120]	; (8003dcc <xPortStartScheduler+0x12c>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	021b      	lsls	r3, r3, #8
 8003d58:	4a1c      	ldr	r2, [pc, #112]	; (8003dcc <xPortStartScheduler+0x12c>)
 8003d5a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003d5c:	4b1b      	ldr	r3, [pc, #108]	; (8003dcc <xPortStartScheduler+0x12c>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003d64:	4a19      	ldr	r2, [pc, #100]	; (8003dcc <xPortStartScheduler+0x12c>)
 8003d66:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	b2da      	uxtb	r2, r3
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003d70:	4b17      	ldr	r3, [pc, #92]	; (8003dd0 <xPortStartScheduler+0x130>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a16      	ldr	r2, [pc, #88]	; (8003dd0 <xPortStartScheduler+0x130>)
 8003d76:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d7a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003d7c:	4b14      	ldr	r3, [pc, #80]	; (8003dd0 <xPortStartScheduler+0x130>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a13      	ldr	r2, [pc, #76]	; (8003dd0 <xPortStartScheduler+0x130>)
 8003d82:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003d86:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003d88:	f000 f8d6 	bl	8003f38 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003d8c:	4b11      	ldr	r3, [pc, #68]	; (8003dd4 <xPortStartScheduler+0x134>)
 8003d8e:	2200      	movs	r2, #0
 8003d90:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003d92:	f000 f8f5 	bl	8003f80 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003d96:	4b10      	ldr	r3, [pc, #64]	; (8003dd8 <xPortStartScheduler+0x138>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a0f      	ldr	r2, [pc, #60]	; (8003dd8 <xPortStartScheduler+0x138>)
 8003d9c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003da0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003da2:	f7ff ff69 	bl	8003c78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003da6:	f7ff f871 	bl	8002e8c <vTaskSwitchContext>
	prvTaskExitError();
 8003daa:	f7ff ff27 	bl	8003bfc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003dae:	2300      	movs	r3, #0
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3718      	adds	r7, #24
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	e000ed00 	.word	0xe000ed00
 8003dbc:	410fc271 	.word	0x410fc271
 8003dc0:	410fc270 	.word	0x410fc270
 8003dc4:	e000e400 	.word	0xe000e400
 8003dc8:	20000d18 	.word	0x20000d18
 8003dcc:	20000d1c 	.word	0x20000d1c
 8003dd0:	e000ed20 	.word	0xe000ed20
 8003dd4:	2000000c 	.word	0x2000000c
 8003dd8:	e000ef34 	.word	0xe000ef34

08003ddc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de6:	f383 8811 	msr	BASEPRI, r3
 8003dea:	f3bf 8f6f 	isb	sy
 8003dee:	f3bf 8f4f 	dsb	sy
 8003df2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003df4:	4b0e      	ldr	r3, [pc, #56]	; (8003e30 <vPortEnterCritical+0x54>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	3301      	adds	r3, #1
 8003dfa:	4a0d      	ldr	r2, [pc, #52]	; (8003e30 <vPortEnterCritical+0x54>)
 8003dfc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003dfe:	4b0c      	ldr	r3, [pc, #48]	; (8003e30 <vPortEnterCritical+0x54>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d10e      	bne.n	8003e24 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003e06:	4b0b      	ldr	r3, [pc, #44]	; (8003e34 <vPortEnterCritical+0x58>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d009      	beq.n	8003e24 <vPortEnterCritical+0x48>
 8003e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e14:	f383 8811 	msr	BASEPRI, r3
 8003e18:	f3bf 8f6f 	isb	sy
 8003e1c:	f3bf 8f4f 	dsb	sy
 8003e20:	603b      	str	r3, [r7, #0]
 8003e22:	e7fe      	b.n	8003e22 <vPortEnterCritical+0x46>
	}
}
 8003e24:	bf00      	nop
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr
 8003e30:	2000000c 	.word	0x2000000c
 8003e34:	e000ed04 	.word	0xe000ed04

08003e38 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003e3e:	4b11      	ldr	r3, [pc, #68]	; (8003e84 <vPortExitCritical+0x4c>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d109      	bne.n	8003e5a <vPortExitCritical+0x22>
 8003e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e4a:	f383 8811 	msr	BASEPRI, r3
 8003e4e:	f3bf 8f6f 	isb	sy
 8003e52:	f3bf 8f4f 	dsb	sy
 8003e56:	607b      	str	r3, [r7, #4]
 8003e58:	e7fe      	b.n	8003e58 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8003e5a:	4b0a      	ldr	r3, [pc, #40]	; (8003e84 <vPortExitCritical+0x4c>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	3b01      	subs	r3, #1
 8003e60:	4a08      	ldr	r2, [pc, #32]	; (8003e84 <vPortExitCritical+0x4c>)
 8003e62:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003e64:	4b07      	ldr	r3, [pc, #28]	; (8003e84 <vPortExitCritical+0x4c>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d104      	bne.n	8003e76 <vPortExitCritical+0x3e>
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8003e76:	bf00      	nop
 8003e78:	370c      	adds	r7, #12
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	2000000c 	.word	0x2000000c
	...

08003e90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003e90:	f3ef 8009 	mrs	r0, PSP
 8003e94:	f3bf 8f6f 	isb	sy
 8003e98:	4b15      	ldr	r3, [pc, #84]	; (8003ef0 <pxCurrentTCBConst>)
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	f01e 0f10 	tst.w	lr, #16
 8003ea0:	bf08      	it	eq
 8003ea2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003ea6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eaa:	6010      	str	r0, [r2, #0]
 8003eac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003eb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003eb4:	f380 8811 	msr	BASEPRI, r0
 8003eb8:	f3bf 8f4f 	dsb	sy
 8003ebc:	f3bf 8f6f 	isb	sy
 8003ec0:	f7fe ffe4 	bl	8002e8c <vTaskSwitchContext>
 8003ec4:	f04f 0000 	mov.w	r0, #0
 8003ec8:	f380 8811 	msr	BASEPRI, r0
 8003ecc:	bc09      	pop	{r0, r3}
 8003ece:	6819      	ldr	r1, [r3, #0]
 8003ed0:	6808      	ldr	r0, [r1, #0]
 8003ed2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ed6:	f01e 0f10 	tst.w	lr, #16
 8003eda:	bf08      	it	eq
 8003edc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003ee0:	f380 8809 	msr	PSP, r0
 8003ee4:	f3bf 8f6f 	isb	sy
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop
 8003eec:	f3af 8000 	nop.w

08003ef0 <pxCurrentTCBConst>:
 8003ef0:	200006ec 	.word	0x200006ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003ef4:	bf00      	nop
 8003ef6:	bf00      	nop

08003ef8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
	__asm volatile
 8003efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f02:	f383 8811 	msr	BASEPRI, r3
 8003f06:	f3bf 8f6f 	isb	sy
 8003f0a:	f3bf 8f4f 	dsb	sy
 8003f0e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003f10:	f7fe ff04 	bl	8002d1c <xTaskIncrementTick>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d003      	beq.n	8003f22 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003f1a:	4b06      	ldr	r3, [pc, #24]	; (8003f34 <xPortSysTickHandler+0x3c>)
 8003f1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f20:	601a      	str	r2, [r3, #0]
 8003f22:	2300      	movs	r3, #0
 8003f24:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8003f2c:	bf00      	nop
 8003f2e:	3708      	adds	r7, #8
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	e000ed04 	.word	0xe000ed04

08003f38 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003f38:	b480      	push	{r7}
 8003f3a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003f3c:	4b0b      	ldr	r3, [pc, #44]	; (8003f6c <vPortSetupTimerInterrupt+0x34>)
 8003f3e:	2200      	movs	r2, #0
 8003f40:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003f42:	4b0b      	ldr	r3, [pc, #44]	; (8003f70 <vPortSetupTimerInterrupt+0x38>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003f48:	4b0a      	ldr	r3, [pc, #40]	; (8003f74 <vPortSetupTimerInterrupt+0x3c>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a0a      	ldr	r2, [pc, #40]	; (8003f78 <vPortSetupTimerInterrupt+0x40>)
 8003f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f52:	099b      	lsrs	r3, r3, #6
 8003f54:	4a09      	ldr	r2, [pc, #36]	; (8003f7c <vPortSetupTimerInterrupt+0x44>)
 8003f56:	3b01      	subs	r3, #1
 8003f58:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003f5a:	4b04      	ldr	r3, [pc, #16]	; (8003f6c <vPortSetupTimerInterrupt+0x34>)
 8003f5c:	2207      	movs	r2, #7
 8003f5e:	601a      	str	r2, [r3, #0]
}
 8003f60:	bf00      	nop
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr
 8003f6a:	bf00      	nop
 8003f6c:	e000e010 	.word	0xe000e010
 8003f70:	e000e018 	.word	0xe000e018
 8003f74:	20000000 	.word	0x20000000
 8003f78:	10624dd3 	.word	0x10624dd3
 8003f7c:	e000e014 	.word	0xe000e014

08003f80 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003f80:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003f90 <vPortEnableVFP+0x10>
 8003f84:	6801      	ldr	r1, [r0, #0]
 8003f86:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003f8a:	6001      	str	r1, [r0, #0]
 8003f8c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003f8e:	bf00      	nop
 8003f90:	e000ed88 	.word	0xe000ed88

08003f94 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003f94:	b480      	push	{r7}
 8003f96:	b085      	sub	sp, #20
 8003f98:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003f9a:	f3ef 8305 	mrs	r3, IPSR
 8003f9e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2b0f      	cmp	r3, #15
 8003fa4:	d913      	bls.n	8003fce <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003fa6:	4a16      	ldr	r2, [pc, #88]	; (8004000 <vPortValidateInterruptPriority+0x6c>)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	4413      	add	r3, r2
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003fb0:	4b14      	ldr	r3, [pc, #80]	; (8004004 <vPortValidateInterruptPriority+0x70>)
 8003fb2:	781b      	ldrb	r3, [r3, #0]
 8003fb4:	7afa      	ldrb	r2, [r7, #11]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d209      	bcs.n	8003fce <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8003fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fbe:	f383 8811 	msr	BASEPRI, r3
 8003fc2:	f3bf 8f6f 	isb	sy
 8003fc6:	f3bf 8f4f 	dsb	sy
 8003fca:	607b      	str	r3, [r7, #4]
 8003fcc:	e7fe      	b.n	8003fcc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003fce:	4b0e      	ldr	r3, [pc, #56]	; (8004008 <vPortValidateInterruptPriority+0x74>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003fd6:	4b0d      	ldr	r3, [pc, #52]	; (800400c <vPortValidateInterruptPriority+0x78>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d909      	bls.n	8003ff2 <vPortValidateInterruptPriority+0x5e>
 8003fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe2:	f383 8811 	msr	BASEPRI, r3
 8003fe6:	f3bf 8f6f 	isb	sy
 8003fea:	f3bf 8f4f 	dsb	sy
 8003fee:	603b      	str	r3, [r7, #0]
 8003ff0:	e7fe      	b.n	8003ff0 <vPortValidateInterruptPriority+0x5c>
	}
 8003ff2:	bf00      	nop
 8003ff4:	3714      	adds	r7, #20
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr
 8003ffe:	bf00      	nop
 8004000:	e000e3f0 	.word	0xe000e3f0
 8004004:	20000d18 	.word	0x20000d18
 8004008:	e000ed0c 	.word	0xe000ed0c
 800400c:	20000d1c 	.word	0x20000d1c

08004010 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b08a      	sub	sp, #40	; 0x28
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004018:	2300      	movs	r3, #0
 800401a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800401c:	f7fe fdc4 	bl	8002ba8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004020:	4b57      	ldr	r3, [pc, #348]	; (8004180 <pvPortMalloc+0x170>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d101      	bne.n	800402c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004028:	f000 f90c 	bl	8004244 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800402c:	4b55      	ldr	r3, [pc, #340]	; (8004184 <pvPortMalloc+0x174>)
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4013      	ands	r3, r2
 8004034:	2b00      	cmp	r3, #0
 8004036:	f040 808c 	bne.w	8004152 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d01c      	beq.n	800407a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004040:	2208      	movs	r2, #8
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4413      	add	r3, r2
 8004046:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f003 0307 	and.w	r3, r3, #7
 800404e:	2b00      	cmp	r3, #0
 8004050:	d013      	beq.n	800407a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f023 0307 	bic.w	r3, r3, #7
 8004058:	3308      	adds	r3, #8
 800405a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f003 0307 	and.w	r3, r3, #7
 8004062:	2b00      	cmp	r3, #0
 8004064:	d009      	beq.n	800407a <pvPortMalloc+0x6a>
 8004066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800406a:	f383 8811 	msr	BASEPRI, r3
 800406e:	f3bf 8f6f 	isb	sy
 8004072:	f3bf 8f4f 	dsb	sy
 8004076:	617b      	str	r3, [r7, #20]
 8004078:	e7fe      	b.n	8004078 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d068      	beq.n	8004152 <pvPortMalloc+0x142>
 8004080:	4b41      	ldr	r3, [pc, #260]	; (8004188 <pvPortMalloc+0x178>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	429a      	cmp	r2, r3
 8004088:	d863      	bhi.n	8004152 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800408a:	4b40      	ldr	r3, [pc, #256]	; (800418c <pvPortMalloc+0x17c>)
 800408c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800408e:	4b3f      	ldr	r3, [pc, #252]	; (800418c <pvPortMalloc+0x17c>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004094:	e004      	b.n	80040a0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8004096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004098:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800409a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80040a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d903      	bls.n	80040b2 <pvPortMalloc+0xa2>
 80040aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d1f1      	bne.n	8004096 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80040b2:	4b33      	ldr	r3, [pc, #204]	; (8004180 <pvPortMalloc+0x170>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d04a      	beq.n	8004152 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80040bc:	6a3b      	ldr	r3, [r7, #32]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2208      	movs	r2, #8
 80040c2:	4413      	add	r3, r2
 80040c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80040c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	6a3b      	ldr	r3, [r7, #32]
 80040cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80040ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d0:	685a      	ldr	r2, [r3, #4]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	1ad2      	subs	r2, r2, r3
 80040d6:	2308      	movs	r3, #8
 80040d8:	005b      	lsls	r3, r3, #1
 80040da:	429a      	cmp	r2, r3
 80040dc:	d91e      	bls.n	800411c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80040de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4413      	add	r3, r2
 80040e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	f003 0307 	and.w	r3, r3, #7
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d009      	beq.n	8004104 <pvPortMalloc+0xf4>
 80040f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f4:	f383 8811 	msr	BASEPRI, r3
 80040f8:	f3bf 8f6f 	isb	sy
 80040fc:	f3bf 8f4f 	dsb	sy
 8004100:	613b      	str	r3, [r7, #16]
 8004102:	e7fe      	b.n	8004102 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004106:	685a      	ldr	r2, [r3, #4]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	1ad2      	subs	r2, r2, r3
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004116:	69b8      	ldr	r0, [r7, #24]
 8004118:	f000 f8f6 	bl	8004308 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800411c:	4b1a      	ldr	r3, [pc, #104]	; (8004188 <pvPortMalloc+0x178>)
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	4a18      	ldr	r2, [pc, #96]	; (8004188 <pvPortMalloc+0x178>)
 8004128:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800412a:	4b17      	ldr	r3, [pc, #92]	; (8004188 <pvPortMalloc+0x178>)
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	4b18      	ldr	r3, [pc, #96]	; (8004190 <pvPortMalloc+0x180>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	429a      	cmp	r2, r3
 8004134:	d203      	bcs.n	800413e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004136:	4b14      	ldr	r3, [pc, #80]	; (8004188 <pvPortMalloc+0x178>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a15      	ldr	r2, [pc, #84]	; (8004190 <pvPortMalloc+0x180>)
 800413c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800413e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004140:	685a      	ldr	r2, [r3, #4]
 8004142:	4b10      	ldr	r3, [pc, #64]	; (8004184 <pvPortMalloc+0x174>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	431a      	orrs	r2, r3
 8004148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800414c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414e:	2200      	movs	r2, #0
 8004150:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004152:	f7fe fd37 	bl	8002bc4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	f003 0307 	and.w	r3, r3, #7
 800415c:	2b00      	cmp	r3, #0
 800415e:	d009      	beq.n	8004174 <pvPortMalloc+0x164>
 8004160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004164:	f383 8811 	msr	BASEPRI, r3
 8004168:	f3bf 8f6f 	isb	sy
 800416c:	f3bf 8f4f 	dsb	sy
 8004170:	60fb      	str	r3, [r7, #12]
 8004172:	e7fe      	b.n	8004172 <pvPortMalloc+0x162>
	return pvReturn;
 8004174:	69fb      	ldr	r3, [r7, #28]
}
 8004176:	4618      	mov	r0, r3
 8004178:	3728      	adds	r7, #40	; 0x28
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	20004928 	.word	0x20004928
 8004184:	20004934 	.word	0x20004934
 8004188:	2000492c 	.word	0x2000492c
 800418c:	20004920 	.word	0x20004920
 8004190:	20004930 	.word	0x20004930

08004194 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b086      	sub	sp, #24
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d046      	beq.n	8004234 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80041a6:	2308      	movs	r3, #8
 80041a8:	425b      	negs	r3, r3
 80041aa:	697a      	ldr	r2, [r7, #20]
 80041ac:	4413      	add	r3, r2
 80041ae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	685a      	ldr	r2, [r3, #4]
 80041b8:	4b20      	ldr	r3, [pc, #128]	; (800423c <vPortFree+0xa8>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4013      	ands	r3, r2
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d109      	bne.n	80041d6 <vPortFree+0x42>
 80041c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c6:	f383 8811 	msr	BASEPRI, r3
 80041ca:	f3bf 8f6f 	isb	sy
 80041ce:	f3bf 8f4f 	dsb	sy
 80041d2:	60fb      	str	r3, [r7, #12]
 80041d4:	e7fe      	b.n	80041d4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d009      	beq.n	80041f2 <vPortFree+0x5e>
 80041de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e2:	f383 8811 	msr	BASEPRI, r3
 80041e6:	f3bf 8f6f 	isb	sy
 80041ea:	f3bf 8f4f 	dsb	sy
 80041ee:	60bb      	str	r3, [r7, #8]
 80041f0:	e7fe      	b.n	80041f0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	685a      	ldr	r2, [r3, #4]
 80041f6:	4b11      	ldr	r3, [pc, #68]	; (800423c <vPortFree+0xa8>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4013      	ands	r3, r2
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d019      	beq.n	8004234 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d115      	bne.n	8004234 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	685a      	ldr	r2, [r3, #4]
 800420c:	4b0b      	ldr	r3, [pc, #44]	; (800423c <vPortFree+0xa8>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	43db      	mvns	r3, r3
 8004212:	401a      	ands	r2, r3
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004218:	f7fe fcc6 	bl	8002ba8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	685a      	ldr	r2, [r3, #4]
 8004220:	4b07      	ldr	r3, [pc, #28]	; (8004240 <vPortFree+0xac>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4413      	add	r3, r2
 8004226:	4a06      	ldr	r2, [pc, #24]	; (8004240 <vPortFree+0xac>)
 8004228:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800422a:	6938      	ldr	r0, [r7, #16]
 800422c:	f000 f86c 	bl	8004308 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004230:	f7fe fcc8 	bl	8002bc4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004234:	bf00      	nop
 8004236:	3718      	adds	r7, #24
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}
 800423c:	20004934 	.word	0x20004934
 8004240:	2000492c 	.word	0x2000492c

08004244 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004244:	b480      	push	{r7}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800424a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800424e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004250:	4b27      	ldr	r3, [pc, #156]	; (80042f0 <prvHeapInit+0xac>)
 8004252:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f003 0307 	and.w	r3, r3, #7
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00c      	beq.n	8004278 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	3307      	adds	r3, #7
 8004262:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f023 0307 	bic.w	r3, r3, #7
 800426a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800426c:	68ba      	ldr	r2, [r7, #8]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	4a1f      	ldr	r2, [pc, #124]	; (80042f0 <prvHeapInit+0xac>)
 8004274:	4413      	add	r3, r2
 8004276:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800427c:	4a1d      	ldr	r2, [pc, #116]	; (80042f4 <prvHeapInit+0xb0>)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004282:	4b1c      	ldr	r3, [pc, #112]	; (80042f4 <prvHeapInit+0xb0>)
 8004284:	2200      	movs	r2, #0
 8004286:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	68ba      	ldr	r2, [r7, #8]
 800428c:	4413      	add	r3, r2
 800428e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004290:	2208      	movs	r2, #8
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	1a9b      	subs	r3, r3, r2
 8004296:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f023 0307 	bic.w	r3, r3, #7
 800429e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	4a15      	ldr	r2, [pc, #84]	; (80042f8 <prvHeapInit+0xb4>)
 80042a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80042a6:	4b14      	ldr	r3, [pc, #80]	; (80042f8 <prvHeapInit+0xb4>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2200      	movs	r2, #0
 80042ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80042ae:	4b12      	ldr	r3, [pc, #72]	; (80042f8 <prvHeapInit+0xb4>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2200      	movs	r2, #0
 80042b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	68fa      	ldr	r2, [r7, #12]
 80042be:	1ad2      	subs	r2, r2, r3
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80042c4:	4b0c      	ldr	r3, [pc, #48]	; (80042f8 <prvHeapInit+0xb4>)
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	4a0a      	ldr	r2, [pc, #40]	; (80042fc <prvHeapInit+0xb8>)
 80042d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	4a09      	ldr	r2, [pc, #36]	; (8004300 <prvHeapInit+0xbc>)
 80042da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80042dc:	4b09      	ldr	r3, [pc, #36]	; (8004304 <prvHeapInit+0xc0>)
 80042de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80042e2:	601a      	str	r2, [r3, #0]
}
 80042e4:	bf00      	nop
 80042e6:	3714      	adds	r7, #20
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr
 80042f0:	20000d20 	.word	0x20000d20
 80042f4:	20004920 	.word	0x20004920
 80042f8:	20004928 	.word	0x20004928
 80042fc:	20004930 	.word	0x20004930
 8004300:	2000492c 	.word	0x2000492c
 8004304:	20004934 	.word	0x20004934

08004308 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004308:	b480      	push	{r7}
 800430a:	b085      	sub	sp, #20
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004310:	4b28      	ldr	r3, [pc, #160]	; (80043b4 <prvInsertBlockIntoFreeList+0xac>)
 8004312:	60fb      	str	r3, [r7, #12]
 8004314:	e002      	b.n	800431c <prvInsertBlockIntoFreeList+0x14>
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	60fb      	str	r3, [r7, #12]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	429a      	cmp	r2, r3
 8004324:	d8f7      	bhi.n	8004316 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	68ba      	ldr	r2, [r7, #8]
 8004330:	4413      	add	r3, r2
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	429a      	cmp	r2, r3
 8004336:	d108      	bne.n	800434a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	685a      	ldr	r2, [r3, #4]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	441a      	add	r2, r3
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	68ba      	ldr	r2, [r7, #8]
 8004354:	441a      	add	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	429a      	cmp	r2, r3
 800435c:	d118      	bne.n	8004390 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	4b15      	ldr	r3, [pc, #84]	; (80043b8 <prvInsertBlockIntoFreeList+0xb0>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	429a      	cmp	r2, r3
 8004368:	d00d      	beq.n	8004386 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	685a      	ldr	r2, [r3, #4]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	441a      	add	r2, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	601a      	str	r2, [r3, #0]
 8004384:	e008      	b.n	8004398 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004386:	4b0c      	ldr	r3, [pc, #48]	; (80043b8 <prvInsertBlockIntoFreeList+0xb0>)
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	601a      	str	r2, [r3, #0]
 800438e:	e003      	b.n	8004398 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004398:	68fa      	ldr	r2, [r7, #12]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	429a      	cmp	r2, r3
 800439e:	d002      	beq.n	80043a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80043a6:	bf00      	nop
 80043a8:	3714      	adds	r7, #20
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop
 80043b4:	20004920 	.word	0x20004920
 80043b8:	20004928 	.word	0x20004928

080043bc <__libc_init_array>:
 80043bc:	b570      	push	{r4, r5, r6, lr}
 80043be:	4e0d      	ldr	r6, [pc, #52]	; (80043f4 <__libc_init_array+0x38>)
 80043c0:	4c0d      	ldr	r4, [pc, #52]	; (80043f8 <__libc_init_array+0x3c>)
 80043c2:	1ba4      	subs	r4, r4, r6
 80043c4:	10a4      	asrs	r4, r4, #2
 80043c6:	2500      	movs	r5, #0
 80043c8:	42a5      	cmp	r5, r4
 80043ca:	d109      	bne.n	80043e0 <__libc_init_array+0x24>
 80043cc:	4e0b      	ldr	r6, [pc, #44]	; (80043fc <__libc_init_array+0x40>)
 80043ce:	4c0c      	ldr	r4, [pc, #48]	; (8004400 <__libc_init_array+0x44>)
 80043d0:	f000 f82c 	bl	800442c <_init>
 80043d4:	1ba4      	subs	r4, r4, r6
 80043d6:	10a4      	asrs	r4, r4, #2
 80043d8:	2500      	movs	r5, #0
 80043da:	42a5      	cmp	r5, r4
 80043dc:	d105      	bne.n	80043ea <__libc_init_array+0x2e>
 80043de:	bd70      	pop	{r4, r5, r6, pc}
 80043e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80043e4:	4798      	blx	r3
 80043e6:	3501      	adds	r5, #1
 80043e8:	e7ee      	b.n	80043c8 <__libc_init_array+0xc>
 80043ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80043ee:	4798      	blx	r3
 80043f0:	3501      	adds	r5, #1
 80043f2:	e7f2      	b.n	80043da <__libc_init_array+0x1e>
 80043f4:	08004504 	.word	0x08004504
 80043f8:	08004504 	.word	0x08004504
 80043fc:	08004504 	.word	0x08004504
 8004400:	08004508 	.word	0x08004508

08004404 <memcpy>:
 8004404:	b510      	push	{r4, lr}
 8004406:	1e43      	subs	r3, r0, #1
 8004408:	440a      	add	r2, r1
 800440a:	4291      	cmp	r1, r2
 800440c:	d100      	bne.n	8004410 <memcpy+0xc>
 800440e:	bd10      	pop	{r4, pc}
 8004410:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004414:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004418:	e7f7      	b.n	800440a <memcpy+0x6>

0800441a <memset>:
 800441a:	4402      	add	r2, r0
 800441c:	4603      	mov	r3, r0
 800441e:	4293      	cmp	r3, r2
 8004420:	d100      	bne.n	8004424 <memset+0xa>
 8004422:	4770      	bx	lr
 8004424:	f803 1b01 	strb.w	r1, [r3], #1
 8004428:	e7f9      	b.n	800441e <memset+0x4>
	...

0800442c <_init>:
 800442c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800442e:	bf00      	nop
 8004430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004432:	bc08      	pop	{r3}
 8004434:	469e      	mov	lr, r3
 8004436:	4770      	bx	lr

08004438 <_fini>:
 8004438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800443a:	bf00      	nop
 800443c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800443e:	bc08      	pop	{r3}
 8004440:	469e      	mov	lr, r3
 8004442:	4770      	bx	lr
